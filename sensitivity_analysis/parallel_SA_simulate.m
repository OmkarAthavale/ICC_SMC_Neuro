%%% parallel_SA_simulate.m
%%% Reads a matrix of parameter values and simulates the model with 
%%% f_i = f_e = 1 for all values. The script SA1_sampling.py uses SALib in
%%% Python to generate Saltelli sample of +/-10% of the selected parameter
%%% values. Run SA2_analysis_plot.py after this script to perform 
%%% Variance-Based Sensitivity Analysis by the Sobol method and 
%%% generate plots of the result. 
addpath(genpath('..'));
weighting = [1 1 1];
f_i = 10;
f_e = 10;

% read sampled parameters from file (file generated by SA1_sampling.py)
effect_vals = readmatrix('param_values.txt');
n = size(effect_vals, 1);

% initialise result arrays
f = zeros(n, 1);
peak_p = zeros(n, 1);
plateau_p = zeros(n, 1);
peak_p_ICC = zeros(n, 1);
plateau_p_ICC = zeros(n, 1);

% simulate with sampled parameter values in parallel
parpool(32);
parfor i = 1:n
    [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weighting, f_e, f_i);
    T = a(:, 7);
    Vm_ICC = s(:,3);
    Vm_SMC = s(:,1);
    try
        [f(i), peak_p(i), plateau_p(i)] = calculate_metrics(t, T, [60000 180000]);
    catch
        f(i) = NaN;
        peak_p(i) = NaN;
        plateau_p(i) = NaN;
    end
    try
        [~, peak_p_ICC(i), plateau_p_ICC(i)] = calculate_metrics(t, Vm_ICC, [60000 180000]);
    catch
        peak_p_ICC(i) = NaN;
        plateau_p_ICC(i) = NaN;
    end
end

% write results to file
writematrix(f, 'output_frequency.txt');
writematrix(peak_p, 'output_peak.txt');
writematrix(plateau_p, 'output_plateau.txt');
writematrix(peak_p_ICC, 'output_peak_ICC.txt');
writematrix(plateau_p_ICC, 'output_plateau_ICC.txt');

% Run SA2_analysis_plot.py now to perform Variance-Based Sensitivity 
% Analysis by the Sobol method and generate plots of the result. 

% 