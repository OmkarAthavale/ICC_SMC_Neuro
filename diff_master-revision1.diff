diff --git a/.gitignore b/.gitignore
index e38cedf..c747490 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,5 @@
 data/*
 generated_fig/*
 *.txt
-*.svg
\ No newline at end of file
+*.svg
+.idea/*
\ No newline at end of file
diff --git a/ICC_SMC_Neuro.cellml b/ICC_SMC_Neuro.cellml
index 4659cfa..626cbfe 100644
--- a/ICC_SMC_Neuro.cellml
+++ b/ICC_SMC_Neuro.cellml
@@ -116,6 +116,9 @@
     <units name="kilopascals">
         <unit prefix="kilo" units="pascal"/>
     </units>
+    <units name="Hertz">
+        <unit exponent="-1" units="time_units_ICC"/>
+    </units>
     <component name="Time">
         <variable name="time" private_interface="out" public_interface="out" units="time_units"/>
     </component>
@@ -986,11 +989,12 @@
         </math>
     </component>
     <component name="neural_input">
-        <variable cmeta:id="excitatory_neural" initial_value="0" name="x_e" units="dimensionless"/>
-        <variable cmeta:id="inhibitory_neural" initial_value="0" name="x_i" units="dimensionless"/>
+        <variable cmeta:id="excitatory_neural" initial_value="0" name="f_e" units="dimensionless"/>
+        <variable cmeta:id="inhibitory_neural" initial_value="0" name="f_i" units="dimensionless"/>
         <variable name="w_iICC" units="dimensionless"/>
         <variable name="w_iSMC" units="dimensionless"/>
         <variable name="w_e" units="dimensionless"/>
+        <variable initial_value="10" name="f_max" units="Hertz"/>
         <variable initial_value="0.326" name="k_iAno1" units="dimensionless"/>
         <variable initial_value="0.775" name="k_iNSCC" units="dimensionless"/>
         <variable initial_value="0.882" name="k_iCa50" units="dimensionless"/>
@@ -1016,12 +1020,16 @@
                         <apply>
                             <exp/>
                             <apply>
-                                <times/>
+                                <divide/>
                                 <apply>
-                                    <minus/>
-                                    <ci>p_iICC</ci>
+                                    <times/>
+                                    <apply>
+                                        <minus/>
+                                        <ci>p_iICC</ci>
+                                    </apply>
+                                    <ci>f_i</ci>
                                 </apply>
-                                <ci>x_i</ci>
+                                <ci>f_max</ci>
                             </apply>
                         </apply>
                     </apply>
@@ -1049,12 +1057,16 @@
                         <apply>
                             <exp/>
                             <apply>
-                                <times/>
+                                <divide/>
                                 <apply>
-                                    <minus/>
-                                    <ci>p_iSMC</ci>
+                                    <times/>
+                                    <apply>
+                                        <minus/>
+                                        <ci>p_iSMC</ci>
+                                    </apply>
+                                    <ci>f_i</ci>
                                 </apply>
-                                <ci>x_i</ci>
+                                <ci>f_max</ci>
                             </apply>
                         </apply>
                     </apply>
@@ -1082,12 +1094,16 @@
                         <apply>
                             <exp/>
                             <apply>
-                                <times/>
+                                <divide/>
                                 <apply>
-                                    <minus/>
-                                    <ci>p_e</ci>
+                                    <times/>
+                                    <apply>
+                                        <minus/>
+                                        <ci>p_e</ci>
+                                    </apply>
+                                    <ci>f_e</ci>
                                 </apply>
-                                <ci>x_e</ci>
+                                <ci>f_max</ci>
                             </apply>
                         </apply>
                     </apply>
diff --git a/ICC_SMC_Neuro.opencor b/ICC_SMC_Neuro.opencor
new file mode 100644
index 0000000..6140594
--- /dev/null
+++ b/ICC_SMC_Neuro.opencor
@@ -0,0 +1,1523 @@
+def model{ICC_SMC_Neuro} ICC_SMC_Neuro as
+    def unit volume_units as
+        unit meter {pref: micro, expo: 3};
+    enddef;
+
+    def unit Inverse_Voltage_units as
+        unit voltage_units {expo: -1};
+    enddef;
+
+    def unit time_units as
+        unit second {pref: milli};
+    enddef;
+
+    def unit rate_constants_units as
+        unit time_units {expo: -1};
+    enddef;
+
+    def unit capacitance_units as
+        unit farad {pref: pico};
+    enddef;
+
+    def unit F_units as
+        unit mole {expo: -1};
+        unit coulomb;
+    enddef;
+
+    def unit R_units as
+        unit joule {pref: milli};
+        unit mole {expo: -1};
+        unit kelvin {expo: -1};
+    enddef;
+
+    def unit per_millimolar as
+        unit litre;
+        unit mole {pref: milli, expo: -1};
+    enddef;
+
+    def unit per_litre as
+        unit litre {expo: -1};
+    enddef;
+
+    def unit millimolar_per_millisecond as
+        unit mole {pref: milli};
+        unit litre {expo: -1};
+        unit second {pref: milli, expo: -1};
+    enddef;
+
+    def unit mole_to_millimole as
+        unit mole;
+        unit mole {pref: milli, expo: -1};
+    enddef;
+
+    def unit conductance_units as
+        unit siemens {pref: nano};
+    enddef;
+
+    def unit voltage_units as
+        unit volt {pref: milli};
+    enddef;
+
+    def unit Inverse_Voltage_ICC as
+        unit voltage_units {expo: -1};
+    enddef;
+
+    def unit time_units_ICC as
+        unit second;
+    enddef;
+
+    def unit current_units as
+        unit voltage_units;
+        unit conductance_units;
+    enddef;
+
+    def unit rate_constants_units_second as
+        unit time_units_ICC {expo: -1};
+    enddef;
+
+    def unit capacitance_units_ICC as
+        unit farad {pref: nano};
+    enddef;
+
+    def unit Temperature_units as
+        unit kelvin;
+    enddef;
+
+    def unit Inverse_Temperature_units_times_conductance as
+        unit Temperature_units {expo: -1};
+        unit conductance_units;
+    enddef;
+
+    def unit F_units_ICC as
+        unit mole {pref: nano, expo: -1};
+        unit coulomb {pref: micro};
+    enddef;
+
+    def unit R_units_ICC as
+        unit joule {pref: nano};
+        unit mole {pref: nano, expo: -1};
+        unit kelvin {expo: -1};
+    enddef;
+
+    def unit millimolar as
+        unit mole {pref: milli};
+        unit litre {expo: -1};
+    enddef;
+
+    def unit micromolar as
+        unit mole {pref: micro};
+        unit litre {expo: -1};
+    enddef;
+
+    def unit per_micromolar as
+        unit litre;
+        unit mole {pref: micro, expo: -1};
+    enddef;
+
+    def unit per_micromolarsecond as
+        unit mole {pref: micro, expo: -1};
+        unit litre {expo: 1};
+        unit second {expo: -1};
+    enddef;
+
+    def unit micromolar_per_second as
+        unit mole {pref: micro};
+        unit litre {expo: -1};
+        unit second {expo: -1};
+    enddef;
+
+    def unit micrometer as
+        unit meter {pref: micro};
+    enddef;
+
+    def unit per_micrometer3 as
+        unit metre {pref: micro, expo: -3};
+    enddef;
+
+    def unit micrometer2_per_time as
+        unit meter {pref: micro, expo: 2};
+        unit second {expo: -1};
+    enddef;
+
+    def unit per_time2 as
+        unit time_units_ICC {expo: -2};
+    enddef;
+
+    def unit kilopascals as
+        unit pascal {pref: kilo};
+    enddef;
+
+    def unit Hertz as
+        unit time_units_ICC {expo: -1};
+    enddef;
+
+    def comp Time as
+        var time: time_units {pub: out, priv: out};
+    enddef;
+
+    // SMC components based on Corrias and Buist 2007 doi:10.1007/s10439-007-9324-8
+
+    def comp Environment as
+        var T: Temperature_units {init: 310, priv: out};
+        var T_exp: Temperature_units {init: 297, priv: out};
+        var F: F_units {init: 96486, pub: out, priv: out};
+        var R: R_units {init: 8314.4, priv: out};
+        var Q10Ca: dimensionless {init: 2.1, priv: out};
+        var Q10K: dimensionless {init: 1.365, priv: out};
+        var Q10Na: dimensionless {init: 2.45, priv: out};
+        var Ca_o: millimolar {init: 2.5, pub: out, priv: out};
+        var Na_o: millimolar {init: 137, pub: out, priv: out};
+        var K_o: millimolar {init: 5.9, pub: out, priv: out};
+        var Cl_o: millimolar {init: 134, pub: out, priv: out};
+        var T_correction_Na: dimensionless {pub: out, priv: out};
+        var T_correction_K: dimensionless {pub: out, priv: out};
+        var T_correction_Ca: dimensionless {pub: out, priv: out};
+        var T_correction_BK: conductance_units {pub: out, priv: out};
+        var FoRT: Inverse_Voltage_units {pub: out, priv: out};
+        var RToF: voltage_units {pub: out, priv: out};
+
+        FoRT = F/(R*T);
+        RToF = R*T/F;
+        T_correction_Ca = pow(Q10Ca, (T-T_exp)/10{Temperature_units});
+        T_correction_K = pow(Q10K, (T-T_exp)/10{Temperature_units});
+        T_correction_Na = pow(Q10Na, (T-T_exp)/10{Temperature_units});
+        T_correction_BK = 1.1{Inverse_Temperature_units_times_conductance}*(T-T_exp);
+    enddef;
+
+    def comp SM_Membrane as
+        var Cm_SM: capacitance_units {init: 77};
+        var Vol_SM: volume_units {init: 3500, pub: out, priv: out};
+        var{V_SMC} Vm_SM: voltage_units {init: -69.75, pub: out, priv: out};
+        var time: time_units {pub: in, priv: out};
+        var{cytosolic_calcium_concentration} Ca_i: millimolar {init: 0.00008, pub: out, priv: out};
+        var Na_i: millimolar {init: 10, pub: out, priv: out};
+        var K_i: millimolar {init: 164, priv: out};
+        var Ca_o: millimolar {pub: in, priv: out};
+        var Na_o: millimolar {pub: in, priv: out};
+        var K_o: millimolar {pub: in, priv: out};
+        var Cl_o: millimolar {pub: in, priv: out};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var T_correction_Na: dimensionless {pub: in, priv: out};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var T_correction_BK: conductance_units {pub: in, priv: out};
+        var RToF: voltage_units {pub: in, priv: out};
+        var FoRT: Inverse_Voltage_units {pub: in, priv: out};
+        var F: F_units {pub: in, priv: out};
+        var I_Na_SM: current_units {priv: in};
+        var I_Ltype_SM: current_units {priv: in};
+        var I_LVA_SM: current_units {priv: in};
+        var I_kr_SM: current_units {priv: in};
+        var I_ka_SM: current_units {priv: in};
+        var I_BK_SM: current_units {priv: in};
+        var S_iSK: dimensionless {pub: in, priv: out};
+        var I_SK_SM: current_units {priv: in};
+        var I_NSCC_SM: current_units {priv: in};
+        var I_bk_SM: current_units {priv: in};
+        var J_CaSR_SM: millimolar_per_millisecond {priv: in};
+        var I_couple: current_units {pub: in};
+
+        ode(Vm_SM, time) = -1.0{dimensionless}*1.0{dimensionless}/Cm_SM*(I_Na_SM+I_SK_SM+I_Ltype_SM+I_LVA_SM+I_kr_SM+I_ka_SM+I_BK_SM+I_NSCC_SM+I_bk_SM+-1.0{dimensionless}*I_couple);
+        ode(Ca_i, time) = (-1{dimensionless}*I_Ltype_SM+-1{dimensionless}*I_LVA_SM)/(2.0{dimensionless}*0.001{mole_to_millimole}*F*Vol_SM)+-1{dimensionless}*J_CaSR_SM;
+    enddef;
+
+    def comp I_couple as
+        var g_couple: conductance_units {init: 1.3};
+        var I_couple: current_units {pub: out};
+        var V_ICC: voltage_units {pub: in};
+        var V_SMC: voltage_units {pub: in};
+
+        I_couple = g_couple*(V_ICC-V_SMC);
+    enddef;
+
+    def comp d_Ltype_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var d_inf_Ltype_SM: dimensionless;
+        var tau_d_Ltype_SM: time_units;
+        var d_Ltype_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        d_inf_Ltype_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+17{voltage_units})/-4.3{voltage_units}));
+        tau_d_Ltype_SM = T_correction_Ca*0.47{time_units};
+        ode(d_Ltype_SM, time) = (d_inf_Ltype_SM-d_Ltype_SM)/tau_d_Ltype_SM;
+    enddef;
+
+    def comp f_Ltype_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var f_inf_Ltype_SM: dimensionless;
+        var tau_f_Ltype_SM: time_units;
+        var f_Ltype_SM: dimensionless {init: 0.95, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_inf_Ltype_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+43{voltage_units})/8.9{voltage_units}));
+        tau_f_Ltype_SM = T_correction_Ca*86{time_units};
+        ode(f_Ltype_SM, time) = (f_inf_Ltype_SM-f_Ltype_SM)/tau_f_Ltype_SM;
+    enddef;
+
+    def comp f_ca_Ltype_SM as
+        var Ca_i: millimolar {pub: in};
+        var f_ca_inf_Ltype_SM: dimensionless;
+        var tau_f_ca_Ltype_SM: time_units;
+        var f_ca_Ltype_SM: dimensionless {init: 1.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_ca_inf_Ltype_SM = 1.0{dimensionless}-1.0{dimensionless}/(1.0{dimensionless}+exp((Ca_i-0.00008999{millimolar}-0.000214{millimolar})/-0.0000131{millimolar}));
+        tau_f_ca_Ltype_SM = T_correction_Ca*2{time_units};
+        ode(f_ca_Ltype_SM, time) = (f_ca_inf_Ltype_SM-f_ca_Ltype_SM)/tau_f_ca_Ltype_SM;
+    enddef;
+
+    def comp I_Ltype_SM as
+        var I_Ltype_SM: current_units {pub: out};
+        var E_Ca: voltage_units;
+        var G_max_Ltype: conductance_units {init: 65};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var f_Ltype_SM: dimensionless {priv: in};
+        var d_Ltype_SM: dimensionless {priv: in};
+        var f_ca_Ltype_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Ca_o: millimolar {pub: in};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Ca = 0.5{dimensionless}*RToF*ln(Ca_o/Ca_i);
+        I_Ltype_SM = G_max_Ltype*f_Ltype_SM*d_Ltype_SM*f_ca_Ltype_SM*(Vm_SM-E_Ca);
+    enddef;
+
+    def comp J_CaSR_SM as
+        var J_CaSR_SM: millimolar_per_millisecond {pub: out};
+        var J_max_CaSR: millimolar_per_millisecond {init: 0.31705};
+        var Ca_i: millimolar {pub: in};
+
+        J_CaSR_SM = J_max_CaSR*pow(Ca_i*1.0{per_millimolar}, 1.34{dimensionless});
+    enddef;
+
+    def comp d_LVA_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var d_inf_LVA_SM: dimensionless;
+        var tau_d_LVA_SM: time_units;
+        var d_LVA_SM: dimensionless {init: 0.02, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        d_inf_LVA_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+27.5{voltage_units})/-10.9{voltage_units}));
+        tau_d_LVA_SM = T_correction_Ca*3.0{time_units};
+        ode(d_LVA_SM, time) = (d_inf_LVA_SM-d_LVA_SM)/tau_d_LVA_SM;
+    enddef;
+
+    def comp f_LVA_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var f_inf_LVA_SM: dimensionless;
+        var tau_f_LVA_SM: time_units;
+        var f_LVA_SM: dimensionless {init: 0.99, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_inf_LVA_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+15.8{voltage_units})/7{voltage_units}));
+        tau_f_LVA_SM = T_correction_Ca*7.58{time_units}*exp(Vm_SM*0.00817{Inverse_Voltage_units});
+        ode(f_LVA_SM, time) = (f_inf_LVA_SM-f_LVA_SM)/tau_f_LVA_SM;
+    enddef;
+
+    def comp I_LVA_SM as
+        var I_LVA_SM: current_units {pub: out};
+        var E_Ca: voltage_units;
+        var G_max_LVA: conductance_units {init: 0.18};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var f_LVA_SM: dimensionless {priv: in};
+        var d_LVA_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Ca_o: millimolar {pub: in};
+        var Ca_i: millimolar {pub: in};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Ca = 0.5{dimensionless}*RToF*ln(Ca_o/Ca_i);
+        I_LVA_SM = G_max_LVA*f_LVA_SM*d_LVA_SM*(Vm_SM-E_Ca);
+    enddef;
+
+    def comp d_BK_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var Ca_i: millimolar {pub: in};
+        var d_BK_SM: dimensionless {pub: out};
+        var time: time_units {pub: in};
+
+        d_BK_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp(Vm_SM/-17{voltage_units}-2.0{dimensionless}*ln(Ca_i/0.001{millimolar})));
+    enddef;
+
+    def comp I_BK_SM as
+        var I_BK_SM: current_units {pub: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var E_K: voltage_units;
+        var G_max_BK: conductance_units {init: 45.7};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var d_BK_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_BK: conductance_units {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_BK_SM = (G_max_BK+T_correction_BK)*d_BK_SM*(Vm_SM-E_K);
+    enddef;
+
+    // active tension parameters based on Arner 1982 doi:10.1007/BF00580790
+
+    def comp active_tension as
+        var{tension} T: kilopascals;
+        var Ca50_0: micromolar {init: 0.5623413};
+        var S_iCa50: dimensionless {pub: in};
+        var Ca50: micromolar;
+        var h: dimensionless {init: 3.4};
+        var T_max: kilopascals {init: 313};
+        var Ca_i_SM: micromolar {pub: in};
+
+        Ca50 = Ca50_0*(1{dimensionless}+S_iCa50);
+        T = T_max*pow(Ca_i_SM, h)/(pow(Ca_i_SM, h)+pow(Ca50, h));
+    enddef;
+
+    def comp neural_input as
+        var{excitatory_neural} f_e: dimensionless {init: 0};
+        var{inhibitory_neural} f_i: dimensionless {init: 0};
+        var w_iICC: dimensionless;
+        var w_iSMC: dimensionless;
+        var w_e: dimensionless;
+        var f_max: Hertz {init: 10};
+        var k_iAno1: dimensionless {init: 0.326};
+        var k_iNSCC: dimensionless {init: 0.775};
+        var k_iCa50: dimensionless {init: 0.882};
+        var k_iSK: dimensionless {init: 0.441};
+        var k_eIP3: dimensionless {init: 0.92};
+        var S_iAno1: dimensionless {pub: out};
+        var S_iNSCC: dimensionless {pub: out};
+        var S_iCa50: dimensionless {pub: out};
+        var S_iSK: dimensionless {pub: out};
+        var S_eIP3: dimensionless {pub: out};
+        var p_iICC: dimensionless {init: 3.17};
+        var p_iSMC: dimensionless {init: 1.17};
+        var p_e: dimensionless {init: 5};
+
+        w_iICC = (1{dimensionless}-exp(-p_iICC*f_i/f_max))/(1{dimensionless}-exp(-p_iICC));
+        w_iSMC = (1{dimensionless}-exp(-p_iSMC*f_i/f_max))/(1{dimensionless}-exp(-p_iSMC));
+        w_e = (1{dimensionless}-exp(-p_e*f_e/f_max))/(1{dimensionless}-exp(-p_e));
+        S_iAno1 = w_iICC*k_iAno1;
+        S_iNSCC = w_iICC*k_iNSCC;
+        S_iCa50 = w_iSMC*k_iCa50;
+        S_iSK = w_iSMC*k_iSK;
+        S_eIP3 = w_e*k_eIP3;
+    enddef;
+
+    // SK channel based on Kennedy, Bers, Chiamvimonvat, and Sato 2017 doi:10.1113/JP273626
+
+    def comp x_SK_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var x_SK_SM: dimensionless {init: 0, pub: out};
+        var time: time_units {pub: in};
+        var x_SK_inf_SM: dimensionless;
+        var tau_x_SK_SM: time_units;
+        var n: dimensionless {init: 2};
+        var EC50: micromolar {init: 0.3};
+
+        x_SK_inf_SM = 0.81{dimensionless}*pow(Ca_i, n)/(pow(Ca_i, n)+pow(EC50, n));
+        tau_x_SK_SM = 1{time_units}/(0.047{per_micromolar}*Ca_i+1{dimensionless}/76{dimensionless});
+        ode(x_SK_SM, time) = (x_SK_inf_SM-x_SK_SM)/tau_x_SK_SM;
+    enddef;
+
+    // SK
+
+    def comp I_SK_SM as
+        var I_SK_SM: current_units {pub: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var E_K: voltage_units;
+        var G_max_SK: conductance_units {init: 3.5};
+        var S_iSK: dimensionless {pub: in};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var x_SK_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_BK: conductance_units {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_SK_SM = G_max_SK*x_SK_SM*S_iSK*(Vm_SM-E_K);
+    enddef;
+
+    def comp I_bk_SM as
+        var I_bk_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_bk: conductance_units {init: 0.0144};
+        var Vm_SM: voltage_units {pub: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_bk_SM = G_max_bk*(Vm_SM-E_K);
+    enddef;
+
+    def comp xr1_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xr1_inf_SM: dimensionless;
+        var tau_xr1_SM: time_units;
+        var xr1_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xr1_inf_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+27{voltage_units})/-5.0{voltage_units}));
+        tau_xr1_SM = T_correction_K*80{time_units};
+        ode(xr1_SM, time) = (xr1_inf_SM-xr1_SM)/tau_xr1_SM;
+    enddef;
+
+    def comp xr2_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xr2_inf_SM: dimensionless;
+        var tau_xr2_SM: time_units;
+        var xr2_SM: dimensionless {init: 0.82, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xr2_inf_SM = 0.2{dimensionless}+0.8{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+58{voltage_units})/10{voltage_units}));
+        tau_xr2_SM = T_correction_K*(-707{time_units}+1481{time_units}*exp((Vm_SM+36{voltage_units})/95{voltage_units}));
+        ode(xr2_SM, time) = (xr2_inf_SM-xr2_SM)/tau_xr2_SM;
+    enddef;
+
+    def comp I_kr_SM as
+        var I_kr_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_kr_SM: conductance_units {init: 35};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var xr1_SM: dimensionless {priv: in};
+        var xr2_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_kr_SM = G_max_kr_SM*xr1_SM*xr2_SM*(Vm_SM-E_K);
+    enddef;
+
+    def comp m_Na_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var m_inf_Na: dimensionless;
+        var tau_m_Na: time_units;
+        var m_Na_SM: dimensionless {init: 0.005, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Na: dimensionless {pub: in};
+
+        m_inf_Na = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+47{voltage_units})/-4.8{voltage_units}));
+        tau_m_Na = T_correction_Na*(Vm_SM*-0.017{Inverse_Voltage_units}*1{time_units}+0.440{time_units});
+        ode(m_Na_SM, time) = (m_inf_Na-m_Na_SM)/tau_m_Na;
+    enddef;
+
+    def comp h_Na_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var h_inf_Na: dimensionless;
+        var tau_h_Na: time_units;
+        var h_Na_SM: dimensionless {init: 0.05787, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Na: dimensionless {pub: in};
+
+        h_inf_Na = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+78{voltage_units})/3{voltage_units}));
+        tau_h_Na = T_correction_Na*(Vm_SM*-0.25{Inverse_Voltage_units}*1{time_units}+5.50{time_units});
+        ode(h_Na_SM, time) = (h_inf_Na-h_Na_SM)/tau_h_Na;
+    enddef;
+
+    def comp I_Na_SM as
+        var I_Na_SM: current_units {pub: out};
+        var E_Na: voltage_units;
+        var G_max_Na_SM: conductance_units {init: 3};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var h_Na_SM: dimensionless {priv: in};
+        var m_Na_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Na_o: millimolar {pub: in};
+        var Na_i: millimolar {pub: in};
+        var T_correction_Na: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Na = RToF*ln(Na_o/Na_i);
+        I_Na_SM = G_max_Na_SM*h_Na_SM*m_Na_SM*(Vm_SM-E_Na);
+    enddef;
+
+    def comp xa1_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xa1_inf_SM: dimensionless;
+        var tau_xa1_SM: time_units;
+        var xa1_SM: dimensionless {init: 0.00414, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xa1_inf_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+26.5{voltage_units})/-7.9{voltage_units}));
+        tau_xa1_SM = T_correction_K*(31.8{time_units}+175{time_units}*exp(-0.5{dimensionless}*sqr((Vm_SM+44.4{voltage_units})/22.3{voltage_units})));
+        ode(xa1_SM, time) = (xa1_inf_SM-xa1_SM)/tau_xa1_SM;
+    enddef;
+
+    def comp xa2_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xa2_inf_SM: dimensionless;
+        var tau_xa2_SM: time_units;
+        var xa2_SM: dimensionless {init: 0.72, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xa2_inf_SM = 0.1{dimensionless}+0.9{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+65{voltage_units})/6.2{voltage_units}));
+        tau_xa2_SM = T_correction_K*90{time_units};
+        ode(xa2_SM, time) = (xa2_inf_SM-xa2_SM)/tau_xa2_SM;
+    enddef;
+
+    def comp I_ka_SM as
+        var I_ka_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_ka_SM: conductance_units {init: 9};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var xa1_SM: dimensionless {priv: in};
+        var xa2_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_ka_SM = G_max_ka_SM*xa1_SM*xa2_SM*(Vm_SM-E_K);
+    enddef;
+
+    def comp m_NSCC_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var m_inf_NSCC_SM: dimensionless;
+        var tau_m_NSCC_SM: time_units;
+        var m_NSCC_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+
+        m_inf_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+25.0{voltage_units})/-20{voltage_units}));
+        tau_m_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+66{voltage_units})/-26{voltage_units}))*150{time_units};
+        ode(m_NSCC_SM, time) = (m_inf_NSCC_SM-m_NSCC_SM)/tau_m_NSCC_SM;
+    enddef;
+
+    def comp I_NSCC_SM as
+        var I_NSCC_SM: current_units {pub: out};
+        var E_NSCC: voltage_units {init: -28};
+        var G_max_NSCC_SM: conductance_units {init: 50};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var Ach: millimolar {init: 0.00001};
+        var m_NSCC_SM: dimensionless {priv: in};
+        var f_ca_NSCC_SM: dimensionless;
+        var rach_NSCC_SM: dimensionless;
+        var RToF: voltage_units {pub: in};
+        var Na_o: millimolar {pub: in};
+        var Na_i: millimolar {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        f_ca_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+pow(Ca_i/0.0002{millimolar}, -4.0{dimensionless}));
+        rach_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+0.01{millimolar}/Ach);
+        I_NSCC_SM = G_max_NSCC_SM*m_NSCC_SM*f_ca_NSCC_SM*rach_NSCC_SM*(Vm_SM-E_NSCC);
+    enddef;
+
+    // ICC components based on Lees-Green, Gibbons, Farrugia, Sneyd, and Cheng 2014 doi:10.1152/ajpgi.00449.2013
+
+    def comp Parameters as
+        var p2m: dimensionless {init: 1e-09, pub: out};
+        var umc2L: dimensionless {init: 1e+15, pub: out};
+        var T: Temperature_units {init: 310, pub: out};
+        var F: F_units_ICC {init: 96.4846, pub: out};
+        var R: R_units_ICC {init: 8.3144, pub: out};
+        var z_ca: dimensionless {init: 2, pub: out};
+        var z_na: dimensionless {init: 1, pub: out};
+        var z_k: dimensionless {init: 1, pub: out};
+        var z_cl: dimensionless {init: -1, pub: out};
+        var Ca_o: micromolar {init: 2000, pub: out};
+        var Cl_i: micromolar {init: 78000, pub: out};
+        var Cl_o: micromolar {init: 166000, pub: out};
+        var{intracellular_potassium_concentration_ICC} K_i: micromolar {init: 140000, pub: out};
+        var K_o: micromolar {init: 5000, pub: out};
+        var Na_i: micromolar {init: 30000, pub: out};
+        var Na_o: micromolar {init: 140000, pub: out};
+    enddef;
+
+    def comp Volume as
+        var cellVol: litre {init: 1e-12};
+        var cellPropER: dimensionless {init: 0.1};
+        var cellPropCyto: dimensionless {init: 0.7};
+        var volER: litre {pub: out};
+        var volCyto: litre {pub: out};
+
+        volER = cellVol*cellPropER;
+        volCyto = cellVol*cellPropCyto;
+    enddef;
+
+    def comp Nernst as
+        var T: Temperature_units {pub: in};
+        var F: F_units_ICC {pub: in};
+        var R: R_units_ICC {pub: in};
+        var z_na: dimensionless {pub: in};
+        var z_k: dimensionless {pub: in};
+        var z_cl: dimensionless {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var Cl_i: micromolar {pub: in};
+        var Cl_o: micromolar {pub: in};
+        var K_i: micromolar {pub: in};
+        var K_o: micromolar {pub: in};
+        var Na_i: micromolar {pub: in};
+        var Na_o: micromolar {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var Ca_o: micromolar {pub: in};
+        var E_NSCC: voltage_units {init: 0, pub: out};
+        var E_NSV: voltage_units {init: 0, pub: out};
+        var E_SOC: voltage_units {init: 0, pub: out};
+        var E_Ca: voltage_units {pub: out};
+        var E_Cl: voltage_units {pub: out};
+        var E_Na: voltage_units {pub: out};
+        var E_K: voltage_units {pub: out};
+
+        E_Ca = R*T/(F*z_ca)*ln(Ca_o/Ca_i);
+        E_Cl = R*T/(F*z_cl)*ln(Cl_o/Cl_i);
+        E_Na = R*T/(F*z_na)*ln(Na_o/Na_i);
+        E_K = R*T/(F*z_k)*ln(K_o/K_i);
+    enddef;
+
+    def comp d_CaT as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var d_CaT_Vh: voltage_units {init: -40};
+        var d_CaT_S: voltage_units {init: -3};
+        var d_CaT_tau: time_units_ICC {init: 0.006};
+        var d_CaT_inf: dimensionless;
+        var d_CaT: dimensionless {init: 0.001271016263081, pub: out};
+
+        d_CaT_inf = 1{dimensionless}/(1{dimensionless}+exp((Vm-d_CaT_Vh)/d_CaT_S));
+        ode(d_CaT, time) = (d_CaT_inf-d_CaT)/d_CaT_tau;
+    enddef;
+
+    def comp f_CaT as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var f_CaT_Vh: voltage_units {init: -55};
+        var f_CaT_S: voltage_units {init: 5};
+        var f_CaT_tau: time_units_ICC {init: 0.1};
+        var f_CaT_inf: dimensionless;
+        var f_CaT: dimensionless {init: 0.5, pub: out};
+
+        f_CaT_inf = 1{dimensionless}/(1{dimensionless}+exp((Vm-f_CaT_Vh)/f_CaT_S));
+        ode(f_CaT, time) = (f_CaT_inf-f_CaT)/f_CaT_tau;
+    enddef;
+
+    def comp I_CaT as
+        var g_CaT: conductance_units {init: 4};
+        var time: time_units_ICC {pub: in, priv: out};
+        var Vm: voltage_units {pub: in, priv: out};
+        var p2m: dimensionless {pub: in};
+        var F: F_units_ICC {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var E_Ca: voltage_units {pub: in};
+        var volCyto: litre {pub: in};
+        var f_CaT: dimensionless {pub: out, priv: in};
+        var d_CaT: dimensionless {pub: out, priv: in};
+        var I_CaT: current_units {pub: out};
+        var J_CaT: micromolar_per_second {pub: out};
+
+        I_CaT = g_CaT*d_CaT*f_CaT*(Vm-E_Ca);
+        J_CaT = -p2m*I_CaT/(z_ca*F*volCyto);
+    enddef;
+
+    def comp P_SOC as
+        var SOC_h: micromolar {init: 200, pub: out};
+        var Ca_er: micromolar {pub: in};
+        var SOC_n: dimensionless {init: 8, pub: out};
+        var P_SOC: dimensionless {pub: out};
+
+        P_SOC = 1{dimensionless}/(1{dimensionless}+pow(Ca_er/SOC_h, SOC_n));
+    enddef;
+
+    def comp I_SOC as
+        var g_SOC: conductance_units {init: 0.1};
+        var Ca_er: micromolar {pub: in, priv: out};
+        var p2m: dimensionless {pub: in};
+        var F: F_units_ICC {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var E_Ca: voltage_units {pub: in};
+        var Vm: voltage_units {pub: in, priv: out};
+        var SOCPropCa: dimensionless {init: 1, pub: out};
+        var volCyto: litre {pub: in};
+        var P_SOC: dimensionless {pub: out, priv: in};
+        var I_SOC: current_units {pub: out};
+        var J_SOC: micromolar_per_second {pub: out};
+
+        I_SOC = g_SOC*P_SOC*(Vm-E_Ca);
+        J_SOC = -p2m*SOCPropCa*I_SOC/(z_ca*F*volCyto);
+    enddef;
+
+    def comp I_BK as
+        var g_BK: conductance_units {init: 9};
+        var Vm: voltage_units {pub: in, priv: out};
+        var E_K: voltage_units {pub: in};
+        var I_BK: current_units {pub: out};
+
+        I_BK = g_BK*(Vm-E_K);
+    enddef;
+
+    def comp I_stim as
+        var{membrane_stimulus_current} I_stim: current_units {pub: out};
+        var{pacing_amplitude} stim_amp: current_units {init: 0};
+        var{pacing_start_time} stim_start: time_units_ICC {init: 18};
+        var{pacing_pulse_width} stim_PW: time_units_ICC {init: 0.5};
+        var time: time_units_ICC {pub: in, priv: out};
+
+        I_stim = sel
+            case (time > stim_start) and (time < stim_start+stim_PW):
+                stim_amp;
+            otherwise:
+                0{current_units};
+        endsel;
+
+        // a value of -168 will induce a SW at 18.5 s
+    enddef;
+
+    def comp P_NSCC as
+        var Ca_i: micromolar {pub: in};
+        var P_NSCC: dimensionless {pub: out};
+        var n_NSCC: dimensionless {init: 4};
+        var Ca_NSCC: micromolar {init: 1.8};
+
+        P_NSCC = pow(Ca_i, n_NSCC)/(pow(Ca_NSCC, n_NSCC)+pow(Ca_i, n_NSCC));
+    enddef;
+
+    def comp I_NSCC as
+        var g_NSCC: conductance_units {init: 30};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var I_NSCC: current_units {pub: out};
+        var P_NSCC: dimensionless {priv: in};
+        var Vm: voltage_units {pub: in, priv: out};
+        var E_NSCC: voltage_units {pub: in};
+        var S_iNSCC: dimensionless {pub: in};
+
+        I_NSCC = g_NSCC*(1{dimensionless}-S_iNSCC)*P_NSCC*(Vm-E_NSCC);
+    enddef;
+
+    def comp d_Ano1 as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var volCyto: litre {pub: in};
+        var J_SOC: micromolar_per_second {pub: in};
+        var Dc: micrometer2_per_time {init: 250};
+        var Dm: micrometer2_per_time {init: 75};
+        var Bm: micromolar {init: 50};
+        var Km: micromolar {init: 1};
+        var kc: Inverse_Voltage_ICC {init: 0.01248, pub: out};
+        var nSOC: dimensionless {init: 50, pub: out};
+        var Ca_i: micromolar {pub: in};
+        var rad: micrometer;
+        var mouthCa: micromolar_per_second;
+        var localCa: micromolar;
+        var d_Ano1_tau: time_units_ICC;
+        var d_Ano1_tscale: dimensionless {init: 1};
+        var colocalRadius: micrometer {init: 0.05};
+        var d_Ano1_inf: dimensionless;
+        var d_Ano1: dimensionless {init: 0.01, pub: out};
+        var Ano1_n: dimensionless {init: 2};
+        var Ano1_Vh: voltage_units {init: -100};
+        var Ano1_s: Inverse_Voltage_ICC {init: 0.0156};
+        var S_iAno1: dimensionless {pub: in};
+        var h_Ano1: dimensionless {pub: out};
+
+        rad = colocalRadius;
+        mouthCa = 1e15{per_litre}*J_SOC*volCyto/nSOC;
+        localCa = (-Dc*Km+mouthCa/(2{per_micrometer3}*pi*rad)+Dc*Ca_i-Dm*Bm*Km/(Km+Ca_i)+sqrt(sqr(Dc*Km+mouthCa/(2{per_micrometer3}*pi*rad)+Dc*Ca_i-Dm*Bm*Km/(Km+Ca_i))+4{dimensionless}*Dc*Dm*Bm*Km))/(2{dimensionless}*Dc);
+        d_Ano1_tau = d_Ano1_tscale*(81.63{time_units_ICC}*exp(-0.57{per_micromolar}*localCa)+76.17{time_units_ICC}*exp(-0.05374{per_micromolar}*localCa)*exp(Vm/(70.3{voltage_units}*exp(0.153{per_micromolar}*localCa))))*1e-3{dimensionless};
+        d_Ano1_inf = 1{dimensionless}/((1{dimensionless}+exp((Ano1_Vh-Vm)*Ano1_s))*(1{dimensionless}+pow(localCa/(1.39{micromolar}*exp(-kc*Vm)), -Ano1_n)));
+        h_Ano1 = d_Ano1*S_iAno1*1{per_time2}/(1{per_time2}+sqr((d_Ano1_inf-d_Ano1)/d_Ano1_tau));
+        ode(d_Ano1, time) = (d_Ano1_inf-d_Ano1)/d_Ano1_tau;
+    enddef;
+
+    def comp I_Ano1 as
+        var g_Ano1: conductance_units {init: 20};
+        var Vm: voltage_units {pub: in, priv: out};
+        var time: time_units_ICC {pub: in, priv: out};
+        var J_SOC: micromolar_per_second {pub: in, priv: out};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var volCyto: litre {pub: in, priv: out};
+        var E_Cl: voltage_units {pub: in};
+        var I_Ano1: current_units {pub: out};
+        var d_Ano1: dimensionless {pub: out, priv: in};
+        var h_Ano1: dimensionless {priv: in};
+        var S_iAno1: dimensionless {pub: in, priv: out};
+
+        I_Ano1 = g_Ano1*(d_Ano1-h_Ano1)*(Vm-E_Cl);
+    enddef;
+
+    def comp J_SERCA as
+        var Ke: micromolar {init: 0.1};
+        var J_SERCA: micromolar_per_second {pub: out};
+        var Ve: micromolar_per_second {init: 160};
+        var fc: dimensionless {init: 0.01, pub: out};
+        var fe: dimensionless {init: 1, pub: out};
+        var Ca_i: micromolar {pub: in};
+
+        J_SERCA = Ve*sqr(Ca_i)/(sqr(Ke)+sqr(Ca_i));
+    enddef;
+
+    def comp Ca_er as
+        var time: time_units_ICC {pub: in};
+        var fe: dimensionless {pub: in};
+        var volER: litre {pub: in};
+        var volCyto: litre {pub: in};
+        var Ca_er: micromolar {init: 290.0, pub: out};
+        var J_SERCA: micromolar_per_second {pub: in};
+        var J_IPR: micromolar_per_second {pub: in};
+
+        ode(Ca_er, time) = fe*(J_SERCA-J_IPR)*volCyto/volER;
+    enddef;
+
+    def comp y_bind as
+        var time: time_units_ICC {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var k1: per_micromolarsecond {init: 500, pub: out};
+        var k2: per_micromolarsecond {init: 0.25};
+        var k3: per_micromolarsecond {init: 500};
+        var k4: per_micromolarsecond {init: 0.25};
+        var k5: per_micromolarsecond {init: 25, pub: out};
+        var k_1: rate_constants_units_second {init: 65};
+        var k_2: rate_constants_units_second {init: 0.2625};
+        var k_3: rate_constants_units_second {init: 471.5};
+        var k_4: rate_constants_units_second {init: 0.03625};
+        var k_5: rate_constants_units_second {init: 2.05};
+        var IP3: micromolar {pub: in};
+        var K1: micromolar {pub: out};
+        var K2: micromolar {pub: out};
+        var K3: micromolar {pub: out};
+        var K4: micromolar {pub: out};
+        var K5: micromolar {pub: out};
+        var y: dimensionless {init: 0.4, pub: out};
+        var phi1: rate_constants_units_second;
+        var phi2: rate_constants_units_second;
+
+        K1 = k_1/k1;
+        K2 = k_2/k2;
+        K3 = k_3/k3;
+        K4 = k_4/k4;
+        K5 = k_5/k5;
+        phi1 = (k_4*K2*K1+k_2*K4*IP3)*Ca_i/(K4*K2*(K1+IP3));
+        phi2 = (k_2*IP3+k_4*K3)/(K3+IP3);
+        ode(y, time) = phi1*(1{dimensionless}-y)-phi2*y;
+    enddef;
+
+    def comp J_IPR as
+        var time: time_units_ICC {pub: in, priv: out};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var Ca_er: micromolar {pub: in};
+        var kipr: rate_constants_units_second {init: 7};
+        var Pipr: dimensionless;
+        var Jer: rate_constants_units_second {init: 0.01};
+        var IP3_base: micromolar {init: 0.5};
+        var K1: micromolar {priv: in};
+        var K5: micromolar {priv: in};
+        var y: dimensionless {pub: out, priv: in};
+        var J_SERCA: micromolar_per_second {pub: in};
+        var J_IPR: micromolar_per_second {pub: out};
+        var IP3: micromolar {priv: out};
+        var S_eIP3: dimensionless {pub: in};
+
+        IP3 = IP3_base*(1{dimensionless}+S_eIP3);
+        Pipr = pow(IP3*Ca_i*(1{dimensionless}-y)/((IP3+K1)*(Ca_i+K5)), 3{dimensionless});
+        J_IPR = (kipr*Pipr+Jer)*(Ca_er-Ca_i);
+    enddef;
+
+    def comp J_PMCA as
+        var g_PMCA: dimensionless {init: 1};
+        var Ca_i: micromolar {pub: in};
+        var J_PMCA_max: micromolar_per_second {init: 100};
+        var K_PMCA: micromolar {init: 0.1};
+        var n_PMCA: dimensionless {init: 2};
+        var J_PMCA: micromolar_per_second {pub: out};
+
+        J_PMCA = g_PMCA*J_PMCA_max*1{dimensionless}/(1{dimensionless}+pow(K_PMCA/Ca_i, n_PMCA));
+    enddef;
+
+    def comp I_BNa as
+        var g_BNa: conductance_units {init: 2};
+        var Vm: voltage_units {pub: in};
+        var E_Na: voltage_units {pub: in};
+        var I_BNa: current_units {pub: out};
+
+        I_BNa = g_BNa*(Vm-E_Na);
+    enddef;
+
+    def comp ICC_Membrane as
+        var{membrane_voltage} Vm: voltage_units {init: -66.0, pub: out, priv: out};
+        var time: time_units_ICC {pub: in, priv: out};
+        var{membrane_capacitance} Cm: capacitance_units_ICC {init: 0.025};
+        var fc: dimensionless {priv: in};
+        var f_CaT: dimensionless {priv: in};
+        var d_CaT: dimensionless {priv: in};
+        var I_CaT: current_units {priv: in};
+        var J_CaT: micromolar_per_second {priv: in};
+        var I_NSCC: current_units {priv: in};
+        var I_stim: current_units {priv: in};
+        var I_BNa: current_units {priv: in};
+        var I_BK: current_units {priv: in};
+        var d_Ano1: dimensionless {priv: in};
+        var I_Ano1: current_units {priv: in};
+        var I_SOC: current_units {priv: in};
+        var J_SOC: micromolar_per_second {priv: in};
+        var J_IPR: micromolar_per_second {priv: in};
+        var J_PMCA: micromolar_per_second {priv: in};
+        var J_SERCA: micromolar_per_second {priv: in};
+        var Ca_er: micromolar {priv: in};
+        var Ca_i: micromolar {init: 0.14, pub: out, priv: out};
+        var Iion: current_units {pub: out};
+        var S_eIP3: dimensionless {pub: in, priv: out};
+        var S_iNSCC: dimensionless {pub: in, priv: out};
+        var S_iAno1: dimensionless {pub: in, priv: out};
+
+        Iion = I_SOC+I_Ano1+I_CaT+I_BK+I_BNa+I_NSCC+I_stim;
+        ode(Vm, time) = -Iion/Cm;
+        ode(Ca_i, time) = fc*(J_IPR-J_SERCA+J_SOC+J_CaT-J_PMCA);
+    enddef;
+
+    // MAPPING 
+
+    // ICC 
+
+    def map between Parameters and Nernst for
+        vars z_ca and z_ca;
+        vars z_na and z_na;
+        vars z_k and z_k;
+        vars z_cl and z_cl;
+        vars Cl_i and Cl_i;
+        vars Cl_o and Cl_o;
+        vars K_i and K_i;
+        vars K_o and K_o;
+        vars Na_i and Na_i;
+        vars Na_o and Na_o;
+        vars Ca_o and Ca_o;
+        vars T and T;
+        vars F and F;
+        vars R and R;
+    enddef;
+
+    def map between d_CaT and I_CaT for
+        vars Vm and Vm;
+        vars d_CaT and d_CaT;
+        vars time and time;
+    enddef;
+
+    def map between f_CaT and I_CaT for
+        vars Vm and Vm;
+        vars f_CaT and f_CaT;
+        vars time and time;
+    enddef;
+
+    def map between Volume and I_CaT for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between Nernst and I_CaT for
+        vars E_Ca and E_Ca;
+    enddef;
+
+    def map between Parameters and I_CaT for
+        vars p2m and p2m;
+        vars z_ca and z_ca;
+        vars F and F;
+    enddef;
+
+    def map between Volume and I_SOC for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between Parameters and I_SOC for
+        vars p2m and p2m;
+        vars z_ca and z_ca;
+        vars F and F;
+    enddef;
+
+    def map between P_SOC and I_SOC for
+        vars P_SOC and P_SOC;
+        vars Ca_er and Ca_er;
+    enddef;
+
+    def map between Nernst and I_SOC for
+        vars E_Ca and E_Ca;
+    enddef;
+
+    def map between Nernst and I_BK for
+        vars E_K and E_K;
+    enddef;
+
+    def map between Nernst and I_BNa for
+        vars E_Na and E_Na;
+    enddef;
+
+    def map between ICC_Membrane and I_BNa for
+        vars Vm and Vm;
+        vars I_BNa and I_BNa;
+    enddef;
+
+    def map between Ca_er and J_IPR for
+        vars Ca_er and Ca_er;
+        vars J_IPR and J_IPR;
+    enddef;
+
+    def map between J_SERCA and J_IPR for
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between Volume and Ca_er for
+        vars volCyto and volCyto;
+        vars volER and volER;
+    enddef;
+
+    def map between I_SOC and Ca_er for
+        vars Ca_er and Ca_er;
+    enddef;
+
+    def map between Ca_er and J_SERCA for
+        vars fe and fe;
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between Nernst and I_NSCC for
+        vars E_NSCC and E_NSCC;
+    enddef;
+
+    def map between I_NSCC and P_NSCC for
+        vars P_NSCC and P_NSCC;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between Volume and I_Ano1 for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between I_SOC and I_Ano1 for
+        vars J_SOC and J_SOC;
+    enddef;
+
+    def map between d_Ano1 and I_Ano1 for
+        vars Vm and Vm;
+        vars d_Ano1 and d_Ano1;
+        vars h_Ano1 and h_Ano1;
+        vars time and time;
+        vars volCyto and volCyto;
+        vars J_SOC and J_SOC;
+        vars Ca_i and Ca_i;
+        vars S_iAno1 and S_iAno1;
+    enddef;
+
+    def map between Nernst and I_Ano1 for
+        vars E_Cl and E_Cl;
+    enddef;
+
+    def map between y_bind and J_IPR for
+        vars K1 and K1;
+        vars K5 and K5;
+        vars IP3 and IP3;
+        vars y and y;
+        vars Ca_i and Ca_i;
+        vars time and time;
+    enddef;
+
+    def map between I_Ano1 and ICC_Membrane for
+        vars time and time;
+        vars d_Ano1 and d_Ano1;
+        vars I_Ano1 and I_Ano1;
+        vars Vm and Vm;
+        vars Ca_i and Ca_i;
+        vars S_iAno1 and S_iAno1;
+    enddef;
+
+    def map between I_NSCC and ICC_Membrane for
+        vars Vm and Vm;
+        vars I_NSCC and I_NSCC;
+        vars Ca_i and Ca_i;
+        vars S_iNSCC and S_iNSCC;
+    enddef;
+
+    def map between Ca_er and ICC_Membrane for
+        vars Ca_er and Ca_er;
+        vars time and time;
+    enddef;
+
+    def map between J_SERCA and ICC_Membrane for
+        vars fc and fc;
+        vars Ca_i and Ca_i;
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between J_IPR and ICC_Membrane for
+        vars J_IPR and J_IPR;
+        vars Ca_i and Ca_i;
+        vars time and time;
+        vars S_eIP3 and S_eIP3;
+    enddef;
+
+    def map between I_stim and ICC_Membrane for
+        vars time and time;
+        vars I_stim and I_stim;
+    enddef;
+
+    def map between J_PMCA and ICC_Membrane for
+        vars J_PMCA and J_PMCA;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between Nernst and ICC_Membrane for
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between I_CaT and ICC_Membrane for
+        vars time and time;
+        vars d_CaT and d_CaT;
+        vars f_CaT and f_CaT;
+        vars I_CaT and I_CaT;
+        vars Vm and Vm;
+        vars J_CaT and J_CaT;
+    enddef;
+
+    def map between I_SOC and ICC_Membrane for
+        vars I_SOC and I_SOC;
+        vars Vm and Vm;
+        vars J_SOC and J_SOC;
+    enddef;
+
+    def map between I_BK and ICC_Membrane for
+        vars I_BK and I_BK;
+        vars Vm and Vm;
+    enddef;
+
+    def map between Time and ICC_Membrane for
+        vars time and time;
+    enddef;
+
+    // SMC mapping 
+
+    def map between m_Na_SM and I_Na_SM for
+        vars Vm_SM and Vm_SM;
+        vars m_Na_SM and m_Na_SM;
+        vars time and time;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between h_Na_SM and I_Na_SM for
+        vars Vm_SM and Vm_SM;
+        vars h_Na_SM and h_Na_SM;
+        vars time and time;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between I_Na_SM and SM_Membrane for
+        vars Na_i and Na_i;
+        vars Vm_SM and Vm_SM;
+        vars I_Na_SM and I_Na_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Na_o and Na_o;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between d_Ltype_SM and I_Ltype_SM for
+        vars Vm_SM and Vm_SM;
+        vars d_Ltype_SM and d_Ltype_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_Ltype_SM and I_Ltype_SM for
+        vars Vm_SM and Vm_SM;
+        vars f_Ltype_SM and f_Ltype_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_ca_Ltype_SM and I_Ltype_SM for
+        vars f_ca_Ltype_SM and f_ca_Ltype_SM;
+        vars Ca_i and Ca_i;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between I_Ltype_SM and SM_Membrane for
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_Ltype_SM and I_Ltype_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Ca_o and Ca_o;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between d_LVA_SM and I_LVA_SM for
+        vars Vm_SM and Vm_SM;
+        vars d_LVA_SM and d_LVA_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_LVA_SM and I_LVA_SM for
+        vars Vm_SM and Vm_SM;
+        vars f_LVA_SM and f_LVA_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between I_LVA_SM and SM_Membrane for
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_LVA_SM and I_LVA_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Ca_o and Ca_o;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between xr1_SM and I_kr_SM for
+        vars Vm_SM and Vm_SM;
+        vars xr1_SM and xr1_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xr2_SM and I_kr_SM for
+        vars Vm_SM and Vm_SM;
+        vars xr2_SM and xr2_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between I_kr_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_kr_SM and I_kr_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xa1_SM and I_ka_SM for
+        vars Vm_SM and Vm_SM;
+        vars xa1_SM and xa1_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xa2_SM and I_ka_SM for
+        vars Vm_SM and Vm_SM;
+        vars xa2_SM and xa2_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between I_ka_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_ka_SM and I_ka_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between d_BK_SM and I_BK_SM for
+        vars Vm_SM and Vm_SM;
+        vars Ca_i and Ca_i;
+        vars d_BK_SM and d_BK_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_BK_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_BK_SM and I_BK_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_BK and T_correction_BK;
+    enddef;
+
+    def map between x_SK_SM and I_SK_SM for
+        vars Vm_SM and Vm_SM;
+        vars Ca_i and Ca_i;
+        vars x_SK_SM and x_SK_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_SK_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_SK_SM and I_SK_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_BK and T_correction_BK;
+        vars S_iSK and S_iSK;
+    enddef;
+
+    def map between I_bk_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_bk_SM and I_bk_SM;
+        vars RToF and RToF;
+        vars K_o and K_o;
+    enddef;
+
+    def map between m_NSCC_SM and I_NSCC_SM for
+        vars Vm_SM and Vm_SM;
+        vars m_NSCC_SM and m_NSCC_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_NSCC_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Na_i and Na_i;
+        vars Vm_SM and Vm_SM;
+        vars I_NSCC_SM and I_NSCC_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars Na_o and Na_o;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between J_CaSR_SM and SM_Membrane for
+        vars J_CaSR_SM and J_CaSR_SM;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between SM_Membrane and Environment for
+        vars Ca_o and Ca_o;
+        vars Na_o and Na_o;
+        vars K_o and K_o;
+        vars Cl_o and Cl_o;
+        vars RToF and RToF;
+        vars FoRT and FoRT;
+        vars F and F;
+        vars T_correction_Ca and T_correction_Ca;
+        vars T_correction_Na and T_correction_Na;
+        vars T_correction_K and T_correction_K;
+        vars T_correction_BK and T_correction_BK;
+    enddef;
+
+    def map between Time and SM_Membrane for
+        vars time and time;
+    enddef;
+
+    def map between I_couple and SM_Membrane for
+        vars V_SMC and Vm_SM;
+        vars I_couple and I_couple;
+    enddef;
+
+    def map between I_couple and ICC_Membrane for
+        vars V_ICC and Vm;
+    enddef;
+
+    def map between neural_input and SM_Membrane for
+        vars S_iSK and S_iSK;
+    enddef;
+
+    def map between neural_input and ICC_Membrane for
+        vars S_eIP3 and S_eIP3;
+        vars S_iNSCC and S_iNSCC;
+        vars S_iAno1 and S_iAno1;
+    enddef;
+
+    def map between neural_input and active_tension for
+        vars S_iCa50 and S_iCa50;
+    enddef;
+
+    def map between SM_Membrane and active_tension for
+        vars Ca_i and Ca_i_SM;
+    enddef;
+
+    // GROUPING 
+
+    def group as encapsulation for
+        comp SM_Membrane incl
+            comp I_Na_SM incl
+                comp m_Na_SM;
+                comp h_Na_SM;
+            endcomp;
+
+            comp I_Ltype_SM incl
+                comp d_Ltype_SM;
+                comp f_Ltype_SM;
+                comp f_ca_Ltype_SM;
+            endcomp;
+
+            comp I_LVA_SM incl
+                comp d_LVA_SM;
+                comp f_LVA_SM;
+            endcomp;
+
+            comp I_BK_SM incl
+                comp d_BK_SM;
+            endcomp;
+
+            comp I_kr_SM incl
+                comp xr1_SM;
+                comp xr2_SM;
+            endcomp;
+
+            comp I_ka_SM incl
+                comp xa1_SM;
+                comp xa2_SM;
+            endcomp;
+
+            comp I_SK_SM incl
+                comp x_SK_SM;
+            endcomp;
+
+            comp I_bk_SM;
+
+            comp I_NSCC_SM incl
+                comp m_NSCC_SM;
+            endcomp;
+
+            comp J_CaSR_SM;
+        endcomp;
+
+        comp ICC_Membrane incl
+            comp I_CaT incl
+                comp d_CaT;
+                comp f_CaT;
+            endcomp;
+
+            comp Parameters;
+            comp Volume;
+            comp Nernst;
+            comp I_BK;
+            comp I_BNa;
+            comp J_SERCA;
+            comp J_PMCA;
+            comp I_stim;
+
+            comp J_IPR incl
+                comp y_bind;
+            endcomp;
+
+            comp Ca_er;
+
+            comp I_SOC incl
+                comp P_SOC;
+            endcomp;
+
+            comp I_NSCC incl
+                comp P_NSCC;
+            endcomp;
+
+            comp I_Ano1 incl
+                comp d_Ano1;
+            endcomp;
+        endcomp;
+    enddef;
+enddef;
diff --git a/ICC_SMC_Neuro_Explanation.txt b/ICC_SMC_Neuro_Explanation.txt
new file mode 100644
index 0000000..9f86415
--- /dev/null
+++ b/ICC_SMC_Neuro_Explanation.txt
@@ -0,0 +1,272 @@
+Constants
+1	T in component Environment {Temperature_units}
+2	T_exp in component Environment {Temperature_units}
+3	F in component Environment {F_units}
+4	R in component Environment {R_units}
+5	Q10Ca in component Environment {dimensionless}
+6	Q10K in component Environment {dimensionless}
+7	Q10Na in component Environment {dimensionless}
+8	Ca_o in component Environment {millimolar}
+9	Na_o in component Environment {millimolar}
+10	K_o in component Environment {millimolar}
+11	Cl_o in component Environment {millimolar}
+12	Cm_SM in component SM_Membrane {capacitance_units}
+13	Vol_SM in component SM_Membrane {volume_units}
+14	Na_i in component SM_Membrane {millimolar}
+15	K_i in component SM_Membrane {millimolar}
+16	g_couple in component I_couple {conductance_units}
+17	G_max_Ltype in component I_Ltype_SM {conductance_units}
+18	J_max_CaSR in component J_CaSR_SM {millimolar_per_millisecond}
+19	G_max_LVA in component I_LVA_SM {conductance_units}
+20	G_max_BK in component I_BK_SM {conductance_units}
+21	Ca50_0 in component active_tension {micromolar}
+22	h in component active_tension {dimensionless}
+23	T_max in component active_tension {kilopascals}
+24	f_e in component neural_input {dimensionless}
+25	f_i in component neural_input {dimensionless}
+26	f_max in component neural_input {Hertz}
+27	k_iAno1 in component neural_input {dimensionless}
+28	k_iNSCC in component neural_input {dimensionless}
+29	k_iCa50 in component neural_input {dimensionless}
+30	k_iSK in component neural_input {dimensionless}
+31	k_eIP3 in component neural_input {dimensionless}
+32	p_iICC in component neural_input {dimensionless}
+33	p_iSMC in component neural_input {dimensionless}
+34	p_e in component neural_input {dimensionless}
+35	n in component x_SK_SM {dimensionless}
+36	EC50 in component x_SK_SM {micromolar}
+37	G_max_SK in component I_SK_SM {conductance_units}
+38	G_max_bk in component I_bk_SM {conductance_units}
+39	G_max_kr_SM in component I_kr_SM {conductance_units}
+40	G_max_Na_SM in component I_Na_SM {conductance_units}
+41	G_max_ka_SM in component I_ka_SM {conductance_units}
+42	E_NSCC in component I_NSCC_SM {voltage_units}
+43	G_max_NSCC_SM in component I_NSCC_SM {conductance_units}
+44	Ach in component I_NSCC_SM {millimolar}
+45	p2m in component Parameters {dimensionless}
+46	umc2L in component Parameters {dimensionless}
+47	T in component Parameters {Temperature_units}
+48	F in component Parameters {F_units_ICC}
+49	R in component Parameters {R_units_ICC}
+50	z_ca in component Parameters {dimensionless}
+51	z_na in component Parameters {dimensionless}
+52	z_k in component Parameters {dimensionless}
+53	z_cl in component Parameters {dimensionless}
+54	Ca_o in component Parameters {micromolar}
+55	Cl_i in component Parameters {micromolar}
+56	Cl_o in component Parameters {micromolar}
+57	K_i in component Parameters {micromolar}
+58	K_o in component Parameters {micromolar}
+59	Na_i in component Parameters {micromolar}
+60	Na_o in component Parameters {micromolar}
+61	cellVol in component Volume {litre}
+62	cellPropER in component Volume {dimensionless}
+63	cellPropCyto in component Volume {dimensionless}
+64	E_NSCC in component Nernst {voltage_units}
+65	E_NSV in component Nernst {voltage_units}
+66	E_SOC in component Nernst {voltage_units}
+67	d_CaT_Vh in component d_CaT {voltage_units}
+68	d_CaT_S in component d_CaT {voltage_units}
+69	d_CaT_tau in component d_CaT {time_units_ICC}
+70	f_CaT_Vh in component f_CaT {voltage_units}
+71	f_CaT_S in component f_CaT {voltage_units}
+72	f_CaT_tau in component f_CaT {time_units_ICC}
+73	g_CaT in component I_CaT {conductance_units}
+74	SOC_h in component P_SOC {micromolar}
+75	SOC_n in component P_SOC {dimensionless}
+76	g_SOC in component I_SOC {conductance_units}
+77	SOCPropCa in component I_SOC {dimensionless}
+78	g_BK in component I_BK {conductance_units}
+79	stim_amp in component I_stim {current_units}
+80	stim_start in component I_stim {time_units_ICC}
+81	stim_PW in component I_stim {time_units_ICC}
+82	n_NSCC in component P_NSCC {dimensionless}
+83	Ca_NSCC in component P_NSCC {micromolar}
+84	g_NSCC in component I_NSCC {conductance_units}
+85	Dc in component d_Ano1 {micrometer2_per_time}
+86	Dm in component d_Ano1 {micrometer2_per_time}
+87	Bm in component d_Ano1 {micromolar}
+88	Km in component d_Ano1 {micromolar}
+89	kc in component d_Ano1 {Inverse_Voltage_ICC}
+90	nSOC in component d_Ano1 {dimensionless}
+91	d_Ano1_tscale in component d_Ano1 {dimensionless}
+92	colocalRadius in component d_Ano1 {micrometer}
+93	Ano1_n in component d_Ano1 {dimensionless}
+94	Ano1_Vh in component d_Ano1 {voltage_units}
+95	Ano1_s in component d_Ano1 {Inverse_Voltage_ICC}
+96	g_Ano1 in component I_Ano1 {conductance_units}
+97	Ke in component J_SERCA {micromolar}
+98	Ve in component J_SERCA {micromolar_per_second}
+99	fc in component J_SERCA {dimensionless}
+100	fe in component J_SERCA {dimensionless}
+101	k1 in component y_bind {per_micromolarsecond}
+102	k2 in component y_bind {per_micromolarsecond}
+103	k3 in component y_bind {per_micromolarsecond}
+104	k4 in component y_bind {per_micromolarsecond}
+105	k5 in component y_bind {per_micromolarsecond}
+106	k_1 in component y_bind {rate_constants_units_second}
+107	k_2 in component y_bind {rate_constants_units_second}
+108	k_3 in component y_bind {rate_constants_units_second}
+109	k_4 in component y_bind {rate_constants_units_second}
+110	k_5 in component y_bind {rate_constants_units_second}
+111	kipr in component J_IPR {rate_constants_units_second}
+112	Jer in component J_IPR {rate_constants_units_second}
+113	IP3_base in component J_IPR {micromolar}
+114	g_PMCA in component J_PMCA {dimensionless}
+115	J_PMCA_max in component J_PMCA {micromolar_per_second}
+116	K_PMCA in component J_PMCA {micromolar}
+117	n_PMCA in component J_PMCA {dimensionless}
+118	g_BNa in component I_BNa {conductance_units}
+119	Cm in component ICC_Membrane {capacitance_units_ICC}
+120	T_correction_Na in component Environment {dimensionless}
+121	T_correction_K in component Environment {dimensionless}
+122	T_correction_Ca in component Environment {dimensionless}
+123	T_correction_BK in component Environment {conductance_units}
+124	FoRT in component Environment {Inverse_Voltage_units}
+125	RToF in component Environment {voltage_units}
+126	w_iSMC in component neural_input {dimensionless}
+127	w_iICC in component neural_input {dimensionless}
+128	w_e in component neural_input {dimensionless}
+129	rach_NSCC_SM in component I_NSCC_SM {dimensionless}
+130	E_Cl in component Nernst {voltage_units}
+131	E_Na in component Nernst {voltage_units}
+132	E_K in component Nernst {voltage_units}
+133	volER in component Volume {litre}
+134	rad in component d_Ano1 {micrometer}
+135	K1 in component y_bind {micromolar}
+136	K2 in component y_bind {micromolar}
+137	K4 in component y_bind {micromolar}
+138	K5 in component y_bind {micromolar}
+139	S_iSK in component neural_input {dimensionless}
+140	tau_d_Ltype_SM in component d_Ltype_SM {time_units}
+141	tau_f_Ltype_SM in component f_Ltype_SM {time_units}
+142	tau_f_ca_Ltype_SM in component f_ca_Ltype_SM {time_units}
+143	tau_d_LVA_SM in component d_LVA_SM {time_units}
+144	E_K in component I_BK_SM {voltage_units}
+145	S_iCa50 in component neural_input {dimensionless}
+146	S_iAno1 in component neural_input {dimensionless}
+147	S_iNSCC in component neural_input {dimensionless}
+148	E_K in component I_SK_SM {voltage_units}
+149	E_K in component I_bk_SM {voltage_units}
+150	tau_xr1_SM in component xr1_SM {time_units}
+151	E_K in component I_kr_SM {voltage_units}
+152	E_Na in component I_Na_SM {voltage_units}
+153	tau_xa2_SM in component xa2_SM {time_units}
+154	E_K in component I_ka_SM {voltage_units}
+155	volCyto in component Volume {litre}
+156	S_eIP3 in component neural_input {dimensionless}
+157	Ca50 in component active_tension {micromolar}
+158	K3 in component y_bind {micromolar}
+159	IP3 in component J_IPR {micromolar}
+160	phi2 in component y_bind {rate_constants_units_second}
+
+Algebraic variables
+1	I_couple in component I_couple {current_units}
+2	d_inf_Ltype_SM in component d_Ltype_SM {dimensionless}
+3	f_inf_Ltype_SM in component f_Ltype_SM {dimensionless}
+4	f_ca_inf_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+5	d_inf_LVA_SM in component d_LVA_SM {dimensionless}
+6	f_inf_LVA_SM in component f_LVA_SM {dimensionless}
+7	T in component active_tension {kilopascals}
+8	x_SK_inf_SM in component x_SK_SM {dimensionless}
+9	xr1_inf_SM in component xr1_SM {dimensionless}
+10	xr2_inf_SM in component xr2_SM {dimensionless}
+11	m_inf_Na in component m_Na_SM {dimensionless}
+12	h_inf_Na in component h_Na_SM {dimensionless}
+13	xa1_inf_SM in component xa1_SM {dimensionless}
+14	xa2_inf_SM in component xa2_SM {dimensionless}
+15	m_inf_NSCC_SM in component m_NSCC_SM {dimensionless}
+16	E_Ca in component Nernst {voltage_units}
+17	d_CaT_inf in component d_CaT {dimensionless}
+18	f_CaT_inf in component f_CaT {dimensionless}
+19	phi1 in component y_bind {rate_constants_units_second}
+20	E_Ca in component I_Ltype_SM {voltage_units}
+21	tau_f_LVA_SM in component f_LVA_SM {time_units}
+22	tau_x_SK_SM in component x_SK_SM {time_units}
+23	tau_xr2_SM in component xr2_SM {time_units}
+24	tau_m_Na in component m_Na_SM {time_units}
+25	tau_h_Na in component h_Na_SM {time_units}
+26	tau_xa1_SM in component xa1_SM {time_units}
+27	tau_m_NSCC_SM in component m_NSCC_SM {time_units}
+28	I_CaT in component I_CaT {current_units}
+29	I_Ltype_SM in component I_Ltype_SM {current_units}
+30	J_CaT in component I_CaT {micromolar_per_second}
+31	J_CaSR_SM in component J_CaSR_SM {millimolar_per_millisecond}
+32	P_SOC in component P_SOC {dimensionless}
+33	E_Ca in component I_LVA_SM {voltage_units}
+34	I_SOC in component I_SOC {current_units}
+35	I_LVA_SM in component I_LVA_SM {current_units}
+36	J_SOC in component I_SOC {micromolar_per_second}
+37	d_BK_SM in component d_BK_SM {dimensionless}
+38	I_BK in component I_BK {current_units}
+39	J_SERCA in component J_SERCA {micromolar_per_second}
+40	I_BK_SM in component I_BK_SM {current_units}
+41	I_stim in component I_stim {current_units}
+42	Pipr in component J_IPR {dimensionless}
+43	I_SK_SM in component I_SK_SM {current_units}
+44	P_NSCC in component P_NSCC {dimensionless}
+45	J_IPR in component J_IPR {micromolar_per_second}
+46	I_bk_SM in component I_bk_SM {current_units}
+47	I_NSCC in component I_NSCC {current_units}
+48	J_PMCA in component J_PMCA {micromolar_per_second}
+49	I_kr_SM in component I_kr_SM {current_units}
+50	mouthCa in component d_Ano1 {micromolar_per_second}
+51	I_Na_SM in component I_Na_SM {current_units}
+52	localCa in component d_Ano1 {micromolar}
+53	I_ka_SM in component I_ka_SM {current_units}
+54	d_Ano1_tau in component d_Ano1 {time_units_ICC}
+55	f_ca_NSCC_SM in component I_NSCC_SM {dimensionless}
+56	d_Ano1_inf in component d_Ano1 {dimensionless}
+57	I_NSCC_SM in component I_NSCC_SM {current_units}
+58	h_Ano1 in component d_Ano1 {dimensionless}
+59	I_Ano1 in component I_Ano1 {current_units}
+60	I_BNa in component I_BNa {current_units}
+61	Iion in component ICC_Membrane {current_units}
+
+State variables
+1	Vm_SM in component SM_Membrane {voltage_units}
+2	Ca_i in component SM_Membrane {millimolar}
+3	Vm in component ICC_Membrane {voltage_units}
+4	d_Ltype_SM in component d_Ltype_SM {dimensionless}
+5	f_Ltype_SM in component f_Ltype_SM {dimensionless}
+6	f_ca_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+7	d_LVA_SM in component d_LVA_SM {dimensionless}
+8	f_LVA_SM in component f_LVA_SM {dimensionless}
+9	x_SK_SM in component x_SK_SM {dimensionless}
+10	xr1_SM in component xr1_SM {dimensionless}
+11	xr2_SM in component xr2_SM {dimensionless}
+12	m_Na_SM in component m_Na_SM {dimensionless}
+13	h_Na_SM in component h_Na_SM {dimensionless}
+14	xa1_SM in component xa1_SM {dimensionless}
+15	xa2_SM in component xa2_SM {dimensionless}
+16	m_NSCC_SM in component m_NSCC_SM {dimensionless}
+17	Ca_i in component ICC_Membrane {micromolar}
+18	d_CaT in component d_CaT {dimensionless}
+19	f_CaT in component f_CaT {dimensionless}
+20	Ca_er in component Ca_er {micromolar}
+21	d_Ano1 in component d_Ano1 {dimensionless}
+22	y in component y_bind {dimensionless}
+
+Rate variables
+1	d/dt Vm_SM in component SM_Membrane {voltage_units}
+2	d/dt Ca_i in component SM_Membrane {millimolar}
+3	d/dt Vm in component ICC_Membrane {voltage_units}
+4	d/dt d_Ltype_SM in component d_Ltype_SM {dimensionless}
+5	d/dt f_Ltype_SM in component f_Ltype_SM {dimensionless}
+6	d/dt f_ca_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+7	d/dt d_LVA_SM in component d_LVA_SM {dimensionless}
+8	d/dt f_LVA_SM in component f_LVA_SM {dimensionless}
+9	d/dt x_SK_SM in component x_SK_SM {dimensionless}
+10	d/dt xr1_SM in component xr1_SM {dimensionless}
+11	d/dt xr2_SM in component xr2_SM {dimensionless}
+12	d/dt m_Na_SM in component m_Na_SM {dimensionless}
+13	d/dt h_Na_SM in component h_Na_SM {dimensionless}
+14	d/dt xa1_SM in component xa1_SM {dimensionless}
+15	d/dt xa2_SM in component xa2_SM {dimensionless}
+16	d/dt m_NSCC_SM in component m_NSCC_SM {dimensionless}
+17	d/dt Ca_i in component ICC_Membrane {micromolar}
+18	d/dt d_CaT in component d_CaT {dimensionless}
+19	d/dt f_CaT in component f_CaT {dimensionless}
+20	d/dt Ca_er in component Ca_er {micromolar}
+21	d/dt d_Ano1 in component d_Ano1 {dimensionless}
+22	d/dt y in component y_bind {dimensionless}
\ No newline at end of file
diff --git a/ICC_SMC_Neuro_Tvar.cellml b/ICC_SMC_Neuro_Tvar.cellml
index fe38e78..07c2320 100644
--- a/ICC_SMC_Neuro_Tvar.cellml
+++ b/ICC_SMC_Neuro_Tvar.cellml
@@ -28,6 +28,9 @@
         <unit units="litre"/>
         <unit exponent="-1" prefix="milli" units="mole"/>
     </units>
+    <units name="per_litre">
+        <unit exponent="-1" units="litre"/>
+    </units>
     <units name="millimolar_per_millisecond">
         <unit prefix="milli" units="mole"/>
         <unit exponent="-1" units="litre"/>
@@ -100,17 +103,26 @@
     <units name="micrometer">
         <unit prefix="micro" units="meter"/>
     </units>
+    <units name="per_micrometer3">
+        <unit exponent="-3" prefix="micro" units="metre"/>
+    </units>
     <units name="micrometer2_per_time">
         <unit exponent="2" prefix="micro" units="meter"/>
         <unit exponent="-1" units="second"/>
     </units>
+    <units name="per_time2">
+        <unit exponent="-2" units="time_units_ICC"/>
+    </units>
     <units name="kilopascals">
         <unit prefix="kilo" units="pascal"/>
     </units>
+    <units name="Hertz">
+        <unit exponent="-1" units="time_units_ICC"/>
+    </units>
     <component name="Time">
         <variable name="time" private_interface="out" public_interface="out" units="time_units"/>
     </component>
-    <!-- SMC components -->
+    <!-- SMC components based on Corrias and Buist 2007 doi:10.1007/s10439-007-9324-8-->
     <component name="Environment">
         <variable initial_value="310" name="T" private_interface="out" units="Temperature_units"/>
         <variable initial_value="297" name="T_exp" private_interface="out" units="Temperature_units"/>
@@ -922,6 +934,7 @@
             </apply>
         </math>
     </component>
+    <!-- active tension parameters based on Arner 1982 doi:10.1007/BF00580790-->
     <component name="active_tension">
         <variable cmeta:id="tension" name="T" units="kilopascals"/>
         <variable initial_value="0.5623413" name="Ca50_0" units="micromolar"/>
@@ -977,13 +990,14 @@
     </component>
     <component name="neural_input">
         <variable name="time" public_interface="in" units="time_units_ICC"/>
-        <variable cmeta:id="excitatory_neural" initial_value="0" name="x_e" units="dimensionless"/>
-        <variable cmeta:id="inhibitory_neural" initial_value="0" name="x_i" units="dimensionless"/>
+        <variable cmeta:id="excitatory_neural" initial_value="0" name="f_e" units="dimensionless"/>
+        <variable cmeta:id="inhibitory_neural" initial_value="0" name="f_i" units="dimensionless"/>
         <variable cmeta:id="neural_stim_start" initial_value="120" name="ns_start" units="time_units_ICC"/>
         <variable cmeta:id="neural_stim_end" initial_value="180" name="ns_end" units="time_units_ICC"/>
         <variable name="w_iICC" units="dimensionless"/>
         <variable name="w_iSMC" units="dimensionless"/>
         <variable name="w_e" units="dimensionless"/>
+        <variable initial_value="10" name="f_max" units="Hertz"/>
         <variable initial_value="0.326" name="k_iAno1" units="dimensionless"/>
         <variable initial_value="0.775" name="k_iNSCC" units="dimensionless"/>
         <variable initial_value="0.882" name="k_iCa50" units="dimensionless"/>
@@ -1011,12 +1025,16 @@
                                 <apply>
                                     <exp/>
                                     <apply>
-                                        <times/>
+                                        <divide/>
                                         <apply>
-                                            <minus/>
-                                            <ci>p_iICC</ci>
+                                            <times/>
+                                            <apply>
+                                                <minus/>
+                                                <ci>p_iICC</ci>
+                                            </apply>
+                                            <ci>f_i</ci>
                                         </apply>
-                                        <ci>x_i</ci>
+                                        <ci>f_max</ci>
                                     </apply>
                                 </apply>
                             </apply>
@@ -1064,12 +1082,16 @@
                                 <apply>
                                     <exp/>
                                     <apply>
-                                        <times/>
+                                        <divide/>
                                         <apply>
-                                            <minus/>
-                                            <ci>p_iSMC</ci>
+                                            <times/>
+                                            <apply>
+                                                <minus/>
+                                                <ci>p_iSMC</ci>
+                                            </apply>
+                                            <ci>f_i</ci>
                                         </apply>
-                                        <ci>x_i</ci>
+                                        <ci>f_max</ci>
                                     </apply>
                                 </apply>
                             </apply>
@@ -1117,12 +1139,16 @@
                                 <apply>
                                     <exp/>
                                     <apply>
-                                        <times/>
+                                        <divide/>
                                         <apply>
-                                            <minus/>
-                                            <ci>p_e</ci>
+                                            <times/>
+                                            <apply>
+                                                <minus/>
+                                                <ci>p_e</ci>
+                                            </apply>
+                                            <ci>f_e</ci>
                                         </apply>
-                                        <ci>x_e</ci>
+                                        <ci>f_max</ci>
                                     </apply>
                                 </apply>
                             </apply>
@@ -1204,6 +1230,7 @@
             </apply>
         </math>
     </component>
+    <!-- SK channel based on Kennedy, Bers, Chiamvimonvat, and Sato 2017 doi:10.1113/JP273626-->
     <component name="x_SK_SM">
         <variable name="Vm_SM" public_interface="in" units="voltage_units"/>
         <variable name="Ca_i" public_interface="in" units="micromolar"/>
@@ -1248,12 +1275,12 @@
                 <ci>tau_x_SK_SM</ci>
                 <apply>
                     <divide/>
-                    <cn cellml:units="dimensionless">1</cn>
+                    <cn cellml:units="time_units">1</cn>
                     <apply>
                         <plus/>
                         <apply>
                             <times/>
-                            <cn cellml:units="dimensionless">0.047</cn>
+                            <cn cellml:units="per_micromolar">0.047</cn>
                             <ci>Ca_i</ci>
                         </apply>
                         <apply>
@@ -1285,6 +1312,7 @@
             </apply>
         </math>
     </component>
+    <!-- SK-->
     <component name="I_SK_SM">
         <variable name="I_SK_SM" public_interface="out" units="current_units"/>
         <variable name="Ca_i" private_interface="out" public_interface="in" units="millimolar"/>
@@ -2137,7 +2165,7 @@
             </apply>
         </math>
     </component>
-    <!-- ICC components -->
+    <!-- ICC components based on Lees-Green, Gibbons, Farrugia, Sneyd, and Cheng 2014 doi:10.1152/ajpgi.00449.2013-->
     <component name="Parameters">
         <variable initial_value="1e-09" name="p2m" public_interface="out" units="dimensionless"/>
         <variable initial_value="1e+15" name="umc2L" public_interface="out" units="dimensionless"/>
@@ -2586,8 +2614,8 @@
     <component name="I_stim">
         <variable cmeta:id="membrane_stimulus_current" name="I_stim" public_interface="out" units="current_units"/>
         <variable cmeta:id="pacing_amplitude" initial_value="0" name="stim_amp" units="current_units"/>
-        <variable cmeta:id="pacing_start_time" initial_value="18" name="stim_start" units="time_units"/>
-        <variable cmeta:id="pacing_pulse_width" initial_value="0.5" name="stim_PW" units="time_units"/>
+        <variable cmeta:id="pacing_start_time" initial_value="18" name="stim_start" units="time_units_ICC"/>
+        <variable cmeta:id="pacing_pulse_width" initial_value="0.5" name="stim_PW" units="time_units_ICC"/>
         <variable name="time" private_interface="out" public_interface="in" units="time_units_ICC"/>
         <math xmlns="http://www.w3.org/1998/Math/MathML">
             <apply>
@@ -2656,7 +2684,7 @@
         </math>
     </component>
     <component name="I_NSCC">
-        <variable initial_value="30" name="g_NSCC" units="rate_constants_units_second"/>
+        <variable initial_value="30" name="g_NSCC" units="conductance_units"/>
         <variable name="Ca_i" private_interface="out" public_interface="in" units="micromolar"/>
         <variable name="I_NSCC" public_interface="out" units="current_units"/>
         <variable name="P_NSCC" private_interface="in" units="dimensionless"/>
@@ -2707,7 +2735,7 @@
         <variable initial_value="0.01" name="d_Ano1" public_interface="out" units="dimensionless"/>
         <variable initial_value="2" name="Ano1_n" units="dimensionless"/>
         <variable initial_value="-100" name="Ano1_Vh" units="voltage_units"/>
-        <variable initial_value="0.0156" name="Ano1_s" units="voltage_units"/>
+        <variable initial_value="0.0156" name="Ano1_s" units="Inverse_Voltage_ICC"/>
         <variable name="S_iAno1" public_interface="in" units="dimensionless"/>
         <variable name="h_Ano1" public_interface="out" units="dimensionless"/>
         <math xmlns="http://www.w3.org/1998/Math/MathML">
@@ -2723,7 +2751,7 @@
                     <divide/>
                     <apply>
                         <times/>
-                        <cn cellml:units="dimensionless" type="e-notation">1<sep/>15</cn>
+                        <cn cellml:units="per_litre" type="e-notation">1<sep/>15</cn>
                         <ci>J_SOC</ci>
                         <ci>volCyto</ci>
                     </apply>
@@ -2754,7 +2782,7 @@
                                     <ci>mouthCa</ci>
                                     <apply>
                                         <times/>
-                                        <cn cellml:units="dimensionless">2</cn>
+                                        <cn cellml:units="per_micrometer3">2</cn>
                                         <pi/>
                                         <ci>rad</ci>
                                     </apply>
@@ -2800,7 +2828,7 @@
                                                 <ci>mouthCa</ci>
                                                 <apply>
                                                     <times/>
-                                                    <cn cellml:units="dimensionless">2</cn>
+                                                    <cn cellml:units="per_micrometer3">2</cn>
                                                     <pi/>
                                                     <ci>rad</ci>
                                                 </apply>
@@ -2878,7 +2906,7 @@
                                     <times/>
                                     <apply>
                                         <minus/>
-                                        <cn cellml:units="time_units_ICC">0.05374</cn>
+                                        <cn cellml:units="per_micromolar">0.05374</cn>
                                     </apply>
                                     <ci>localCa</ci>
                                 </apply>
@@ -2890,7 +2918,7 @@
                                     <ci>Vm</ci>
                                     <apply>
                                         <times/>
-                                        <cn cellml:units="Inverse_Voltage_ICC">70.3</cn>
+                                        <cn cellml:units="voltage_units">70.3</cn>
                                         <apply>
                                             <exp/>
                                             <apply>
@@ -2973,11 +3001,11 @@
                         <times/>
                         <ci>d_Ano1</ci>
                         <ci>S_iAno1</ci>
-                        <cn cellml:units="dimensionless">1</cn>
+                        <cn cellml:units="per_time2">1</cn>
                     </apply>
                     <apply>
                         <plus/>
-                        <cn cellml:units="dimensionless">1</cn>
+                        <cn cellml:units="per_time2">1</cn>
                         <apply>
                             <power/>
                             <apply>
@@ -3425,7 +3453,7 @@
     </component>
     <component name="ICC_Membrane">
         <variable cmeta:id="membrane_voltage" initial_value="-66.0" name="Vm" private_interface="out" public_interface="out" units="voltage_units"/>
-        <variable name="time" private_interface="out" public_interface="in" units="second"/>
+        <variable name="time" private_interface="out" public_interface="in" units="time_units_ICC"/>
         <variable cmeta:id="membrane_capacitance" initial_value="0.025" name="Cm" units="capacitance_units_ICC"/>
         <variable name="fc" private_interface="in" units="dimensionless"/>
         <variable name="f_CaT" private_interface="in" units="dimensionless"/>
diff --git a/ICC_SMC_Neuro_Tvar.opencor b/ICC_SMC_Neuro_Tvar.opencor
new file mode 100644
index 0000000..14c3fba
--- /dev/null
+++ b/ICC_SMC_Neuro_Tvar.opencor
@@ -0,0 +1,1545 @@
+def model{ICC_SMC_Neuro} ICC_SMC_Neuro as
+    def unit volume_units as
+        unit meter {pref: micro, expo: 3};
+    enddef;
+
+    def unit Inverse_Voltage_units as
+        unit voltage_units {expo: -1};
+    enddef;
+
+    def unit time_units as
+        unit second {pref: milli};
+    enddef;
+
+    def unit rate_constants_units as
+        unit time_units {expo: -1};
+    enddef;
+
+    def unit capacitance_units as
+        unit farad {pref: pico};
+    enddef;
+
+    def unit F_units as
+        unit mole {expo: -1};
+        unit coulomb;
+    enddef;
+
+    def unit R_units as
+        unit joule {pref: milli};
+        unit mole {expo: -1};
+        unit kelvin {expo: -1};
+    enddef;
+
+    def unit per_millimolar as
+        unit litre;
+        unit mole {pref: milli, expo: -1};
+    enddef;
+
+    def unit per_litre as
+        unit litre {expo: -1};
+    enddef;
+
+    def unit millimolar_per_millisecond as
+        unit mole {pref: milli};
+        unit litre {expo: -1};
+        unit second {pref: milli, expo: -1};
+    enddef;
+
+    def unit mole_to_millimole as
+        unit mole;
+        unit mole {pref: milli, expo: -1};
+    enddef;
+
+    def unit conductance_units as
+        unit siemens {pref: nano};
+    enddef;
+
+    def unit voltage_units as
+        unit volt {pref: milli};
+    enddef;
+
+    def unit Inverse_Voltage_ICC as
+        unit voltage_units {expo: -1};
+    enddef;
+
+    def unit time_units_ICC as
+        unit second;
+    enddef;
+
+    def unit current_units as
+        unit voltage_units;
+        unit conductance_units;
+    enddef;
+
+    def unit rate_constants_units_second as
+        unit time_units_ICC {expo: -1};
+    enddef;
+
+    def unit capacitance_units_ICC as
+        unit farad {pref: nano};
+    enddef;
+
+    def unit Temperature_units as
+        unit kelvin;
+    enddef;
+
+    def unit Inverse_Temperature_units_times_conductance as
+        unit Temperature_units {expo: -1};
+        unit conductance_units;
+    enddef;
+
+    def unit F_units_ICC as
+        unit mole {pref: nano, expo: -1};
+        unit coulomb {pref: micro};
+    enddef;
+
+    def unit R_units_ICC as
+        unit joule {pref: nano};
+        unit mole {pref: nano, expo: -1};
+        unit kelvin {expo: -1};
+    enddef;
+
+    def unit millimolar as
+        unit mole {pref: milli};
+        unit litre {expo: -1};
+    enddef;
+
+    def unit micromolar as
+        unit mole {pref: micro};
+        unit litre {expo: -1};
+    enddef;
+
+    def unit per_micromolar as
+        unit litre;
+        unit mole {pref: micro, expo: -1};
+    enddef;
+
+    def unit per_micromolarsecond as
+        unit mole {pref: micro, expo: -1};
+        unit litre {expo: 1};
+        unit second {expo: -1};
+    enddef;
+
+    def unit micromolar_per_second as
+        unit mole {pref: micro};
+        unit litre {expo: -1};
+        unit second {expo: -1};
+    enddef;
+
+    def unit micrometer as
+        unit meter {pref: micro};
+    enddef;
+
+    def unit per_micrometer3 as
+        unit metre {pref: micro, expo: -3};
+    enddef;
+
+    def unit micrometer2_per_time as
+        unit meter {pref: micro, expo: 2};
+        unit second {expo: -1};
+    enddef;
+
+    def unit per_time2 as
+        unit time_units_ICC {expo: -2};
+    enddef;
+
+    def unit kilopascals as
+        unit pascal {pref: kilo};
+    enddef;
+
+    def unit Hertz as
+        unit time_units_ICC {expo: -1};
+    enddef;
+
+    def comp Time as
+        var time: time_units {pub: out, priv: out};
+    enddef;
+
+    // SMC components based on Corrias and Buist 2007 doi:10.1007/s10439-007-9324-8
+
+    def comp Environment as
+        var T: Temperature_units {init: 310, priv: out};
+        var T_exp: Temperature_units {init: 297, priv: out};
+        var F: F_units {init: 96486, pub: out, priv: out};
+        var R: R_units {init: 8314.4, priv: out};
+        var Q10Ca: dimensionless {init: 2.1, priv: out};
+        var Q10K: dimensionless {init: 1.365, priv: out};
+        var Q10Na: dimensionless {init: 2.45, priv: out};
+        var Ca_o: millimolar {init: 2.5, pub: out, priv: out};
+        var Na_o: millimolar {init: 137, pub: out, priv: out};
+        var K_o: millimolar {init: 5.9, pub: out, priv: out};
+        var Cl_o: millimolar {init: 134, pub: out, priv: out};
+        var T_correction_Na: dimensionless {pub: out, priv: out};
+        var T_correction_K: dimensionless {pub: out, priv: out};
+        var T_correction_Ca: dimensionless {pub: out, priv: out};
+        var T_correction_BK: conductance_units {pub: out, priv: out};
+        var FoRT: Inverse_Voltage_units {pub: out, priv: out};
+        var RToF: voltage_units {pub: out, priv: out};
+
+        FoRT = F/(R*T);
+        RToF = R*T/F;
+        T_correction_Ca = pow(Q10Ca, (T-T_exp)/10{Temperature_units});
+        T_correction_K = pow(Q10K, (T-T_exp)/10{Temperature_units});
+        T_correction_Na = pow(Q10Na, (T-T_exp)/10{Temperature_units});
+        T_correction_BK = 1.1{Inverse_Temperature_units_times_conductance}*(T-T_exp);
+    enddef;
+
+    def comp SM_Membrane as
+        var Cm_SM: capacitance_units {init: 77};
+        var Vol_SM: volume_units {init: 3500, pub: out, priv: out};
+        var{V_SMC} Vm_SM: voltage_units {init: -69.75, pub: out, priv: out};
+        var time: time_units {pub: in, priv: out};
+        var{cytosolic_calcium_concentration} Ca_i: millimolar {init: 0.00008, pub: out, priv: out};
+        var Na_i: millimolar {init: 10, pub: out, priv: out};
+        var K_i: millimolar {init: 164, priv: out};
+        var Ca_o: millimolar {pub: in, priv: out};
+        var Na_o: millimolar {pub: in, priv: out};
+        var K_o: millimolar {pub: in, priv: out};
+        var Cl_o: millimolar {pub: in, priv: out};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var T_correction_Na: dimensionless {pub: in, priv: out};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var T_correction_BK: conductance_units {pub: in, priv: out};
+        var RToF: voltage_units {pub: in, priv: out};
+        var FoRT: Inverse_Voltage_units {pub: in, priv: out};
+        var F: F_units {pub: in, priv: out};
+        var I_Na_SM: current_units {priv: in};
+        var I_Ltype_SM: current_units {priv: in};
+        var I_LVA_SM: current_units {priv: in};
+        var I_kr_SM: current_units {priv: in};
+        var I_ka_SM: current_units {priv: in};
+        var I_BK_SM: current_units {priv: in};
+        var S_iSK: dimensionless {pub: in, priv: out};
+        var I_SK_SM: current_units {priv: in};
+        var I_NSCC_SM: current_units {priv: in};
+        var I_bk_SM: current_units {priv: in};
+        var J_CaSR_SM: millimolar_per_millisecond {priv: in};
+        var I_couple: current_units {pub: in};
+
+        ode(Vm_SM, time) = -1.0{dimensionless}*1.0{dimensionless}/Cm_SM*(I_Na_SM+I_SK_SM+I_Ltype_SM+I_LVA_SM+I_kr_SM+I_ka_SM+I_BK_SM+I_NSCC_SM+I_bk_SM+-1.0{dimensionless}*I_couple);
+        ode(Ca_i, time) = (-1{dimensionless}*I_Ltype_SM+-1{dimensionless}*I_LVA_SM)/(2.0{dimensionless}*0.001{mole_to_millimole}*F*Vol_SM)+-1{dimensionless}*J_CaSR_SM;
+    enddef;
+
+    def comp I_couple as
+        var g_couple: conductance_units {init: 1.3};
+        var I_couple: current_units {pub: out};
+        var V_ICC: voltage_units {pub: in};
+        var V_SMC: voltage_units {pub: in};
+
+        I_couple = g_couple*(V_ICC-V_SMC);
+    enddef;
+
+    def comp d_Ltype_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var d_inf_Ltype_SM: dimensionless;
+        var tau_d_Ltype_SM: time_units;
+        var d_Ltype_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        d_inf_Ltype_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+17{voltage_units})/-4.3{voltage_units}));
+        tau_d_Ltype_SM = T_correction_Ca*0.47{time_units};
+        ode(d_Ltype_SM, time) = (d_inf_Ltype_SM-d_Ltype_SM)/tau_d_Ltype_SM;
+    enddef;
+
+    def comp f_Ltype_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var f_inf_Ltype_SM: dimensionless;
+        var tau_f_Ltype_SM: time_units;
+        var f_Ltype_SM: dimensionless {init: 0.95, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_inf_Ltype_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+43{voltage_units})/8.9{voltage_units}));
+        tau_f_Ltype_SM = T_correction_Ca*86{time_units};
+        ode(f_Ltype_SM, time) = (f_inf_Ltype_SM-f_Ltype_SM)/tau_f_Ltype_SM;
+    enddef;
+
+    def comp f_ca_Ltype_SM as
+        var Ca_i: millimolar {pub: in};
+        var f_ca_inf_Ltype_SM: dimensionless;
+        var tau_f_ca_Ltype_SM: time_units;
+        var f_ca_Ltype_SM: dimensionless {init: 1.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_ca_inf_Ltype_SM = 1.0{dimensionless}-1.0{dimensionless}/(1.0{dimensionless}+exp((Ca_i-0.00008999{millimolar}-0.000214{millimolar})/-0.0000131{millimolar}));
+        tau_f_ca_Ltype_SM = T_correction_Ca*2{time_units};
+        ode(f_ca_Ltype_SM, time) = (f_ca_inf_Ltype_SM-f_ca_Ltype_SM)/tau_f_ca_Ltype_SM;
+    enddef;
+
+    def comp I_Ltype_SM as
+        var I_Ltype_SM: current_units {pub: out};
+        var E_Ca: voltage_units;
+        var G_max_Ltype: conductance_units {init: 65};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var f_Ltype_SM: dimensionless {priv: in};
+        var d_Ltype_SM: dimensionless {priv: in};
+        var f_ca_Ltype_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Ca_o: millimolar {pub: in};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Ca = 0.5{dimensionless}*RToF*ln(Ca_o/Ca_i);
+        I_Ltype_SM = G_max_Ltype*f_Ltype_SM*d_Ltype_SM*f_ca_Ltype_SM*(Vm_SM-E_Ca);
+    enddef;
+
+    def comp J_CaSR_SM as
+        var J_CaSR_SM: millimolar_per_millisecond {pub: out};
+        var J_max_CaSR: millimolar_per_millisecond {init: 0.31705};
+        var Ca_i: millimolar {pub: in};
+
+        J_CaSR_SM = J_max_CaSR*pow(Ca_i*1.0{per_millimolar}, 1.34{dimensionless});
+    enddef;
+
+    def comp d_LVA_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var d_inf_LVA_SM: dimensionless;
+        var tau_d_LVA_SM: time_units;
+        var d_LVA_SM: dimensionless {init: 0.02, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        d_inf_LVA_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+27.5{voltage_units})/-10.9{voltage_units}));
+        tau_d_LVA_SM = T_correction_Ca*3.0{time_units};
+        ode(d_LVA_SM, time) = (d_inf_LVA_SM-d_LVA_SM)/tau_d_LVA_SM;
+    enddef;
+
+    def comp f_LVA_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var f_inf_LVA_SM: dimensionless;
+        var tau_f_LVA_SM: time_units;
+        var f_LVA_SM: dimensionless {init: 0.99, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Ca: dimensionless {pub: in};
+
+        f_inf_LVA_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+15.8{voltage_units})/7{voltage_units}));
+        tau_f_LVA_SM = T_correction_Ca*7.58{time_units}*exp(Vm_SM*0.00817{Inverse_Voltage_units});
+        ode(f_LVA_SM, time) = (f_inf_LVA_SM-f_LVA_SM)/tau_f_LVA_SM;
+    enddef;
+
+    def comp I_LVA_SM as
+        var I_LVA_SM: current_units {pub: out};
+        var E_Ca: voltage_units;
+        var G_max_LVA: conductance_units {init: 0.18};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var f_LVA_SM: dimensionless {priv: in};
+        var d_LVA_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Ca_o: millimolar {pub: in};
+        var Ca_i: millimolar {pub: in};
+        var T_correction_Ca: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Ca = 0.5{dimensionless}*RToF*ln(Ca_o/Ca_i);
+        I_LVA_SM = G_max_LVA*f_LVA_SM*d_LVA_SM*(Vm_SM-E_Ca);
+    enddef;
+
+    def comp d_BK_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var Ca_i: millimolar {pub: in};
+        var d_BK_SM: dimensionless {pub: out};
+        var time: time_units {pub: in};
+
+        d_BK_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp(Vm_SM/-17{voltage_units}-2.0{dimensionless}*ln(Ca_i/0.001{millimolar})));
+    enddef;
+
+    def comp I_BK_SM as
+        var I_BK_SM: current_units {pub: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var E_K: voltage_units;
+        var G_max_BK: conductance_units {init: 45.7};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var d_BK_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_BK: conductance_units {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_BK_SM = (G_max_BK+T_correction_BK)*d_BK_SM*(Vm_SM-E_K);
+    enddef;
+
+    // active tension parameters based on Arner 1982 doi:10.1007/BF00580790
+
+    def comp active_tension as
+        var{tension} T: kilopascals;
+        var Ca50_0: micromolar {init: 0.5623413};
+        var S_iCa50: dimensionless {pub: in};
+        var Ca50: micromolar;
+        var h: dimensionless {init: 3.4};
+        var T_max: kilopascals {init: 313};
+        var Ca_i_SM: micromolar {pub: in};
+
+        Ca50 = Ca50_0*(1{dimensionless}+S_iCa50);
+        T = T_max*pow(Ca_i_SM, h)/(pow(Ca_i_SM, h)+pow(Ca50, h));
+    enddef;
+
+    def comp neural_input as
+        var time: time_units_ICC {pub: in};
+        var{excitatory_neural} f_e: dimensionless {init: 0};
+        var{inhibitory_neural} f_i: dimensionless {init: 0};
+        var{neural_stim_start} ns_start: time_units_ICC {init: 120};
+        var{neural_stim_end} ns_end: time_units_ICC {init: 180};
+        var w_iICC: dimensionless;
+        var w_iSMC: dimensionless;
+        var w_e: dimensionless;
+        var f_max: Hertz {init: 10};
+        var k_iAno1: dimensionless {init: 0.326};
+        var k_iNSCC: dimensionless {init: 0.775};
+        var k_iCa50: dimensionless {init: 0.882};
+        var k_iSK: dimensionless {init: 0.441};
+        var k_eIP3: dimensionless {init: 0.92};
+        var S_iAno1: dimensionless {pub: out};
+        var S_iNSCC: dimensionless {pub: out};
+        var S_iCa50: dimensionless {pub: out};
+        var S_iSK: dimensionless {pub: out};
+        var S_eIP3: dimensionless {pub: out};
+        var p_iICC: dimensionless {init: 3.17};
+        var p_iSMC: dimensionless {init: 1.17};
+        var p_e: dimensionless {init: 5};
+
+        w_iICC = sel
+            case (time > ns_start) and (time < ns_end):
+                (1{dimensionless}-exp(-p_iICC*f_i/f_max))/(1{dimensionless}-exp(-p_iICC));
+            otherwise:
+                0{dimensionless};
+        endsel;
+
+        w_iSMC = sel
+            case (time > ns_start) and (time < ns_end):
+                (1{dimensionless}-exp(-p_iSMC*f_i/f_max))/(1{dimensionless}-exp(-p_iSMC));
+            otherwise:
+                0{dimensionless};
+        endsel;
+
+        w_e = sel
+            case (time > ns_start) and (time < ns_end):
+                (1{dimensionless}-exp(-p_e*f_e/f_max))/(1{dimensionless}-exp(-p_e));
+            otherwise:
+                0{dimensionless};
+        endsel;
+
+        S_iAno1 = w_iICC*k_iAno1;
+        S_iNSCC = w_iICC*k_iNSCC;
+        S_iCa50 = w_iSMC*k_iCa50;
+        S_iSK = w_iSMC*k_iSK;
+        S_eIP3 = w_e*k_eIP3;
+    enddef;
+
+    // SK channel based on Kennedy, Bers, Chiamvimonvat, and Sato 2017 doi:10.1113/JP273626
+
+    def comp x_SK_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var x_SK_SM: dimensionless {init: 0, pub: out};
+        var time: time_units {pub: in};
+        var x_SK_inf_SM: dimensionless;
+        var tau_x_SK_SM: time_units;
+        var n: dimensionless {init: 2};
+        var EC50: micromolar {init: 0.3};
+
+        x_SK_inf_SM = 0.81{dimensionless}*pow(Ca_i, n)/(pow(Ca_i, n)+pow(EC50, n));
+        tau_x_SK_SM = 1{time_units}/(0.047{per_micromolar}*Ca_i+1{dimensionless}/76{dimensionless});
+        ode(x_SK_SM, time) = (x_SK_inf_SM-x_SK_SM)/tau_x_SK_SM;
+    enddef;
+
+    // SK
+
+    def comp I_SK_SM as
+        var I_SK_SM: current_units {pub: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var E_K: voltage_units;
+        var G_max_SK: conductance_units {init: 3.5};
+        var S_iSK: dimensionless {pub: in};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var x_SK_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_BK: conductance_units {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_SK_SM = G_max_SK*x_SK_SM*S_iSK*(Vm_SM-E_K);
+    enddef;
+
+    def comp I_bk_SM as
+        var I_bk_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_bk: conductance_units {init: 0.0144};
+        var Vm_SM: voltage_units {pub: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_bk_SM = G_max_bk*(Vm_SM-E_K);
+    enddef;
+
+    def comp xr1_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xr1_inf_SM: dimensionless;
+        var tau_xr1_SM: time_units;
+        var xr1_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xr1_inf_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+27{voltage_units})/-5.0{voltage_units}));
+        tau_xr1_SM = T_correction_K*80{time_units};
+        ode(xr1_SM, time) = (xr1_inf_SM-xr1_SM)/tau_xr1_SM;
+    enddef;
+
+    def comp xr2_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xr2_inf_SM: dimensionless;
+        var tau_xr2_SM: time_units;
+        var xr2_SM: dimensionless {init: 0.82, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xr2_inf_SM = 0.2{dimensionless}+0.8{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+58{voltage_units})/10{voltage_units}));
+        tau_xr2_SM = T_correction_K*(-707{time_units}+1481{time_units}*exp((Vm_SM+36{voltage_units})/95{voltage_units}));
+        ode(xr2_SM, time) = (xr2_inf_SM-xr2_SM)/tau_xr2_SM;
+    enddef;
+
+    def comp I_kr_SM as
+        var I_kr_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_kr_SM: conductance_units {init: 35};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var xr1_SM: dimensionless {priv: in};
+        var xr2_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_kr_SM = G_max_kr_SM*xr1_SM*xr2_SM*(Vm_SM-E_K);
+    enddef;
+
+    def comp m_Na_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var m_inf_Na: dimensionless;
+        var tau_m_Na: time_units;
+        var m_Na_SM: dimensionless {init: 0.005, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Na: dimensionless {pub: in};
+
+        m_inf_Na = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+47{voltage_units})/-4.8{voltage_units}));
+        tau_m_Na = T_correction_Na*(Vm_SM*-0.017{Inverse_Voltage_units}*1{time_units}+0.440{time_units});
+        ode(m_Na_SM, time) = (m_inf_Na-m_Na_SM)/tau_m_Na;
+    enddef;
+
+    def comp h_Na_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var h_inf_Na: dimensionless;
+        var tau_h_Na: time_units;
+        var h_Na_SM: dimensionless {init: 0.05787, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_Na: dimensionless {pub: in};
+
+        h_inf_Na = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+78{voltage_units})/3{voltage_units}));
+        tau_h_Na = T_correction_Na*(Vm_SM*-0.25{Inverse_Voltage_units}*1{time_units}+5.50{time_units});
+        ode(h_Na_SM, time) = (h_inf_Na-h_Na_SM)/tau_h_Na;
+    enddef;
+
+    def comp I_Na_SM as
+        var I_Na_SM: current_units {pub: out};
+        var E_Na: voltage_units;
+        var G_max_Na_SM: conductance_units {init: 3};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var h_Na_SM: dimensionless {priv: in};
+        var m_Na_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var Na_o: millimolar {pub: in};
+        var Na_i: millimolar {pub: in};
+        var T_correction_Na: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_Na = RToF*ln(Na_o/Na_i);
+        I_Na_SM = G_max_Na_SM*h_Na_SM*m_Na_SM*(Vm_SM-E_Na);
+    enddef;
+
+    def comp xa1_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xa1_inf_SM: dimensionless;
+        var tau_xa1_SM: time_units;
+        var xa1_SM: dimensionless {init: 0.00414, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xa1_inf_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+26.5{voltage_units})/-7.9{voltage_units}));
+        tau_xa1_SM = T_correction_K*(31.8{time_units}+175{time_units}*exp(-0.5{dimensionless}*sqr((Vm_SM+44.4{voltage_units})/22.3{voltage_units})));
+        ode(xa1_SM, time) = (xa1_inf_SM-xa1_SM)/tau_xa1_SM;
+    enddef;
+
+    def comp xa2_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var xa2_inf_SM: dimensionless;
+        var tau_xa2_SM: time_units;
+        var xa2_SM: dimensionless {init: 0.72, pub: out};
+        var time: time_units {pub: in};
+        var T_correction_K: dimensionless {pub: in};
+
+        xa2_inf_SM = 0.1{dimensionless}+0.9{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+65{voltage_units})/6.2{voltage_units}));
+        tau_xa2_SM = T_correction_K*90{time_units};
+        ode(xa2_SM, time) = (xa2_inf_SM-xa2_SM)/tau_xa2_SM;
+    enddef;
+
+    def comp I_ka_SM as
+        var I_ka_SM: current_units {pub: out};
+        var E_K: voltage_units;
+        var G_max_ka_SM: conductance_units {init: 9};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var xa1_SM: dimensionless {priv: in};
+        var xa2_SM: dimensionless {priv: in};
+        var RToF: voltage_units {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var T_correction_K: dimensionless {pub: in, priv: out};
+        var time: time_units {pub: in, priv: out};
+
+        E_K = RToF*ln(K_o/K_i);
+        I_ka_SM = G_max_ka_SM*xa1_SM*xa2_SM*(Vm_SM-E_K);
+    enddef;
+
+    def comp m_NSCC_SM as
+        var Vm_SM: voltage_units {pub: in};
+        var m_inf_NSCC_SM: dimensionless;
+        var tau_m_NSCC_SM: time_units;
+        var m_NSCC_SM: dimensionless {init: 0.0, pub: out};
+        var time: time_units {pub: in};
+
+        m_inf_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+25.0{voltage_units})/-20{voltage_units}));
+        tau_m_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+exp((Vm_SM+66{voltage_units})/-26{voltage_units}))*150{time_units};
+        ode(m_NSCC_SM, time) = (m_inf_NSCC_SM-m_NSCC_SM)/tau_m_NSCC_SM;
+    enddef;
+
+    def comp I_NSCC_SM as
+        var I_NSCC_SM: current_units {pub: out};
+        var E_NSCC: voltage_units {init: -28};
+        var G_max_NSCC_SM: conductance_units {init: 50};
+        var Vm_SM: voltage_units {pub: in, priv: out};
+        var Ca_i: millimolar {pub: in, priv: out};
+        var Ach: millimolar {init: 0.00001};
+        var m_NSCC_SM: dimensionless {priv: in};
+        var f_ca_NSCC_SM: dimensionless;
+        var rach_NSCC_SM: dimensionless;
+        var RToF: voltage_units {pub: in};
+        var Na_o: millimolar {pub: in};
+        var Na_i: millimolar {pub: in};
+        var K_o: millimolar {pub: in};
+        var K_i: millimolar {pub: in};
+        var time: time_units {pub: in, priv: out};
+
+        f_ca_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+pow(Ca_i/0.0002{millimolar}, -4.0{dimensionless}));
+        rach_NSCC_SM = 1.0{dimensionless}/(1.0{dimensionless}+0.01{millimolar}/Ach);
+        I_NSCC_SM = G_max_NSCC_SM*m_NSCC_SM*f_ca_NSCC_SM*rach_NSCC_SM*(Vm_SM-E_NSCC);
+    enddef;
+
+    // ICC components based on Lees-Green, Gibbons, Farrugia, Sneyd, and Cheng 2014 doi:10.1152/ajpgi.00449.2013
+
+    def comp Parameters as
+        var p2m: dimensionless {init: 1e-09, pub: out};
+        var umc2L: dimensionless {init: 1e+15, pub: out};
+        var T: Temperature_units {init: 310, pub: out};
+        var F: F_units_ICC {init: 96.4846, pub: out};
+        var R: R_units_ICC {init: 8.3144, pub: out};
+        var z_ca: dimensionless {init: 2, pub: out};
+        var z_na: dimensionless {init: 1, pub: out};
+        var z_k: dimensionless {init: 1, pub: out};
+        var z_cl: dimensionless {init: -1, pub: out};
+        var Ca_o: micromolar {init: 2000, pub: out};
+        var Cl_i: micromolar {init: 78000, pub: out};
+        var Cl_o: micromolar {init: 166000, pub: out};
+        var{intracellular_potassium_concentration_ICC} K_i: micromolar {init: 140000, pub: out};
+        var K_o: micromolar {init: 5000, pub: out};
+        var Na_i: micromolar {init: 30000, pub: out};
+        var Na_o: micromolar {init: 140000, pub: out};
+    enddef;
+
+    def comp Volume as
+        var cellVol: litre {init: 1e-12};
+        var cellPropER: dimensionless {init: 0.1};
+        var cellPropCyto: dimensionless {init: 0.7};
+        var volER: litre {pub: out};
+        var volCyto: litre {pub: out};
+
+        volER = cellVol*cellPropER;
+        volCyto = cellVol*cellPropCyto;
+    enddef;
+
+    def comp Nernst as
+        var T: Temperature_units {pub: in};
+        var F: F_units_ICC {pub: in};
+        var R: R_units_ICC {pub: in};
+        var z_na: dimensionless {pub: in};
+        var z_k: dimensionless {pub: in};
+        var z_cl: dimensionless {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var Cl_i: micromolar {pub: in};
+        var Cl_o: micromolar {pub: in};
+        var K_i: micromolar {pub: in};
+        var K_o: micromolar {pub: in};
+        var Na_i: micromolar {pub: in};
+        var Na_o: micromolar {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var Ca_o: micromolar {pub: in};
+        var E_NSCC: voltage_units {init: 0, pub: out};
+        var E_NSV: voltage_units {init: 0, pub: out};
+        var E_SOC: voltage_units {init: 0, pub: out};
+        var E_Ca: voltage_units {pub: out};
+        var E_Cl: voltage_units {pub: out};
+        var E_Na: voltage_units {pub: out};
+        var E_K: voltage_units {pub: out};
+
+        E_Ca = R*T/(F*z_ca)*ln(Ca_o/Ca_i);
+        E_Cl = R*T/(F*z_cl)*ln(Cl_o/Cl_i);
+        E_Na = R*T/(F*z_na)*ln(Na_o/Na_i);
+        E_K = R*T/(F*z_k)*ln(K_o/K_i);
+    enddef;
+
+    def comp d_CaT as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var d_CaT_Vh: voltage_units {init: -40};
+        var d_CaT_S: voltage_units {init: -3};
+        var d_CaT_tau: time_units_ICC {init: 0.006};
+        var d_CaT_inf: dimensionless;
+        var d_CaT: dimensionless {init: 0.001271016263081, pub: out};
+
+        d_CaT_inf = 1{dimensionless}/(1{dimensionless}+exp((Vm-d_CaT_Vh)/d_CaT_S));
+        ode(d_CaT, time) = (d_CaT_inf-d_CaT)/d_CaT_tau;
+    enddef;
+
+    def comp f_CaT as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var f_CaT_Vh: voltage_units {init: -55};
+        var f_CaT_S: voltage_units {init: 5};
+        var f_CaT_tau: time_units_ICC {init: 0.1};
+        var f_CaT_inf: dimensionless;
+        var f_CaT: dimensionless {init: 0.5, pub: out};
+
+        f_CaT_inf = 1{dimensionless}/(1{dimensionless}+exp((Vm-f_CaT_Vh)/f_CaT_S));
+        ode(f_CaT, time) = (f_CaT_inf-f_CaT)/f_CaT_tau;
+    enddef;
+
+    def comp I_CaT as
+        var g_CaT: conductance_units {init: 4};
+        var time: time_units_ICC {pub: in, priv: out};
+        var Vm: voltage_units {pub: in, priv: out};
+        var p2m: dimensionless {pub: in};
+        var F: F_units_ICC {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var E_Ca: voltage_units {pub: in};
+        var volCyto: litre {pub: in};
+        var f_CaT: dimensionless {pub: out, priv: in};
+        var d_CaT: dimensionless {pub: out, priv: in};
+        var I_CaT: current_units {pub: out};
+        var J_CaT: micromolar_per_second {pub: out};
+
+        I_CaT = g_CaT*d_CaT*f_CaT*(Vm-E_Ca);
+        J_CaT = -p2m*I_CaT/(z_ca*F*volCyto);
+    enddef;
+
+    def comp P_SOC as
+        var SOC_h: micromolar {init: 200, pub: out};
+        var Ca_er: micromolar {pub: in};
+        var SOC_n: dimensionless {init: 8, pub: out};
+        var P_SOC: dimensionless {pub: out};
+
+        P_SOC = 1{dimensionless}/(1{dimensionless}+pow(Ca_er/SOC_h, SOC_n));
+    enddef;
+
+    def comp I_SOC as
+        var g_SOC: conductance_units {init: 0.1};
+        var Ca_er: micromolar {pub: in, priv: out};
+        var p2m: dimensionless {pub: in};
+        var F: F_units_ICC {pub: in};
+        var z_ca: dimensionless {pub: in};
+        var E_Ca: voltage_units {pub: in};
+        var Vm: voltage_units {pub: in, priv: out};
+        var SOCPropCa: dimensionless {init: 1, pub: out};
+        var volCyto: litre {pub: in};
+        var P_SOC: dimensionless {pub: out, priv: in};
+        var I_SOC: current_units {pub: out};
+        var J_SOC: micromolar_per_second {pub: out};
+
+        I_SOC = g_SOC*P_SOC*(Vm-E_Ca);
+        J_SOC = -p2m*SOCPropCa*I_SOC/(z_ca*F*volCyto);
+    enddef;
+
+    def comp I_BK as
+        var g_BK: conductance_units {init: 9};
+        var Vm: voltage_units {pub: in, priv: out};
+        var E_K: voltage_units {pub: in};
+        var I_BK: current_units {pub: out};
+
+        I_BK = g_BK*(Vm-E_K);
+    enddef;
+
+    def comp I_stim as
+        var{membrane_stimulus_current} I_stim: current_units {pub: out};
+        var{pacing_amplitude} stim_amp: current_units {init: 0};
+        var{pacing_start_time} stim_start: time_units_ICC {init: 18};
+        var{pacing_pulse_width} stim_PW: time_units_ICC {init: 0.5};
+        var time: time_units_ICC {pub: in, priv: out};
+
+        I_stim = sel
+            case (time > stim_start) and (time < stim_start+stim_PW):
+                stim_amp;
+            otherwise:
+                0{current_units};
+        endsel;
+
+        // a value of -168 will induce a SW at 18.5 s
+    enddef;
+
+    def comp P_NSCC as
+        var Ca_i: micromolar {pub: in};
+        var P_NSCC: dimensionless {pub: out};
+        var n_NSCC: dimensionless {init: 4};
+        var Ca_NSCC: micromolar {init: 1.8};
+
+        P_NSCC = pow(Ca_i, n_NSCC)/(pow(Ca_NSCC, n_NSCC)+pow(Ca_i, n_NSCC));
+    enddef;
+
+    def comp I_NSCC as
+        var g_NSCC: conductance_units {init: 30};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var I_NSCC: current_units {pub: out};
+        var P_NSCC: dimensionless {priv: in};
+        var Vm: voltage_units {pub: in, priv: out};
+        var E_NSCC: voltage_units {pub: in};
+        var S_iNSCC: dimensionless {pub: in};
+
+        I_NSCC = g_NSCC*(1{dimensionless}-S_iNSCC)*P_NSCC*(Vm-E_NSCC);
+    enddef;
+
+    def comp d_Ano1 as
+        var Vm: voltage_units {pub: in};
+        var time: time_units_ICC {pub: in};
+        var volCyto: litre {pub: in};
+        var J_SOC: micromolar_per_second {pub: in};
+        var Dc: micrometer2_per_time {init: 250};
+        var Dm: micrometer2_per_time {init: 75};
+        var Bm: micromolar {init: 50};
+        var Km: micromolar {init: 1};
+        var kc: Inverse_Voltage_ICC {init: 0.01248, pub: out};
+        var nSOC: dimensionless {init: 50, pub: out};
+        var Ca_i: micromolar {pub: in};
+        var rad: micrometer;
+        var mouthCa: micromolar_per_second;
+        var localCa: micromolar;
+        var d_Ano1_tau: time_units_ICC;
+        var d_Ano1_tscale: dimensionless {init: 1};
+        var colocalRadius: micrometer {init: 0.05};
+        var d_Ano1_inf: dimensionless;
+        var d_Ano1: dimensionless {init: 0.01, pub: out};
+        var Ano1_n: dimensionless {init: 2};
+        var Ano1_Vh: voltage_units {init: -100};
+        var Ano1_s: Inverse_Voltage_ICC {init: 0.0156};
+        var S_iAno1: dimensionless {pub: in};
+        var h_Ano1: dimensionless {pub: out};
+
+        rad = colocalRadius;
+        mouthCa = 1e15{per_litre}*J_SOC*volCyto/nSOC;
+        localCa = (-Dc*Km+mouthCa/(2{per_micrometer3}*pi*rad)+Dc*Ca_i-Dm*Bm*Km/(Km+Ca_i)+sqrt(sqr(Dc*Km+mouthCa/(2{per_micrometer3}*pi*rad)+Dc*Ca_i-Dm*Bm*Km/(Km+Ca_i))+4{dimensionless}*Dc*Dm*Bm*Km))/(2{dimensionless}*Dc);
+        d_Ano1_tau = d_Ano1_tscale*(81.63{time_units_ICC}*exp(-0.57{per_micromolar}*localCa)+76.17{time_units_ICC}*exp(-0.05374{per_micromolar}*localCa)*exp(Vm/(70.3{voltage_units}*exp(0.153{per_micromolar}*localCa))))*1e-3{dimensionless};
+        d_Ano1_inf = 1{dimensionless}/((1{dimensionless}+exp((Ano1_Vh-Vm)*Ano1_s))*(1{dimensionless}+pow(localCa/(1.39{micromolar}*exp(-kc*Vm)), -Ano1_n)));
+        h_Ano1 = d_Ano1*S_iAno1*1{per_time2}/(1{per_time2}+sqr((d_Ano1_inf-d_Ano1)/d_Ano1_tau));
+        ode(d_Ano1, time) = (d_Ano1_inf-d_Ano1)/d_Ano1_tau;
+    enddef;
+
+    def comp I_Ano1 as
+        var g_Ano1: conductance_units {init: 20};
+        var Vm: voltage_units {pub: in, priv: out};
+        var time: time_units_ICC {pub: in, priv: out};
+        var J_SOC: micromolar_per_second {pub: in, priv: out};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var volCyto: litre {pub: in, priv: out};
+        var E_Cl: voltage_units {pub: in};
+        var I_Ano1: current_units {pub: out};
+        var d_Ano1: dimensionless {pub: out, priv: in};
+        var h_Ano1: dimensionless {priv: in};
+        var S_iAno1: dimensionless {pub: in, priv: out};
+
+        I_Ano1 = g_Ano1*(d_Ano1-h_Ano1)*(Vm-E_Cl);
+    enddef;
+
+    def comp J_SERCA as
+        var Ke: micromolar {init: 0.1};
+        var J_SERCA: micromolar_per_second {pub: out};
+        var Ve: micromolar_per_second {init: 160};
+        var fc: dimensionless {init: 0.01, pub: out};
+        var fe: dimensionless {init: 1, pub: out};
+        var Ca_i: micromolar {pub: in};
+
+        J_SERCA = Ve*sqr(Ca_i)/(sqr(Ke)+sqr(Ca_i));
+    enddef;
+
+    def comp Ca_er as
+        var time: time_units_ICC {pub: in};
+        var fe: dimensionless {pub: in};
+        var volER: litre {pub: in};
+        var volCyto: litre {pub: in};
+        var Ca_er: micromolar {init: 290.0, pub: out};
+        var J_SERCA: micromolar_per_second {pub: in};
+        var J_IPR: micromolar_per_second {pub: in};
+
+        ode(Ca_er, time) = fe*(J_SERCA-J_IPR)*volCyto/volER;
+    enddef;
+
+    def comp y_bind as
+        var time: time_units_ICC {pub: in};
+        var Ca_i: micromolar {pub: in};
+        var k1: per_micromolarsecond {init: 500, pub: out};
+        var k2: per_micromolarsecond {init: 0.25};
+        var k3: per_micromolarsecond {init: 500};
+        var k4: per_micromolarsecond {init: 0.25};
+        var k5: per_micromolarsecond {init: 25, pub: out};
+        var k_1: rate_constants_units_second {init: 65};
+        var k_2: rate_constants_units_second {init: 0.2625};
+        var k_3: rate_constants_units_second {init: 471.5};
+        var k_4: rate_constants_units_second {init: 0.03625};
+        var k_5: rate_constants_units_second {init: 2.05};
+        var IP3: micromolar {pub: in};
+        var K1: micromolar {pub: out};
+        var K2: micromolar {pub: out};
+        var K3: micromolar {pub: out};
+        var K4: micromolar {pub: out};
+        var K5: micromolar {pub: out};
+        var y: dimensionless {init: 0.4, pub: out};
+        var phi1: rate_constants_units_second;
+        var phi2: rate_constants_units_second;
+
+        K1 = k_1/k1;
+        K2 = k_2/k2;
+        K3 = k_3/k3;
+        K4 = k_4/k4;
+        K5 = k_5/k5;
+        phi1 = (k_4*K2*K1+k_2*K4*IP3)*Ca_i/(K4*K2*(K1+IP3));
+        phi2 = (k_2*IP3+k_4*K3)/(K3+IP3);
+        ode(y, time) = phi1*(1{dimensionless}-y)-phi2*y;
+    enddef;
+
+    def comp J_IPR as
+        var time: time_units_ICC {pub: in, priv: out};
+        var Ca_i: micromolar {pub: in, priv: out};
+        var Ca_er: micromolar {pub: in};
+        var kipr: rate_constants_units_second {init: 7};
+        var Pipr: dimensionless;
+        var Jer: rate_constants_units_second {init: 0.01};
+        var IP3_base: micromolar {init: 0.5};
+        var K1: micromolar {priv: in};
+        var K5: micromolar {priv: in};
+        var y: dimensionless {pub: out, priv: in};
+        var J_SERCA: micromolar_per_second {pub: in};
+        var J_IPR: micromolar_per_second {pub: out};
+        var IP3: micromolar {priv: out};
+        var S_eIP3: dimensionless {pub: in};
+
+        IP3 = IP3_base*(1{dimensionless}+S_eIP3);
+        Pipr = pow(IP3*Ca_i*(1{dimensionless}-y)/((IP3+K1)*(Ca_i+K5)), 3{dimensionless});
+        J_IPR = (kipr*Pipr+Jer)*(Ca_er-Ca_i);
+    enddef;
+
+    def comp J_PMCA as
+        var g_PMCA: dimensionless {init: 1};
+        var Ca_i: micromolar {pub: in};
+        var J_PMCA_max: micromolar_per_second {init: 100};
+        var K_PMCA: micromolar {init: 0.1};
+        var n_PMCA: dimensionless {init: 2};
+        var J_PMCA: micromolar_per_second {pub: out};
+
+        J_PMCA = g_PMCA*J_PMCA_max*1{dimensionless}/(1{dimensionless}+pow(K_PMCA/Ca_i, n_PMCA));
+    enddef;
+
+    def comp I_BNa as
+        var g_BNa: conductance_units {init: 2};
+        var Vm: voltage_units {pub: in};
+        var E_Na: voltage_units {pub: in};
+        var I_BNa: current_units {pub: out};
+
+        I_BNa = g_BNa*(Vm-E_Na);
+    enddef;
+
+    def comp ICC_Membrane as
+        var{membrane_voltage} Vm: voltage_units {init: -66.0, pub: out, priv: out};
+        var time: time_units_ICC {pub: in, priv: out};
+        var{membrane_capacitance} Cm: capacitance_units_ICC {init: 0.025};
+        var fc: dimensionless {priv: in};
+        var f_CaT: dimensionless {priv: in};
+        var d_CaT: dimensionless {priv: in};
+        var I_CaT: current_units {priv: in};
+        var J_CaT: micromolar_per_second {priv: in};
+        var I_NSCC: current_units {priv: in};
+        var I_stim: current_units {priv: in};
+        var I_BNa: current_units {priv: in};
+        var I_BK: current_units {priv: in};
+        var d_Ano1: dimensionless {priv: in};
+        var I_Ano1: current_units {priv: in};
+        var I_SOC: current_units {priv: in};
+        var J_SOC: micromolar_per_second {priv: in};
+        var J_IPR: micromolar_per_second {priv: in};
+        var J_PMCA: micromolar_per_second {priv: in};
+        var J_SERCA: micromolar_per_second {priv: in};
+        var Ca_er: micromolar {priv: in};
+        var Ca_i: micromolar {init: 0.14, pub: out, priv: out};
+        var Iion: current_units {pub: out};
+        var S_eIP3: dimensionless {pub: in, priv: out};
+        var S_iNSCC: dimensionless {pub: in, priv: out};
+        var S_iAno1: dimensionless {pub: in, priv: out};
+
+        Iion = I_SOC+I_Ano1+I_CaT+I_BK+I_BNa+I_NSCC+I_stim;
+        ode(Vm, time) = -Iion/Cm;
+        ode(Ca_i, time) = fc*(J_IPR-J_SERCA+J_SOC+J_CaT-J_PMCA);
+    enddef;
+
+    // MAPPING 
+
+    // ICC 
+
+    def map between Parameters and Nernst for
+        vars z_ca and z_ca;
+        vars z_na and z_na;
+        vars z_k and z_k;
+        vars z_cl and z_cl;
+        vars Cl_i and Cl_i;
+        vars Cl_o and Cl_o;
+        vars K_i and K_i;
+        vars K_o and K_o;
+        vars Na_i and Na_i;
+        vars Na_o and Na_o;
+        vars Ca_o and Ca_o;
+        vars T and T;
+        vars F and F;
+        vars R and R;
+    enddef;
+
+    def map between d_CaT and I_CaT for
+        vars Vm and Vm;
+        vars d_CaT and d_CaT;
+        vars time and time;
+    enddef;
+
+    def map between f_CaT and I_CaT for
+        vars Vm and Vm;
+        vars f_CaT and f_CaT;
+        vars time and time;
+    enddef;
+
+    def map between Volume and I_CaT for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between Nernst and I_CaT for
+        vars E_Ca and E_Ca;
+    enddef;
+
+    def map between Parameters and I_CaT for
+        vars p2m and p2m;
+        vars z_ca and z_ca;
+        vars F and F;
+    enddef;
+
+    def map between Volume and I_SOC for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between Parameters and I_SOC for
+        vars p2m and p2m;
+        vars z_ca and z_ca;
+        vars F and F;
+    enddef;
+
+    def map between P_SOC and I_SOC for
+        vars P_SOC and P_SOC;
+        vars Ca_er and Ca_er;
+    enddef;
+
+    def map between Nernst and I_SOC for
+        vars E_Ca and E_Ca;
+    enddef;
+
+    def map between Nernst and I_BK for
+        vars E_K and E_K;
+    enddef;
+
+    def map between Nernst and I_BNa for
+        vars E_Na and E_Na;
+    enddef;
+
+    def map between ICC_Membrane and I_BNa for
+        vars Vm and Vm;
+        vars I_BNa and I_BNa;
+    enddef;
+
+    def map between Ca_er and J_IPR for
+        vars Ca_er and Ca_er;
+        vars J_IPR and J_IPR;
+    enddef;
+
+    def map between J_SERCA and J_IPR for
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between Volume and Ca_er for
+        vars volCyto and volCyto;
+        vars volER and volER;
+    enddef;
+
+    def map between I_SOC and Ca_er for
+        vars Ca_er and Ca_er;
+    enddef;
+
+    def map between Ca_er and J_SERCA for
+        vars fe and fe;
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between Nernst and I_NSCC for
+        vars E_NSCC and E_NSCC;
+    enddef;
+
+    def map between I_NSCC and P_NSCC for
+        vars P_NSCC and P_NSCC;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between Volume and I_Ano1 for
+        vars volCyto and volCyto;
+    enddef;
+
+    def map between I_SOC and I_Ano1 for
+        vars J_SOC and J_SOC;
+    enddef;
+
+    def map between d_Ano1 and I_Ano1 for
+        vars Vm and Vm;
+        vars d_Ano1 and d_Ano1;
+        vars h_Ano1 and h_Ano1;
+        vars time and time;
+        vars volCyto and volCyto;
+        vars J_SOC and J_SOC;
+        vars Ca_i and Ca_i;
+        vars S_iAno1 and S_iAno1;
+    enddef;
+
+    def map between Nernst and I_Ano1 for
+        vars E_Cl and E_Cl;
+    enddef;
+
+    def map between y_bind and J_IPR for
+        vars K1 and K1;
+        vars K5 and K5;
+        vars IP3 and IP3;
+        vars y and y;
+        vars Ca_i and Ca_i;
+        vars time and time;
+    enddef;
+
+    def map between I_Ano1 and ICC_Membrane for
+        vars time and time;
+        vars d_Ano1 and d_Ano1;
+        vars I_Ano1 and I_Ano1;
+        vars Vm and Vm;
+        vars Ca_i and Ca_i;
+        vars S_iAno1 and S_iAno1;
+    enddef;
+
+    def map between I_NSCC and ICC_Membrane for
+        vars Vm and Vm;
+        vars I_NSCC and I_NSCC;
+        vars Ca_i and Ca_i;
+        vars S_iNSCC and S_iNSCC;
+    enddef;
+
+    def map between Ca_er and ICC_Membrane for
+        vars Ca_er and Ca_er;
+        vars time and time;
+    enddef;
+
+    def map between J_SERCA and ICC_Membrane for
+        vars fc and fc;
+        vars Ca_i and Ca_i;
+        vars J_SERCA and J_SERCA;
+    enddef;
+
+    def map between J_IPR and ICC_Membrane for
+        vars J_IPR and J_IPR;
+        vars Ca_i and Ca_i;
+        vars time and time;
+        vars S_eIP3 and S_eIP3;
+    enddef;
+
+    def map between I_stim and ICC_Membrane for
+        vars time and time;
+        vars I_stim and I_stim;
+    enddef;
+
+    def map between J_PMCA and ICC_Membrane for
+        vars J_PMCA and J_PMCA;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between Nernst and ICC_Membrane for
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between I_CaT and ICC_Membrane for
+        vars time and time;
+        vars d_CaT and d_CaT;
+        vars f_CaT and f_CaT;
+        vars I_CaT and I_CaT;
+        vars Vm and Vm;
+        vars J_CaT and J_CaT;
+    enddef;
+
+    def map between I_SOC and ICC_Membrane for
+        vars I_SOC and I_SOC;
+        vars Vm and Vm;
+        vars J_SOC and J_SOC;
+    enddef;
+
+    def map between I_BK and ICC_Membrane for
+        vars I_BK and I_BK;
+        vars Vm and Vm;
+    enddef;
+
+    def map between Time and ICC_Membrane for
+        vars time and time;
+    enddef;
+
+    // SMC mapping 
+
+    def map between m_Na_SM and I_Na_SM for
+        vars Vm_SM and Vm_SM;
+        vars m_Na_SM and m_Na_SM;
+        vars time and time;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between h_Na_SM and I_Na_SM for
+        vars Vm_SM and Vm_SM;
+        vars h_Na_SM and h_Na_SM;
+        vars time and time;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between I_Na_SM and SM_Membrane for
+        vars Na_i and Na_i;
+        vars Vm_SM and Vm_SM;
+        vars I_Na_SM and I_Na_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Na_o and Na_o;
+        vars T_correction_Na and T_correction_Na;
+    enddef;
+
+    def map between d_Ltype_SM and I_Ltype_SM for
+        vars Vm_SM and Vm_SM;
+        vars d_Ltype_SM and d_Ltype_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_Ltype_SM and I_Ltype_SM for
+        vars Vm_SM and Vm_SM;
+        vars f_Ltype_SM and f_Ltype_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_ca_Ltype_SM and I_Ltype_SM for
+        vars f_ca_Ltype_SM and f_ca_Ltype_SM;
+        vars Ca_i and Ca_i;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between I_Ltype_SM and SM_Membrane for
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_Ltype_SM and I_Ltype_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Ca_o and Ca_o;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between d_LVA_SM and I_LVA_SM for
+        vars Vm_SM and Vm_SM;
+        vars d_LVA_SM and d_LVA_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between f_LVA_SM and I_LVA_SM for
+        vars Vm_SM and Vm_SM;
+        vars f_LVA_SM and f_LVA_SM;
+        vars time and time;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between I_LVA_SM and SM_Membrane for
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_LVA_SM and I_LVA_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars Ca_o and Ca_o;
+        vars T_correction_Ca and T_correction_Ca;
+    enddef;
+
+    def map between xr1_SM and I_kr_SM for
+        vars Vm_SM and Vm_SM;
+        vars xr1_SM and xr1_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xr2_SM and I_kr_SM for
+        vars Vm_SM and Vm_SM;
+        vars xr2_SM and xr2_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between I_kr_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_kr_SM and I_kr_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xa1_SM and I_ka_SM for
+        vars Vm_SM and Vm_SM;
+        vars xa1_SM and xa1_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between xa2_SM and I_ka_SM for
+        vars Vm_SM and Vm_SM;
+        vars xa2_SM and xa2_SM;
+        vars time and time;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between I_ka_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_ka_SM and I_ka_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_K and T_correction_K;
+    enddef;
+
+    def map between d_BK_SM and I_BK_SM for
+        vars Vm_SM and Vm_SM;
+        vars Ca_i and Ca_i;
+        vars d_BK_SM and d_BK_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_BK_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_BK_SM and I_BK_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_BK and T_correction_BK;
+    enddef;
+
+    def map between x_SK_SM and I_SK_SM for
+        vars Vm_SM and Vm_SM;
+        vars Ca_i and Ca_i;
+        vars x_SK_SM and x_SK_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_SK_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Ca_i and Ca_i;
+        vars Vm_SM and Vm_SM;
+        vars I_SK_SM and I_SK_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars T_correction_BK and T_correction_BK;
+        vars S_iSK and S_iSK;
+    enddef;
+
+    def map between I_bk_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Vm_SM and Vm_SM;
+        vars I_bk_SM and I_bk_SM;
+        vars RToF and RToF;
+        vars K_o and K_o;
+    enddef;
+
+    def map between m_NSCC_SM and I_NSCC_SM for
+        vars Vm_SM and Vm_SM;
+        vars m_NSCC_SM and m_NSCC_SM;
+        vars time and time;
+    enddef;
+
+    def map between I_NSCC_SM and SM_Membrane for
+        vars K_i and K_i;
+        vars Na_i and Na_i;
+        vars Vm_SM and Vm_SM;
+        vars I_NSCC_SM and I_NSCC_SM;
+        vars time and time;
+        vars RToF and RToF;
+        vars K_o and K_o;
+        vars Na_o and Na_o;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between J_CaSR_SM and SM_Membrane for
+        vars J_CaSR_SM and J_CaSR_SM;
+        vars Ca_i and Ca_i;
+    enddef;
+
+    def map between SM_Membrane and Environment for
+        vars Ca_o and Ca_o;
+        vars Na_o and Na_o;
+        vars K_o and K_o;
+        vars Cl_o and Cl_o;
+        vars RToF and RToF;
+        vars FoRT and FoRT;
+        vars F and F;
+        vars T_correction_Ca and T_correction_Ca;
+        vars T_correction_Na and T_correction_Na;
+        vars T_correction_K and T_correction_K;
+        vars T_correction_BK and T_correction_BK;
+    enddef;
+
+    def map between Time and SM_Membrane for
+        vars time and time;
+    enddef;
+
+    def map between I_couple and SM_Membrane for
+        vars V_SMC and Vm_SM;
+        vars I_couple and I_couple;
+    enddef;
+
+    def map between I_couple and ICC_Membrane for
+        vars V_ICC and Vm;
+    enddef;
+
+    def map between neural_input and SM_Membrane for
+        vars S_iSK and S_iSK;
+    enddef;
+
+    def map between neural_input and ICC_Membrane for
+        vars S_eIP3 and S_eIP3;
+        vars S_iNSCC and S_iNSCC;
+        vars S_iAno1 and S_iAno1;
+        vars time and time;
+    enddef;
+
+    def map between neural_input and active_tension for
+        vars S_iCa50 and S_iCa50;
+    enddef;
+
+    def map between SM_Membrane and active_tension for
+        vars Ca_i and Ca_i_SM;
+    enddef;
+
+    // GROUPING 
+
+    def group as encapsulation for
+        comp SM_Membrane incl
+            comp I_Na_SM incl
+                comp m_Na_SM;
+                comp h_Na_SM;
+            endcomp;
+
+            comp I_Ltype_SM incl
+                comp d_Ltype_SM;
+                comp f_Ltype_SM;
+                comp f_ca_Ltype_SM;
+            endcomp;
+
+            comp I_LVA_SM incl
+                comp d_LVA_SM;
+                comp f_LVA_SM;
+            endcomp;
+
+            comp I_BK_SM incl
+                comp d_BK_SM;
+            endcomp;
+
+            comp I_kr_SM incl
+                comp xr1_SM;
+                comp xr2_SM;
+            endcomp;
+
+            comp I_ka_SM incl
+                comp xa1_SM;
+                comp xa2_SM;
+            endcomp;
+
+            comp I_SK_SM incl
+                comp x_SK_SM;
+            endcomp;
+
+            comp I_bk_SM;
+
+            comp I_NSCC_SM incl
+                comp m_NSCC_SM;
+            endcomp;
+
+            comp J_CaSR_SM;
+        endcomp;
+
+        comp ICC_Membrane incl
+            comp I_CaT incl
+                comp d_CaT;
+                comp f_CaT;
+            endcomp;
+
+            comp Parameters;
+            comp Volume;
+            comp Nernst;
+            comp I_BK;
+            comp I_BNa;
+            comp J_SERCA;
+            comp J_PMCA;
+            comp I_stim;
+
+            comp J_IPR incl
+                comp y_bind;
+            endcomp;
+
+            comp Ca_er;
+
+            comp I_SOC incl
+                comp P_SOC;
+            endcomp;
+
+            comp I_NSCC incl
+                comp P_NSCC;
+            endcomp;
+
+            comp I_Ano1 incl
+                comp d_Ano1;
+            endcomp;
+        endcomp;
+    enddef;
+enddef;
diff --git a/ICC_SMC_Neuro_Tvar_Explanation.txt b/ICC_SMC_Neuro_Tvar_Explanation.txt
new file mode 100644
index 0000000..e819a25
--- /dev/null
+++ b/ICC_SMC_Neuro_Tvar_Explanation.txt
@@ -0,0 +1,274 @@
+Constants:
+1	T in component Environment {Temperature_units}
+2	T_exp in component Environment {Temperature_units}
+3	F in component Environment {F_units}
+4	R in component Environment {R_units}
+5	Q10Ca in component Environment {dimensionless}
+6	Q10K in component Environment {dimensionless}
+7	Q10Na in component Environment {dimensionless}
+8	Ca_o in component Environment {millimolar}
+9	Na_o in component Environment {millimolar}
+10	K_o in component Environment {millimolar}
+11	Cl_o in component Environment {millimolar}
+12	Cm_SM in component SM_Membrane {capacitance_units}
+13	Vol_SM in component SM_Membrane {volume_units}
+14	Na_i in component SM_Membrane {millimolar}
+15	K_i in component SM_Membrane {millimolar}
+16	g_couple in component I_couple {conductance_units}
+17	G_max_Ltype in component I_Ltype_SM {conductance_units}
+18	J_max_CaSR in component J_CaSR_SM {millimolar_per_millisecond}
+19	G_max_LVA in component I_LVA_SM {conductance_units}
+20	G_max_BK in component I_BK_SM {conductance_units}
+21	Ca50_0 in component active_tension {micromolar}
+22	h in component active_tension {dimensionless}
+23	T_max in component active_tension {kilopascals}
+24	f_e in component neural_input {dimensionless}
+25	f_i in component neural_input {dimensionless}
+26	ns_start in component neural_input {time_units_ICC}
+27	ns_end in component neural_input {time_units_ICC}
+28	f_max in component neural_input {Hertz}
+29	k_iAno1 in component neural_input {dimensionless}
+30	k_iNSCC in component neural_input {dimensionless}
+31	k_iCa50 in component neural_input {dimensionless}
+32	k_iSK in component neural_input {dimensionless}
+33	k_eIP3 in component neural_input {dimensionless}
+34	p_iICC in component neural_input {dimensionless}
+35	p_iSMC in component neural_input {dimensionless}
+36	p_e in component neural_input {dimensionless}
+37	n in component x_SK_SM {dimensionless}
+38	EC50 in component x_SK_SM {micromolar}
+39	G_max_SK in component I_SK_SM {conductance_units}
+40	G_max_bk in component I_bk_SM {conductance_units}
+41	G_max_kr_SM in component I_kr_SM {conductance_units}
+42	G_max_Na_SM in component I_Na_SM {conductance_units}
+43	G_max_ka_SM in component I_ka_SM {conductance_units}
+44	E_NSCC in component I_NSCC_SM {voltage_units}
+45	G_max_NSCC_SM in component I_NSCC_SM {conductance_units}
+46	Ach in component I_NSCC_SM {millimolar}
+47	p2m in component Parameters {dimensionless}
+48	umc2L in component Parameters {dimensionless}
+49	T in component Parameters {Temperature_units}
+50	F in component Parameters {F_units_ICC}
+51	R in component Parameters {R_units_ICC}
+52	z_ca in component Parameters {dimensionless}
+53	z_na in component Parameters {dimensionless}
+54	z_k in component Parameters {dimensionless}
+55	z_cl in component Parameters {dimensionless}
+56	Ca_o in component Parameters {micromolar}
+57	Cl_i in component Parameters {micromolar}
+58	Cl_o in component Parameters {micromolar}
+59	K_i in component Parameters {micromolar}
+60	K_o in component Parameters {micromolar}
+61	Na_i in component Parameters {micromolar}
+62	Na_o in component Parameters {micromolar}
+63	cellVol in component Volume {litre}
+64	cellPropER in component Volume {dimensionless}
+65	cellPropCyto in component Volume {dimensionless}
+66	E_NSCC in component Nernst {voltage_units}
+67	E_NSV in component Nernst {voltage_units}
+68	E_SOC in component Nernst {voltage_units}
+69	d_CaT_Vh in component d_CaT {voltage_units}
+70	d_CaT_S in component d_CaT {voltage_units}
+71	d_CaT_tau in component d_CaT {time_units_ICC}
+72	f_CaT_Vh in component f_CaT {voltage_units}
+73	f_CaT_S in component f_CaT {voltage_units}
+74	f_CaT_tau in component f_CaT {time_units_ICC}
+75	g_CaT in component I_CaT {conductance_units}
+76	SOC_h in component P_SOC {micromolar}
+77	SOC_n in component P_SOC {dimensionless}
+78	g_SOC in component I_SOC {conductance_units}
+79	SOCPropCa in component I_SOC {dimensionless}
+80	g_BK in component I_BK {conductance_units}
+81	stim_amp in component I_stim {current_units}
+82	stim_start in component I_stim {time_units_ICC}
+83	stim_PW in component I_stim {time_units_ICC}
+84	n_NSCC in component P_NSCC {dimensionless}
+85	Ca_NSCC in component P_NSCC {micromolar}
+86	g_NSCC in component I_NSCC {conductance_units}
+87	Dc in component d_Ano1 {micrometer2_per_time}
+88	Dm in component d_Ano1 {micrometer2_per_time}
+89	Bm in component d_Ano1 {micromolar}
+90	Km in component d_Ano1 {micromolar}
+91	kc in component d_Ano1 {Inverse_Voltage_ICC}
+92	nSOC in component d_Ano1 {dimensionless}
+93	d_Ano1_tscale in component d_Ano1 {dimensionless}
+94	colocalRadius in component d_Ano1 {micrometer}
+95	Ano1_n in component d_Ano1 {dimensionless}
+96	Ano1_Vh in component d_Ano1 {voltage_units}
+97	Ano1_s in component d_Ano1 {Inverse_Voltage_ICC}
+98	g_Ano1 in component I_Ano1 {conductance_units}
+99	Ke in component J_SERCA {micromolar}
+100	Ve in component J_SERCA {micromolar_per_second}
+101	fc in component J_SERCA {dimensionless}
+102	fe in component J_SERCA {dimensionless}
+103	k1 in component y_bind {per_micromolarsecond}
+104	k2 in component y_bind {per_micromolarsecond}
+105	k3 in component y_bind {per_micromolarsecond}
+106	k4 in component y_bind {per_micromolarsecond}
+107	k5 in component y_bind {per_micromolarsecond}
+108	k_1 in component y_bind {rate_constants_units_second}
+109	k_2 in component y_bind {rate_constants_units_second}
+110	k_3 in component y_bind {rate_constants_units_second}
+111	k_4 in component y_bind {rate_constants_units_second}
+112	k_5 in component y_bind {rate_constants_units_second}
+113	kipr in component J_IPR {rate_constants_units_second}
+114	Jer in component J_IPR {rate_constants_units_second}
+115	IP3_base in component J_IPR {micromolar}
+116	g_PMCA in component J_PMCA {dimensionless}
+117	J_PMCA_max in component J_PMCA {micromolar_per_second}
+118	K_PMCA in component J_PMCA {micromolar}
+119	n_PMCA in component J_PMCA {dimensionless}
+120	g_BNa in component I_BNa {conductance_units}
+121	Cm in component ICC_Membrane {capacitance_units_ICC}
+122	T_correction_Na in component Environment {dimensionless}
+123	T_correction_K in component Environment {dimensionless}
+124	T_correction_Ca in component Environment {dimensionless}
+125	T_correction_BK in component Environment {conductance_units}
+126	FoRT in component Environment {Inverse_Voltage_units}
+127	RToF in component Environment {voltage_units}
+128	K3 in component y_bind {micromolar}
+129	rach_NSCC_SM in component I_NSCC_SM {dimensionless}
+130	E_Cl in component Nernst {voltage_units}
+131	E_Na in component Nernst {voltage_units}
+132	E_K in component Nernst {voltage_units}
+133	volER in component Volume {litre}
+134	rad in component d_Ano1 {micrometer}
+135	K1 in component y_bind {micromolar}
+136	K2 in component y_bind {micromolar}
+137	K4 in component y_bind {micromolar}
+138	K5 in component y_bind {micromolar}
+139	tau_d_Ltype_SM in component d_Ltype_SM {time_units}
+140	tau_f_Ltype_SM in component f_Ltype_SM {time_units}
+141	tau_f_ca_Ltype_SM in component f_ca_Ltype_SM {time_units}
+142	tau_d_LVA_SM in component d_LVA_SM {time_units}
+143	E_K in component I_BK_SM {voltage_units}
+144	E_K in component I_SK_SM {voltage_units}
+145	E_K in component I_bk_SM {voltage_units}
+146	tau_xr1_SM in component xr1_SM {time_units}
+147	E_K in component I_kr_SM {voltage_units}
+148	E_Na in component I_Na_SM {voltage_units}
+149	tau_xa2_SM in component xa2_SM {time_units}
+150	E_K in component I_ka_SM {voltage_units}
+151	volCyto in component Volume {litre}
+
+Algebraic variables:
+1	d_inf_Ltype_SM in component d_Ltype_SM {dimensionless}
+2	f_inf_Ltype_SM in component f_Ltype_SM {dimensionless}
+3	f_ca_inf_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+4	d_inf_LVA_SM in component d_LVA_SM {dimensionless}
+5	f_inf_LVA_SM in component f_LVA_SM {dimensionless}
+6	I_couple in component I_couple {current_units}
+7	x_SK_inf_SM in component x_SK_SM {dimensionless}
+8	xr1_inf_SM in component xr1_SM {dimensionless}
+9	xr2_inf_SM in component xr2_SM {dimensionless}
+10	m_inf_Na in component m_Na_SM {dimensionless}
+11	h_inf_Na in component h_Na_SM {dimensionless}
+12	xa1_inf_SM in component xa1_SM {dimensionless}
+13	xa2_inf_SM in component xa2_SM {dimensionless}
+14	m_inf_NSCC_SM in component m_NSCC_SM {dimensionless}
+15	w_iICC in component neural_input {dimensionless}
+16	d_CaT_inf in component d_CaT {dimensionless}
+17	f_CaT_inf in component f_CaT {dimensionless}
+18	tau_f_LVA_SM in component f_LVA_SM {time_units}
+19	E_Ca in component I_Ltype_SM {voltage_units}
+20	tau_x_SK_SM in component x_SK_SM {time_units}
+21	tau_xr2_SM in component xr2_SM {time_units}
+22	tau_m_Na in component m_Na_SM {time_units}
+23	tau_h_Na in component h_Na_SM {time_units}
+24	tau_xa1_SM in component xa1_SM {time_units}
+25	tau_m_NSCC_SM in component m_NSCC_SM {time_units}
+26	w_e in component neural_input {dimensionless}
+27	I_Ltype_SM in component I_Ltype_SM {current_units}
+28	S_iAno1 in component neural_input {dimensionless}
+29	J_CaSR_SM in component J_CaSR_SM {millimolar_per_millisecond}
+30	S_iNSCC in component neural_input {dimensionless}
+31	E_Ca in component I_LVA_SM {voltage_units}
+32	S_eIP3 in component neural_input {dimensionless}
+33	I_LVA_SM in component I_LVA_SM {current_units}
+34	E_Ca in component Nernst {voltage_units}
+35	d_BK_SM in component d_BK_SM {dimensionless}
+36	I_CaT in component I_CaT {current_units}
+37	I_BK_SM in component I_BK_SM {current_units}
+38	J_CaT in component I_CaT {micromolar_per_second}
+39	w_iSMC in component neural_input {dimensionless}
+40	P_SOC in component P_SOC {dimensionless}
+41	S_iSK in component neural_input {dimensionless}
+42	S_iCa50 in component neural_input {dimensionless}
+43	I_SOC in component I_SOC {current_units}
+44	I_SK_SM in component I_SK_SM {current_units}
+45	Ca50 in component active_tension {micromolar}
+46	J_SOC in component I_SOC {micromolar_per_second}
+47	I_bk_SM in component I_bk_SM {current_units}
+48	T in component active_tension {kilopascals}
+49	I_BK in component I_BK {current_units}
+50	J_SERCA in component J_SERCA {micromolar_per_second}
+51	I_kr_SM in component I_kr_SM {current_units}
+52	I_stim in component I_stim {current_units}
+53	IP3 in component J_IPR {micromolar}
+54	I_Na_SM in component I_Na_SM {current_units}
+55	P_NSCC in component P_NSCC {dimensionless}
+56	Pipr in component J_IPR {dimensionless}
+57	phi1 in component y_bind {rate_constants_units_second}
+58	I_ka_SM in component I_ka_SM {current_units}
+59	I_NSCC in component I_NSCC {current_units}
+60	J_IPR in component J_IPR {micromolar_per_second}
+61	phi2 in component y_bind {rate_constants_units_second}
+62	f_ca_NSCC_SM in component I_NSCC_SM {dimensionless}
+63	mouthCa in component d_Ano1 {micromolar_per_second}
+64	J_PMCA in component J_PMCA {micromolar_per_second}
+65	I_NSCC_SM in component I_NSCC_SM {current_units}
+66	localCa in component d_Ano1 {micromolar}
+67	d_Ano1_tau in component d_Ano1 {time_units_ICC}
+68	d_Ano1_inf in component d_Ano1 {dimensionless}
+69	h_Ano1 in component d_Ano1 {dimensionless}
+70	I_Ano1 in component I_Ano1 {current_units}
+71	I_BNa in component I_BNa {current_units}
+72	Iion in component ICC_Membrane {current_units}
+
+State variables:
+1	Vm_SM in component SM_Membrane {voltage_units}
+2	Ca_i in component SM_Membrane {millimolar}
+3	Vm in component ICC_Membrane {voltage_units}
+4	d_Ltype_SM in component d_Ltype_SM {dimensionless}
+5	f_Ltype_SM in component f_Ltype_SM {dimensionless}
+6	f_ca_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+7	d_LVA_SM in component d_LVA_SM {dimensionless}
+8	f_LVA_SM in component f_LVA_SM {dimensionless}
+9	x_SK_SM in component x_SK_SM {dimensionless}
+10	xr1_SM in component xr1_SM {dimensionless}
+11	xr2_SM in component xr2_SM {dimensionless}
+12	m_Na_SM in component m_Na_SM {dimensionless}
+13	h_Na_SM in component h_Na_SM {dimensionless}
+14	xa1_SM in component xa1_SM {dimensionless}
+15	xa2_SM in component xa2_SM {dimensionless}
+16	m_NSCC_SM in component m_NSCC_SM {dimensionless}
+17	Ca_i in component ICC_Membrane {micromolar}
+18	d_CaT in component d_CaT {dimensionless}
+19	f_CaT in component f_CaT {dimensionless}
+20	Ca_er in component Ca_er {micromolar}
+21	d_Ano1 in component d_Ano1 {dimensionless}
+22	y in component y_bind {dimensionless}
+
+Rate variables:
+1	d/dt Vm_SM in component SM_Membrane {voltage_units}
+2	d/dt Ca_i in component SM_Membrane {millimolar}
+3	d/dt Vm in component ICC_Membrane {voltage_units}
+4	d/dt d_Ltype_SM in component d_Ltype_SM {dimensionless}
+5	d/dt f_Ltype_SM in component f_Ltype_SM {dimensionless}
+6	d/dt f_ca_Ltype_SM in component f_ca_Ltype_SM {dimensionless}
+7	d/dt d_LVA_SM in component d_LVA_SM {dimensionless}
+8	d/dt f_LVA_SM in component f_LVA_SM {dimensionless}
+9	d/dt x_SK_SM in component x_SK_SM {dimensionless}
+10	d/dt xr1_SM in component xr1_SM {dimensionless}
+11	d/dt xr2_SM in component xr2_SM {dimensionless}
+12	d/dt m_Na_SM in component m_Na_SM {dimensionless}
+13	d/dt h_Na_SM in component h_Na_SM {dimensionless}
+14	d/dt xa1_SM in component xa1_SM {dimensionless}
+15	d/dt xa2_SM in component xa2_SM {dimensionless}
+16	d/dt m_NSCC_SM in component m_NSCC_SM {dimensionless}
+17	d/dt Ca_i in component ICC_Membrane {micromolar}
+18	d/dt d_CaT in component d_CaT {dimensionless}
+19	d/dt f_CaT in component f_CaT {dimensionless}
+20	d/dt Ca_er in component Ca_er {micromolar}
+21	d/dt d_Ano1 in component d_Ano1 {dimensionless}
+22	d/dt y in component y_bind {dimensionless}
\ No newline at end of file
diff --git a/README.md b/README.md
index 2d1673d..af905d0 100644
--- a/README.md
+++ b/README.md
@@ -2,23 +2,28 @@
 
 Reproduces data from [1].
 
-Run scripts in the sequence shown below to reproduce figures - figures are saved in generated_fig.
+Run scripts in the sequence shown below to reproduce data and figures - figures are saved in generated_fig. 
+Outputs for scripts 1-4 are provided, and scripts can be run starting at 5 to generate figures without re-generating data outputs. 
+Note that Figure 1 is a model illustration, not a simulation result. 
 
 ### Data generation scripts
 1. Parameter optimisation procedure step 1: parameter_optimisation/optim_ICC.m
 2. Parameter optimisation procedure step 2: parameter_optimisation/optim_SMC.m
-3. Sensitivity analysis sampling: SA1_sampling.py
-4. Sensitivity analysis parallel simulation: parallel_SA_simulate.m
+3. Sensitivity analysis sampling: sensitivity_analysis/SA1_sampling.py
+4. Sensitivity analysis parallel simulation: sensitivity_analysis/parallel_SA_simulate.m
 
 ### Plotting scripts
-6. Figure 2A: baseline_plotter.m 
-7. Figure 2B: aligned_event_plot.m
-8. Figure 3: parameter_sweep_1D_combinedPlot.m
-9. Figure 4: optimisation_results.m
-10. Figure 5A: dosage_sweep_plot.m
-11. Figure 5B: stimulation_plotter.m
-12. Figure 6: SA2_analysis_plot.py
+5. Figure 2A: figure_generation/baseline_plotter.m (this script also outputs quantified values to the MATLAB console)
+6. Figure 2B: figure_generation/aligned_event_plot.m
+7. Figure 3: figure_generation/parameter_sweep_1D_combinedPlot.m
+8. Figure 4: figure_generation/optimisation_results.m (this script also outputs exact fitted values to the MATLAB console)
+9. Figure 5A-B: figure_generation/dosage_sweep_plot.m
+10. Figure 5C: figure_generation/stimulation_plotter.m
+11. Figure 6: sensitivity_analysis/SA2_analysis_plot.py
 
-Note that Figure 1 is a model illustration, not a simulation result. 
+### Dependencies
+The following MATLAB toolboxes are required to run the MATLAB scripts as is: Statistics, Signal Processing, Parallel Computing, Optimization.
+The following Python libraries are required to run the sensitivity analysis Python scripts as is: numpy, matplotlib, SALib. These can be installed via pip from PyPI.
 
-[1] Athavale, O. N., Avci, R., Clark, A. R., Di Natale, M. R., Wang, X., Furness, J. B., Liu, Z., Cheng, L. K., & Du, P. A mathematical model of the neural regulation of slow waves and phasic contractions in the distal stomach. Unpublished.
+### References
+[1] Athavale, O. N., Avci, R., Clark, A. R., Di Natale, M. R., Wang, X., Furness, J. B., Liu, Z., Cheng, L. K., & Du, P. Neural regulation of slow waves and phasic contractions in the distal stomach: A mathematical model Unpublished.
diff --git a/data/optim_ICC_data.mat b/data/optim_ICC_data.mat
new file mode 100644
index 0000000..8f43beb
Binary files /dev/null and b/data/optim_ICC_data.mat differ
diff --git a/data/optim_SMC_data.mat b/data/optim_SMC_data.mat
new file mode 100644
index 0000000..7409d3e
Binary files /dev/null and b/data/optim_SMC_data.mat differ
diff --git a/figure_generation/aligned_event_plot.m b/figure_generation/aligned_event_plot.m
index c0d6897..31aefdf 100644
--- a/figure_generation/aligned_event_plot.m
+++ b/figure_generation/aligned_event_plot.m
@@ -10,7 +10,7 @@ names = {'k_{iAno1}', 'k_{iNSCC}', 'k_{iCa50}', 'k_{iSK}', 'k_{eIP3}', 'p_{iICC}
 n = 5; % number of equally spaced values in the sweep
 effect_var = [1, 2]; % which k parameter(s) to sweep
 duration = [0 120000];
-weights = [3.149566984343386, 1.178185077905521, 1]; % these only matter if x_i or x_e are not 1 or 0.
+weights = [3.149566984343386, 1.178185077905521, 1]; % these only matter if f_i or f_e are not 1 or 0.
 effect_vals = zeros(n, 5);
 effect_vals(:, effect_var(1)) = linspace(0, 1, n);
 
@@ -18,8 +18,8 @@ if length(effect_var) > 1
     effect_vals(:, effect_var(2)) = effect_vals(:, effect_var(1));
 end
 
-x_e = 0;
-x_i = 1;
+f_e = 0;
+f_i = 10;
 
 h = figure('Units', 'centimeters');
 set(h, 'position', [18,18,7,11] );
@@ -31,7 +31,7 @@ ax(2) = subplot(2,1,2);
 colororder([1 1 1] .* linspace(0, 0.75, n)')
 
 for i = 1:n
-    [t0, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, x_e, x_i, duration);
+    [t0, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, f_e, f_i, duration);
     [tT, T] = start_alignment(t0, a(:, 7), [84000, 120000]);
     [tICC, Vm_ICC] = start_alignment(t0, s(:,3), [84000, 120000]) ;
     [tSMC, Vm_SMC] = start_alignment(t0, s(:,1), [84000, 120000]) ;
diff --git a/figure_generation/baseline_plotter.m b/figure_generation/baseline_plotter.m
index 7ba9dd7..35a074f 100644
--- a/figure_generation/baseline_plotter.m
+++ b/figure_generation/baseline_plotter.m
@@ -12,7 +12,29 @@ T = a(:, 7);
 Vm_ICC = s(:,3); 
 Vm_SMC = s(:,1); 
 
-% plot VmICC, VmSMC and tension on three subplots
+%% quantify variation over time
+dat = {'Vm_ICC', 'Vm_SMC', 'T'};
+
+fprintf('%10s: %10s (%10s %10s) | %10s (%10s %10s) | %10s (%10s %10s) |\n', 'VarName', 'Mean peak', 'Min peak', 'Max peak',  'Mean inter', 'Min inter', 'Max inter',  'Mean RMP', 'Min RMP', 'Max RMP');
+
+for i = 1:length(dat)
+    currDat = eval(dat{i});
+    [pk,loc] = findpeaks(currDat, 'MinPeakProminence', 10);
+    pk = pk(2:end);
+    loc = loc(2:end);
+    
+    mean_peak = mean(pk);
+    mean_interval = mean(diff(t(loc)));
+    mean_RMP = mean(currDat(loc(1:end-1)+round(diff(loc)./2)));
+    
+    range_peak = [min(pk), max(pk)];
+    range_interval = [min(diff(t(loc))), max(diff(t(loc)))];
+    range_RMP = [min(currDat(loc(1:end-1)+round(diff(loc)./2))), max(currDat(loc(1:end-1)+round(diff(loc)./2)))];
+    fprintf('%10s: %10.4f (%10.4f %10.4f) | %10.4f (%10.4f %10.4f) | %10.4f (%10.4f %10.4f) |\n', dat{i}, mean_peak, range_peak, mean_interval, range_interval, mean_RMP, range_RMP);
+    
+end
+
+%% plot VmICC, VmSMC and tension on three subplots
 h = figure('Units', 'centimeters');
 set(h, 'position', [18,18,18,10] );
 
diff --git a/figure_generation/dosage_sweep_plot.m b/figure_generation/dosage_sweep_plot.m
index a59ca5a..5996cb1 100644
--- a/figure_generation/dosage_sweep_plot.m
+++ b/figure_generation/dosage_sweep_plot.m
@@ -1,28 +1,28 @@
 %%% dosage_sweep_plot.m
 %%% Omkar N. Athavale, May 2023
-%%% Plot sweeps across x_i and x_e with fixed parameter
+%%% Plot sweeps across f_i and f_e with fixed parameter
 
 % --- INPUTS ---
 n = 21; % number of points to sweep (all variables same)
 % --------------
 
 % parameter info
-names = {'x_i', 'x_e', 'x_i & x_e'};
+names = {'f_i', 'f_e', 'f_i & f_e'};
 effect_vals = [0.320920220620083,0.776439073613402,0.399007024312299,0.302229718784617, 1];
 weighting = [3.149932963402147, 0.121722979829497, 5]; 
 
-x_e = [zeros(1, n); linspace(0, 1, n); linspace(0, 1, n)]';
-x_i = [linspace(0, 1, n); zeros(1, n); linspace(0, 1, n)]';
+f_e = [zeros(1, n); linspace(0, 10, n); linspace(0, 10, n)]';
+f_i = [linspace(0, 10, n); zeros(1, n); linspace(0, 10, n)]';
 
 % initialise results
-f = zeros(n, size(x_e, 2));
-peak_p = zeros(n, size(x_e, 2));
-plateau_p = zeros(n, size(x_e, 2));
+f = zeros(n, size(f_e, 2));
+peak_p = zeros(n, size(f_e, 2));
+plateau_p = zeros(n, size(f_e, 2));
 
-for k = 1:size(x_e, 2)
+for k = 1:size(f_e, 2)
     % run simulations
     for i = 1:n
-        [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, x_e(i, k), x_i(i, k));
+        [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, f_e(i, k), f_i(i, k));
         T = a(:, 7);
         Vm_ICC = s(:,3);
         Vm_SMC = s(:,1);
@@ -33,8 +33,8 @@ for k = 1:size(x_e, 2)
     save(sprintf('../data/dosage_sweep_%d_%s', n, datestr(datetime, 'yymmddHHMMSS')))
 end
 
-combo_x(:, :, 1) = x_e;
-combo_x(:, :, 2) =  x_i;
+combo_x(:, :, 1) = f_e;
+combo_x(:, :, 2) =  f_i;
 plot_x = max(combo_x, [], 3);
 colours = [0 0 0; 0.4 0.4 0.4; 0.7 0.7 0.7];
 
@@ -47,7 +47,7 @@ plot(plot_x, f, 'LineWidth', 1.5);
 xlim([0, 1])
 ylim([0, 7])
 ylabel('Frequency (cpm)')
-xlabel(sprintf('Stimulation dosage'));
+xlabel(sprintf('Stimulation frequency (Hz)'));
 
 ax(2) = subplot(2,1,1);
 colororder(colours)
diff --git a/figure_generation/optimisation_results.m b/figure_generation/optimisation_results.m
index 5df20a6..957f3f3 100644
--- a/figure_generation/optimisation_results.m
+++ b/figure_generation/optimisation_results.m
@@ -5,18 +5,16 @@
 
 % ---INPUTS---
 % data inputs
-smc_data_path = '../data/optim_SMC_230504200253';
-icc_data_path = '../data/optim_ICC_230502001619';
+smc_data_path = '../data/optim_SMC_data';
+icc_data_path = '../data/optim_ICC_data';
 
 % plot options
 histogram_edges = 0:0.02:1;
 y_limits = [0 1];
 save_plot = true;
 
-k_iAno1_cluster_division = 0.2;
-
 % ------------
-addpath(genpath('../'));
+addpath(genpath('../'))
 
 % load and combine data
 icc = load(icc_data_path);
@@ -94,6 +92,15 @@ median(sol),...
 
 fprintf('\n')
 
+% define cluster threshold
+% k_iAno1_cluster_division = 0.2;
+
+[z, y] = ksdensity(sort(icc.sol(:, 1)), 'bandwidth', 0.05);
+figure('Name', 'Kernel desnity estimate to select cluster threshold'); 
+plot(y, z)
+
+k_iAno1_cluster_division = input('Define cluster threshold from probability estimate plot: ');
+
 % cluster masks
 low_mask = icc.sol(:, 1)<k_iAno1_cluster_division & icc.sol(:,1)< 0.38 & icc.sol(:, 3)>3;
 high_mask = icc.sol(:, 1)>k_iAno1_cluster_division & icc.sol(:,1)< 0.38 & icc.sol(:, 3)>3;
diff --git a/figure_generation/parameter_sweep.m b/figure_generation/parameter_sweep.m
index 4f89484..896be10 100644
--- a/figure_generation/parameter_sweep.m
+++ b/figure_generation/parameter_sweep.m
@@ -6,8 +6,8 @@
 sweep_var = [1]; % variable index to sweep (max 2)
 sweep_domain = [0 1]; % range to sweep (all variables same)
 n = 2; % number of points to sweep (all variables same)
-x_i = ones(1, n);
-x_e = zeros(1, n);
+f_i = 10.*ones(1, n);
+f_e = zeros(1, n);
 % --------------
 
 names = {'k_{iAno1}', 'k_{iNSCC}', 'k_{iCa50}', 'k_{iSK}', 'k_{eIP3}', 'p_{iICC}', 'p_{iSMC}', 'p_{e}',};
@@ -41,7 +41,7 @@ plateau_p = zeros(n, 1);
 
 % run simulations
 for i = 1:n
-    [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, x_e(i), x_i(i));
+    [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, f_e(i), f_i(i));
     T = a(:, 7);
     Vm_ICC = s(:,3);
     Vm_SMC = s(:,1);
diff --git a/figure_generation/parameter_sweep_1D_combinedPlot.m b/figure_generation/parameter_sweep_1D_combinedPlot.m
index 5c8f6ef..e8eaa81 100644
--- a/figure_generation/parameter_sweep_1D_combinedPlot.m
+++ b/figure_generation/parameter_sweep_1D_combinedPlot.m
@@ -3,21 +3,22 @@
 %%% Plot sweeps across k_xXXXX parameters from 0 - 1
 
 % --- INPUTS ---
-var_seq = 5; % variable index to sweep (max 2)
+var_seq = 1:5; % variable index to sweep (max 2)
 n = 51; % number of points to sweep (all variables same)
+non_sweeped_values = [0.329454438664630,0.773384113014197, 0.396950911630671, 0.303891480696183, 1]; % [kiAno1, kiNSCC, kiCa50, kiSK, keIP3]. Fitted: [0.]. Zeros: [0 0 0 0 0]
 % --------------
 
 % parameter info
 names = {'k_{iAno1}', 'k_{iNSCC}', 'k_{iCa50}', 'k_{iSK}', 'k_{eIP3}', 'p_{iICC}', 'p_{iSMC}', 'p_{e}',};
 sweep_domain = repmat([0; 1], 1, 5); % range to sweep one column per variable
-x_i = ones(1, 5);
-x_e = ones(1, 5);
+f_i = 10.*ones(1, 5);
+f_e = 10.*ones(1, 5);
 
 for k = 1:length(var_seq)
     sweep_var = var_seq(k); % select sweep variable
     
     weights = [3.149566984343386, 1.178185077905521, 5]; % these make no difference here, w_i=w_e=1
-    effect_vals = zeros(n, 5);
+    effect_vals = non_sweeped_values.*ones(n, 5);
     effect_vals(:, sweep_var) = linspace(sweep_domain(1, sweep_var), sweep_domain(2, sweep_var), n);
     
     % initialise results
@@ -26,8 +27,8 @@ for k = 1:length(var_seq)
     plateau_p = zeros(n, 1);
     
     % run simulations
-    for i = 1:n
-        [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, x_e(sweep_var), x_i(sweep_var));
+    parfor i = 1:n
+        [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weights, f_e(sweep_var), f_i(sweep_var));
         T = a(:, 7);
         Vm_ICC = s(:,3);
         Vm_SMC = s(:,1);
@@ -47,12 +48,12 @@ for i = 1:nF
 end
 
 % offsets set to space out traces, about 1.5x initial value
-freq_offset = 4;        %cpm
-tension_offset = 65;    %kPa
+freq_offset = 0;        %cpm
+tension_offset = 0;    %kPa
 
 % figure generation
 h = figure('Units', 'centimeters');
-set(h, 'position', [18,18,9,11] );
+set(h, 'position', [10,10,9,11] );
 
 % plot frequency
 ax(1) = subplot(2,1,2);
@@ -77,38 +78,31 @@ end
 % Axis 1 (frequency, bottom axis)
 axes(ax(1));
 xlim([min(d{i}.effect_vals(:, d{i}.sweep_var)), max(d{i}.effect_vals(:, d{i}.sweep_var))])
-ylim([-20, 3])
+ylim([0 6])
 ylabel('Frequency (cpm)')
-xlabel(sprintf('Scaling constants'));
-[~, sorterInd] = sort(f_ends_number(:, 1));
-set(ax(1).YAxis, 'TickLabel',fliplr(d{i}.names(1:5)))
-set(ax(1), 'XTick', [0 0.5 1], 'YTick',sort(f_ends_number(:, 1)),'YTickLabelMode', 'manual')
+xlabel(sprintf('Parameter value'));
 
+set(ax(1), 'XTick', [0 0.5 1]);
 box off
 % add end labels
-[~, sorterInd] = sort(f_ends_number(:, 2));
-tmp = axes('Position', ax(1).Position, 'xlim', ax(1).XLim, 'XTick', [], 'ylim', ax(1).YLim, 'color', 'none','YTickLabelMode', 'manual', 'YTick',sort(f_ends_number(:, 1)), 'YAxisLocation', 'right');
-set(tmp.YAxis, 'TickLabel',sprintf('%+.0f%%\n', (round(f_ends(sorterInd, 2)./f_ends(sorterInd, 1), 2)-1).*100))
-box off
+for i = 1:nF
+    text(1.01, f_ends_number(i, 2), d{i}.names(i))
+end
 
 % Axis 2 (tension, top axis)
 axes(ax(2));
 xlim([min(d{i}.effect_vals(:, d{i}.sweep_var)), max(d{i}.effect_vals(:, d{i}.sweep_var))])
-ylim([-300 3])
+ylim([0 50])
 
 ylabel('Tension (kPa)')
 
-[~, sorterInd] = sort(plateau_ends_number(:, 1));
-set(ax(2).YAxis, 'TickLabel',fliplr(d{i}.names(1:5)))
-set(ax(2), 'XTickLabels', {}, 'YTick',sort(plateau_ends_number(:, 1)),'YTickLabelMode', 'manual')
+set(ax(2), 'XTickLabels', {});
 
 box off
 % add end labels
-[~, sorterInd] = sort(plateau_ends_number(:, 2));
-tmp = axes('Position', ax(2).Position, 'XTick', [], 'xlim', ax(2).XLim, 'ylim', ax(2).YLim, 'color', 'none','YTickLabelMode', 'manual', 'YTick',sort(plateau_ends_number(:, 1)), 'YAxisLocation', 'right');
-set(tmp.YAxis, 'TickLabel',sprintf('%+.0f%%\n', (round(plateau_ends(sorterInd, 2)./plateau_ends(sorterInd, 1), 2)-1).*100))
-
-box off
+for i = 1:nF
+    text(1.01, plateau_ends_number(i, 2), d{i}.names(i))
+end
 
 set(h, 'PaperPositionMode', 'auto')
 saveas(h, sprintf('../generated_fig/1D_multiSweeps_%d_%d_%s', freq_offset, tension_offset, datestr(datetime, 'yymmddHHMMSS')), 'svg')
diff --git a/figure_generation/stimulation_plotter.m b/figure_generation/stimulation_plotter.m
index 99457d9..c125d8b 100644
--- a/figure_generation/stimulation_plotter.m
+++ b/figure_generation/stimulation_plotter.m
@@ -5,9 +5,9 @@
 addpath('../matlab_common/')
 
 % run simulations with stim for 60 seconds
-[t01, T01, Vm_ICC01, Vm_SMC01] = run_sim_stim(0, 1);
-[t10, T10, Vm_ICC10, Vm_SMC10] = run_sim_stim(1, 0);
-[t11, T11, Vm_ICC11, Vm_SMC11] = run_sim_stim(1, 1);
+[t01, T01, Vm_ICC01, Vm_SMC01] = run_sim_stim(0, 10);
+[t10, T10, Vm_ICC10, Vm_SMC10] = run_sim_stim(10, 0);
+[t11, T11, Vm_ICC11, Vm_SMC11] = run_sim_stim(10, 10);
 
 % plot VmICC and tension for each stimulation
 h = figure('Units', 'centimeters');
@@ -70,10 +70,10 @@ xlabel('Time (s)');
 set(h, 'PaperPositionMode', 'auto')
 saveas(h, sprintf('../generated_fig/stimulation_varying_%s', datestr(datetime, 'yymmddHHMMSS')), 'svg')
 
-function [t, T, Vm_ICC, Vm_SMC] = run_sim_stim(x_e, x_i)
+function [t, T, Vm_ICC, Vm_SMC] = run_sim_stim(f_e, f_i)
 
 % run simulation
-[t, s, a] = ICC_SMC_Neuro_Tvar(x_e, x_i);
+[t, s, a] = ICC_SMC_Neuro_Tvar(f_e, f_i);
 
 T = a(:, 48);
 Vm_ICC = s(:,3); 
diff --git a/figure_generation/sweep_2D_plots.m b/figure_generation/sweep_2D_plots.m
index 42e9368..26371fe 100644
--- a/figure_generation/sweep_2D_plots.m
+++ b/figure_generation/sweep_2D_plots.m
@@ -1,7 +1,7 @@
 %%% sweep_2D_plots.m
 %%% Omkar N. Athavale, May 2023
 %%% Plot results from 1D or 2D parameter sweeps
-%%% Run the data load section first, then the seciton of the figure to plot
+%%% Run the data load section first, then the section of the figure to plot
 
 %% Data load
 data_path = '../data/2DSweep_230429201029';
diff --git a/matlab_common/ICC_SMC_Neuro.m b/matlab_common/ICC_SMC_Neuro.m
index 3eec571..97f655f 100644
--- a/matlab_common/ICC_SMC_Neuro.m
+++ b/matlab_common/ICC_SMC_Neuro.m
@@ -1,46 +1,46 @@
 
-function [VOI, STATES, ALGEBRAIC, CONSTANTS] = ICC_SMC_Neuro(e, w, x_e, x_i, duration)
-   % Solves the combined ICC and SMC model with neurotransmission
+function [VOI, STATES, ALGEBRAIC, CONSTANTS] = ICC_SMC_Neuro(e, w, f_e, f_i, duration)
+   % Solves the combined ICC and SMC model with neurotransmission. See ICC_SMC_Neuro_Explanation.txt for a key to variable names. 
    % INPUTS
    % e: 1 x 5 array of effector component weighting values in sequence
    %    [kiAno1, kiNSCC, kiCa50, kiSK, keIP3]. Only keIP3 may  e > 1. All
    %    must be > 0.
    % w: 1 x 3 array of weighting parameter values in sequence 
    %    [piICC, piSMC, pe]. Should not be zero. 
-   % x_e: excitatory stimulation dosage in domain [0, 1]
-   % x_i: inhibitory stimulation dosage in domain [0, 1]
+   % f_e: excitatory stimulation frequency in domain [0, 10]
+   % f_i: inhibitory stimulation frequency in domain [0, 10]
    % duration (OPTIONAL): two element array of start and end time for
    %                      ode15s solver. Default [0 180000].
    %
    % OUTPUTS
    % VOI: n x 1 array with variable of integration for n steps (time in 
    %      milliseconds)
-   % STATES: n x m array with state variable values at n steps for m (31)
+   % STATES: n x m array with state variable values at n steps for m (22)
    %         variables (see create legends function for variable sequence and units)
    % ALGEBRAIC: n x o array with algebraic variable values at n steps for o
-   %            (82) variables (see create legends function for variable sequence and units)
-   % CONSTANTS: 1 x p array with constant variable values for p (199)
+   %            (61) variables (see create legends function for variable sequence and units)
+   % CONSTANTS: 1 x p array with constant variable values for p (160)
    %            variables (see create legends function for variable sequence and units)
    if nargin < 5
         duration = [0 180000];
     end
-   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(e, w, x_e, x_i, duration);
+   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(e, w, f_e, f_i, duration);
 end
 
 function [algebraicVariableCount] = getAlgebraicVariableCount()
     % Used later when setting a global variable with the number of algebraic variables.
     % Note: This is not the "main method".
-    algebraicVariableCount =82;
+    algebraicVariableCount =61;
 end
-% There are a total of 31 entries in each of the rate and state variable arrays.
-% There are a total of 199 entries in the constant variable array.
+% There are a total of 22 entries in each of the rate and state variable arrays.
+% There are a total of 160 entries in the constant variable array.
 %
 
-function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(e, w, x_e, x_i, duration)
+function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(e, w, f_e, f_i, duration);
     % Create ALGEBRAIC of correct size
     global algebraicVariableCount;  algebraicVariableCount = getAlgebraicVariableCount();
     % Initialise constants and state variables
-    [INIT_STATES, CONSTANTS] = initConsts(e, w, x_e, x_i);
+    [INIT_STATES, CONSTANTS] = initConsts(e, w, f_e, f_i);
 
     % Set timespan to solve over
     tspan = duration;
@@ -54,14 +54,6 @@ function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(e, w, x_e, x_i, durati
     % Compute algebraic variables
     [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS);
     ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI);
-
-    % Plot state variables against variable of integration
-%     [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends();
-%     figure();
-%     plot(VOI, STATES);
-%     xlabel(LEGEND_VOI);
-%     l = legend(LEGEND_STATES);
-%     set(l,'Interpreter','none');
 end
 
 function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends()
@@ -78,307 +70,238 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_CONSTANTS(:,9) = strpad('Na_o in component Environment (millimolar)');
     LEGEND_CONSTANTS(:,10) = strpad('K_o in component Environment (millimolar)');
     LEGEND_CONSTANTS(:,11) = strpad('Cl_o in component Environment (millimolar)');
-    LEGEND_CONSTANTS(:,159) = strpad('T_correction_Na in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,160) = strpad('T_correction_K in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,161) = strpad('T_correction_Ca in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,162) = strpad('T_correction_BK in component Environment (conductance_units)');
-    LEGEND_CONSTANTS(:,163) = strpad('FoRT in component Environment (Inverse_Voltage_units)');
-    LEGEND_CONSTANTS(:,164) = strpad('RToF in component Environment (voltage_units)');
+    LEGEND_CONSTANTS(:,120) = strpad('T_correction_Na in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,121) = strpad('T_correction_K in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,122) = strpad('T_correction_Ca in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,123) = strpad('T_correction_BK in component Environment (conductance_units)');
+    LEGEND_CONSTANTS(:,124) = strpad('FoRT in component Environment (Inverse_Voltage_units)');
+    LEGEND_CONSTANTS(:,125) = strpad('RToF in component Environment (voltage_units)');
     LEGEND_CONSTANTS(:,12) = strpad('Cm_SM in component SM_Membrane (capacitance_units)');
     LEGEND_CONSTANTS(:,13) = strpad('Vol_SM in component SM_Membrane (volume_units)');
     LEGEND_STATES(:,1) = strpad('Vm_SM in component SM_Membrane (voltage_units)');
     LEGEND_STATES(:,2) = strpad('Ca_i in component SM_Membrane (millimolar)');
     LEGEND_CONSTANTS(:,14) = strpad('Na_i in component SM_Membrane (millimolar)');
     LEGEND_CONSTANTS(:,15) = strpad('K_i in component SM_Membrane (millimolar)');
-    LEGEND_ALGEBRAIC(:,58) = strpad('I_Na_SM in component I_Na_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,40) = strpad('I_Ltype_SM in component I_Ltype_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,46) = strpad('I_LVA_SM in component I_LVA_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,56) = strpad('I_kr_SM in component I_kr_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,60) = strpad('I_ka_SM in component I_ka_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,50) = strpad('I_BK_SM in component I_BK_SM (current_units)');
-    LEGEND_CONSTANTS(:,178) = strpad('S_iSK in component neural_input (dimensionless)');
-    LEGEND_ALGEBRAIC(:,52) = strpad('I_SK_SM in component I_SK_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,65) = strpad('I_NSCC_SM in component I_NSCC_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,54) = strpad('I_bk_SM in component I_bk_SM (current_units)');
-    LEGEND_ALGEBRAIC(:,42) = strpad('J_CaSR_SM in component J_CaSR_SM (millimolar_per_millisecond)');
+    LEGEND_ALGEBRAIC(:,51) = strpad('I_Na_SM in component I_Na_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,29) = strpad('I_Ltype_SM in component I_Ltype_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,35) = strpad('I_LVA_SM in component I_LVA_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,49) = strpad('I_kr_SM in component I_kr_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,53) = strpad('I_ka_SM in component I_ka_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,40) = strpad('I_BK_SM in component I_BK_SM (current_units)');
+    LEGEND_CONSTANTS(:,139) = strpad('S_iSK in component neural_input (dimensionless)');
+    LEGEND_ALGEBRAIC(:,43) = strpad('I_SK_SM in component I_SK_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,57) = strpad('I_NSCC_SM in component I_NSCC_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,46) = strpad('I_bk_SM in component I_bk_SM (current_units)');
+    LEGEND_ALGEBRAIC(:,31) = strpad('J_CaSR_SM in component J_CaSR_SM (millimolar_per_millisecond)');
     LEGEND_ALGEBRAIC(:,1) = strpad('I_couple in component I_couple (current_units)');
     LEGEND_CONSTANTS(:,16) = strpad('g_couple in component I_couple (conductance_units)');
     LEGEND_STATES(:,3) = strpad('Vm in component ICC_Membrane (voltage_units)');
     LEGEND_ALGEBRAIC(:,2) = strpad('d_inf_Ltype_SM in component d_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,179) = strpad('tau_d_Ltype_SM in component d_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,140) = strpad('tau_d_Ltype_SM in component d_Ltype_SM (time_units)');
     LEGEND_STATES(:,4) = strpad('d_Ltype_SM in component d_Ltype_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,3) = strpad('f_inf_Ltype_SM in component f_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,180) = strpad('tau_f_Ltype_SM in component f_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,141) = strpad('tau_f_Ltype_SM in component f_Ltype_SM (time_units)');
     LEGEND_STATES(:,5) = strpad('f_Ltype_SM in component f_Ltype_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,4) = strpad('f_ca_inf_Ltype_SM in component f_ca_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,181) = strpad('tau_f_ca_Ltype_SM in component f_ca_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,142) = strpad('tau_f_ca_Ltype_SM in component f_ca_Ltype_SM (time_units)');
     LEGEND_STATES(:,6) = strpad('f_ca_Ltype_SM in component f_ca_Ltype_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,29) = strpad('E_Ca in component I_Ltype_SM (voltage_units)');
+    LEGEND_ALGEBRAIC(:,20) = strpad('E_Ca in component I_Ltype_SM (voltage_units)');
     LEGEND_CONSTANTS(:,17) = strpad('G_max_Ltype in component I_Ltype_SM (conductance_units)');
     LEGEND_CONSTANTS(:,18) = strpad('J_max_CaSR in component J_CaSR_SM (millimolar_per_millisecond)');
     LEGEND_ALGEBRAIC(:,5) = strpad('d_inf_LVA_SM in component d_LVA_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,182) = strpad('tau_d_LVA_SM in component d_LVA_SM (time_units)');
+    LEGEND_CONSTANTS(:,143) = strpad('tau_d_LVA_SM in component d_LVA_SM (time_units)');
     LEGEND_STATES(:,7) = strpad('d_LVA_SM in component d_LVA_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,6) = strpad('f_inf_LVA_SM in component f_LVA_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,30) = strpad('tau_f_LVA_SM in component f_LVA_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,21) = strpad('tau_f_LVA_SM in component f_LVA_SM (time_units)');
     LEGEND_STATES(:,8) = strpad('f_LVA_SM in component f_LVA_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,44) = strpad('E_Ca in component I_LVA_SM (voltage_units)');
+    LEGEND_ALGEBRAIC(:,33) = strpad('E_Ca in component I_LVA_SM (voltage_units)');
     LEGEND_CONSTANTS(:,19) = strpad('G_max_LVA in component I_LVA_SM (conductance_units)');
-    LEGEND_ALGEBRAIC(:,48) = strpad('d_BK_SM in component d_BK_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,183) = strpad('E_K in component I_BK_SM (voltage_units)');
+    LEGEND_ALGEBRAIC(:,37) = strpad('d_BK_SM in component d_BK_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,144) = strpad('E_K in component I_BK_SM (voltage_units)');
     LEGEND_CONSTANTS(:,20) = strpad('G_max_BK in component I_BK_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,7) = strpad('T in component active_tension (kilopascals)');
     LEGEND_CONSTANTS(:,21) = strpad('Ca50_0 in component active_tension (micromolar)');
-    LEGEND_CONSTANTS(:,184) = strpad('S_iCa50 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,196) = strpad('Ca50 in component active_tension (micromolar)');
+    LEGEND_CONSTANTS(:,145) = strpad('S_iCa50 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,157) = strpad('Ca50 in component active_tension (micromolar)');
     LEGEND_CONSTANTS(:,22) = strpad('h in component active_tension (dimensionless)');
     LEGEND_CONSTANTS(:,23) = strpad('T_max in component active_tension (kilopascals)');
-    LEGEND_CONSTANTS(:,24) = strpad('x_e in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,25) = strpad('x_i in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,166) = strpad('w_iICC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,165) = strpad('w_iSMC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,167) = strpad('w_e in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,26) = strpad('k_iAno1 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,27) = strpad('k_iNSCC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,28) = strpad('k_iCa50 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,29) = strpad('k_iSK in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,30) = strpad('k_eIP3 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,185) = strpad('S_iAno1 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,186) = strpad('S_iNSCC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,195) = strpad('S_eIP3 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,31) = strpad('p_iICC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,32) = strpad('p_iSMC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,33) = strpad('p_e in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,24) = strpad('f_e in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,25) = strpad('f_i in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,127) = strpad('w_iICC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,126) = strpad('w_iSMC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,128) = strpad('w_e in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,26) = strpad('f_max in component neural_input (Hertz)');
+    LEGEND_CONSTANTS(:,27) = strpad('k_iAno1 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,28) = strpad('k_iNSCC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,29) = strpad('k_iCa50 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,30) = strpad('k_iSK in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,31) = strpad('k_eIP3 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,146) = strpad('S_iAno1 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,147) = strpad('S_iNSCC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,156) = strpad('S_eIP3 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,32) = strpad('p_iICC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,33) = strpad('p_iSMC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,34) = strpad('p_e in component neural_input (dimensionless)');
     LEGEND_STATES(:,9) = strpad('x_SK_SM in component x_SK_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,8) = strpad('x_SK_inf_SM in component x_SK_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,31) = strpad('tau_x_SK_SM in component x_SK_SM (time_units)');
-    LEGEND_CONSTANTS(:,34) = strpad('n in component x_SK_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,35) = strpad('EC50 in component x_SK_SM (micromolar)');
-    LEGEND_CONSTANTS(:,187) = strpad('E_K in component I_SK_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,36) = strpad('G_max_SK in component I_SK_SM (conductance_units)');
-    LEGEND_CONSTANTS(:,188) = strpad('E_K in component I_bk_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,37) = strpad('G_max_bk in component I_bk_SM (conductance_units)');
+    LEGEND_ALGEBRAIC(:,22) = strpad('tau_x_SK_SM in component x_SK_SM (time_units)');
+    LEGEND_CONSTANTS(:,35) = strpad('n in component x_SK_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,36) = strpad('EC50 in component x_SK_SM (micromolar)');
+    LEGEND_CONSTANTS(:,148) = strpad('E_K in component I_SK_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,37) = strpad('G_max_SK in component I_SK_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,149) = strpad('E_K in component I_bk_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,38) = strpad('G_max_bk in component I_bk_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,9) = strpad('xr1_inf_SM in component xr1_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,189) = strpad('tau_xr1_SM in component xr1_SM (time_units)');
+    LEGEND_CONSTANTS(:,150) = strpad('tau_xr1_SM in component xr1_SM (time_units)');
     LEGEND_STATES(:,10) = strpad('xr1_SM in component xr1_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,10) = strpad('xr2_inf_SM in component xr2_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,32) = strpad('tau_xr2_SM in component xr2_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,23) = strpad('tau_xr2_SM in component xr2_SM (time_units)');
     LEGEND_STATES(:,11) = strpad('xr2_SM in component xr2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,190) = strpad('E_K in component I_kr_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,38) = strpad('G_max_kr_SM in component I_kr_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,151) = strpad('E_K in component I_kr_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,39) = strpad('G_max_kr_SM in component I_kr_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,11) = strpad('m_inf_Na in component m_Na_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,33) = strpad('tau_m_Na in component m_Na_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,24) = strpad('tau_m_Na in component m_Na_SM (time_units)');
     LEGEND_STATES(:,12) = strpad('m_Na_SM in component m_Na_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,12) = strpad('h_inf_Na in component h_Na_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,34) = strpad('tau_h_Na in component h_Na_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,25) = strpad('tau_h_Na in component h_Na_SM (time_units)');
     LEGEND_STATES(:,13) = strpad('h_Na_SM in component h_Na_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,191) = strpad('E_Na in component I_Na_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,39) = strpad('G_max_Na_SM in component I_Na_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,152) = strpad('E_Na in component I_Na_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,40) = strpad('G_max_Na_SM in component I_Na_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,13) = strpad('xa1_inf_SM in component xa1_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,35) = strpad('tau_xa1_SM in component xa1_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,26) = strpad('tau_xa1_SM in component xa1_SM (time_units)');
     LEGEND_STATES(:,14) = strpad('xa1_SM in component xa1_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,14) = strpad('xa2_inf_SM in component xa2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,192) = strpad('tau_xa2_SM in component xa2_SM (time_units)');
+    LEGEND_CONSTANTS(:,153) = strpad('tau_xa2_SM in component xa2_SM (time_units)');
     LEGEND_STATES(:,15) = strpad('xa2_SM in component xa2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,193) = strpad('E_K in component I_ka_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,40) = strpad('G_max_ka_SM in component I_ka_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,154) = strpad('E_K in component I_ka_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,41) = strpad('G_max_ka_SM in component I_ka_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,15) = strpad('m_inf_NSCC_SM in component m_NSCC_SM (dimensionless)');
-    LEGEND_ALGEBRAIC(:,36) = strpad('tau_m_NSCC_SM in component m_NSCC_SM (time_units)');
+    LEGEND_ALGEBRAIC(:,27) = strpad('tau_m_NSCC_SM in component m_NSCC_SM (time_units)');
     LEGEND_STATES(:,16) = strpad('m_NSCC_SM in component m_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,41) = strpad('E_NSCC in component I_NSCC_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,42) = strpad('G_max_NSCC_SM in component I_NSCC_SM (conductance_units)');
-    LEGEND_CONSTANTS(:,43) = strpad('Ach in component I_NSCC_SM (millimolar)');
-    LEGEND_ALGEBRAIC(:,63) = strpad('f_ca_NSCC_SM in component I_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,168) = strpad('rach_NSCC_SM in component I_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,44) = strpad('p2m in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,45) = strpad('umc2L in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,46) = strpad('T in component Parameters (Temperature_units)');
-    LEGEND_CONSTANTS(:,47) = strpad('F in component Parameters (F_units_ICC)');
-    LEGEND_CONSTANTS(:,48) = strpad('R in component Parameters (R_units_ICC)');
-    LEGEND_CONSTANTS(:,49) = strpad('z_ca in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,50) = strpad('z_na in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,51) = strpad('z_k in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,52) = strpad('z_cl in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,53) = strpad('Ca_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,54) = strpad('Cl_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,55) = strpad('Cl_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,56) = strpad('K_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,57) = strpad('K_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,58) = strpad('Na_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,59) = strpad('Na_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,60) = strpad('cellVol in component Volume (litre)');
-    LEGEND_CONSTANTS(:,61) = strpad('cellPropER in component Volume (dimensionless)');
-    LEGEND_CONSTANTS(:,62) = strpad('cellPropCyto in component Volume (dimensionless)');
-    LEGEND_CONSTANTS(:,172) = strpad('volER in component Volume (litre)');
-    LEGEND_CONSTANTS(:,194) = strpad('volCyto in component Volume (litre)');
+    LEGEND_CONSTANTS(:,42) = strpad('E_NSCC in component I_NSCC_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,43) = strpad('G_max_NSCC_SM in component I_NSCC_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,44) = strpad('Ach in component I_NSCC_SM (millimolar)');
+    LEGEND_ALGEBRAIC(:,55) = strpad('f_ca_NSCC_SM in component I_NSCC_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,129) = strpad('rach_NSCC_SM in component I_NSCC_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,45) = strpad('p2m in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,46) = strpad('umc2L in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,47) = strpad('T in component Parameters (Temperature_units)');
+    LEGEND_CONSTANTS(:,48) = strpad('F in component Parameters (F_units_ICC)');
+    LEGEND_CONSTANTS(:,49) = strpad('R in component Parameters (R_units_ICC)');
+    LEGEND_CONSTANTS(:,50) = strpad('z_ca in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,51) = strpad('z_na in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,52) = strpad('z_k in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,53) = strpad('z_cl in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,54) = strpad('Ca_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,55) = strpad('Cl_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,56) = strpad('Cl_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,57) = strpad('K_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,58) = strpad('K_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,59) = strpad('Na_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,60) = strpad('Na_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,61) = strpad('cellVol in component Volume (litre)');
+    LEGEND_CONSTANTS(:,62) = strpad('cellPropER in component Volume (dimensionless)');
+    LEGEND_CONSTANTS(:,63) = strpad('cellPropCyto in component Volume (dimensionless)');
+    LEGEND_CONSTANTS(:,133) = strpad('volER in component Volume (litre)');
+    LEGEND_CONSTANTS(:,155) = strpad('volCyto in component Volume (litre)');
     LEGEND_STATES(:,17) = strpad('Ca_i in component ICC_Membrane (micromolar)');
-    LEGEND_CONSTANTS(:,63) = strpad('E_NSCC in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,64) = strpad('E_NSV in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,65) = strpad('E_SOC in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,64) = strpad('E_NSCC in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,65) = strpad('E_NSV in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,66) = strpad('E_SOC in component Nernst (voltage_units)');
     LEGEND_ALGEBRAIC(:,16) = strpad('E_Ca in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,169) = strpad('E_Cl in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,170) = strpad('E_Na in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,171) = strpad('E_K in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,66) = strpad('d_CaT_Vh in component d_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,67) = strpad('d_CaT_S in component d_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,68) = strpad('d_CaT_tau in component d_CaT (time_units_ICC)');
+    LEGEND_CONSTANTS(:,130) = strpad('E_Cl in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,131) = strpad('E_Na in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,132) = strpad('E_K in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,67) = strpad('d_CaT_Vh in component d_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,68) = strpad('d_CaT_S in component d_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,69) = strpad('d_CaT_tau in component d_CaT (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,17) = strpad('d_CaT_inf in component d_CaT (dimensionless)');
     LEGEND_STATES(:,18) = strpad('d_CaT in component d_CaT (dimensionless)');
-    LEGEND_CONSTANTS(:,69) = strpad('f_CaT_Vh in component f_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,70) = strpad('f_CaT_S in component f_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,71) = strpad('f_CaT_tau in component f_CaT (time_units_ICC)');
+    LEGEND_CONSTANTS(:,70) = strpad('f_CaT_Vh in component f_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,71) = strpad('f_CaT_S in component f_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,72) = strpad('f_CaT_tau in component f_CaT (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,18) = strpad('f_CaT_inf in component f_CaT (dimensionless)');
     LEGEND_STATES(:,19) = strpad('f_CaT in component f_CaT (dimensionless)');
-    LEGEND_CONSTANTS(:,72) = strpad('g_CaT in component I_CaT (conductance_units)');
-    LEGEND_ALGEBRAIC(:,37) = strpad('I_CaT in component I_CaT (current_units)');
-    LEGEND_ALGEBRAIC(:,41) = strpad('J_CaT in component I_CaT (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,73) = strpad('d_CaV_Vh in component d_CaV (voltage_units)');
-    LEGEND_CONSTANTS(:,74) = strpad('d_CaV_S in component d_CaV (voltage_units)');
-    LEGEND_CONSTANTS(:,75) = strpad('d_CaV_tau in component d_CaV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,19) = strpad('d_CaV_inf in component d_CaV (dimensionless)');
-    LEGEND_STATES(:,20) = strpad('d_CaV in component d_CaV (dimensionless)');
-    LEGEND_CONSTANTS(:,76) = strpad('g_CaV in component I_CaV (conductance_units)');
-    LEGEND_ALGEBRAIC(:,43) = strpad('I_CaV in component I_CaV (current_units)');
-    LEGEND_ALGEBRAIC(:,45) = strpad('J_CaV in component I_CaV (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,77) = strpad('d_NaV_Vh in component d_NaV (voltage_units)');
-    LEGEND_CONSTANTS(:,78) = strpad('d_NaV_S in component d_NaV (voltage_units)');
-    LEGEND_CONSTANTS(:,79) = strpad('d_NaV_t1 in component d_NaV (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,80) = strpad('d_NaV_t2 in component d_NaV (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,81) = strpad('d_NaV_t3 in component d_NaV (Inverse_Voltage_ICC)');
-    LEGEND_CONSTANTS(:,82) = strpad('d_NaV_t4 in component d_NaV (voltage_units)');
-    LEGEND_ALGEBRAIC(:,38) = strpad('d_NaV_tau in component d_NaV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,20) = strpad('d_NaV_inf in component d_NaV (dimensionless)');
-    LEGEND_STATES(:,21) = strpad('d_NaV in component d_NaV (dimensionless)');
-    LEGEND_CONSTANTS(:,83) = strpad('f_NaV_Vh in component f_NaV (voltage_units)');
-    LEGEND_CONSTANTS(:,84) = strpad('f_NaV_S in component f_NaV (voltage_units)');
-    LEGEND_CONSTANTS(:,85) = strpad('f_NaV_tau in component f_NaV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,21) = strpad('f_NaV_inf in component f_NaV (dimensionless)');
-    LEGEND_STATES(:,22) = strpad('f_NaV in component f_NaV (dimensionless)');
-    LEGEND_CONSTANTS(:,86) = strpad('g_NaV in component I_NaV (conductance_units)');
-    LEGEND_ALGEBRAIC(:,49) = strpad('I_NaV in component I_NaV (current_units)');
-    LEGEND_ALGEBRAIC(:,47) = strpad('f_NaV_new in component I_NaV (dimensionless)');
-    LEGEND_CONSTANTS(:,87) = strpad('a_LCl_NaV in component I_NaV (dimensionless)');
-    LEGEND_CONSTANTS(:,88) = strpad('a_HCl_NaV in component I_NaV (dimensionless)');
-    LEGEND_CONSTANTS(:,89) = strpad('SOC_h in component P_SOC (micromolar)');
-    LEGEND_STATES(:,23) = strpad('Ca_er in component Ca_er (micromolar)');
-    LEGEND_CONSTANTS(:,90) = strpad('SOC_n in component P_SOC (dimensionless)');
-    LEGEND_ALGEBRAIC(:,51) = strpad('P_SOC in component P_SOC (dimensionless)');
-    LEGEND_CONSTANTS(:,91) = strpad('g_SOC in component I_SOC (conductance_units)');
-    LEGEND_CONSTANTS(:,92) = strpad('SOCPropCa in component I_SOC (dimensionless)');
-    LEGEND_ALGEBRAIC(:,53) = strpad('I_SOC in component I_SOC (current_units)');
-    LEGEND_ALGEBRAIC(:,55) = strpad('J_SOC in component I_SOC (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,93) = strpad('d_KV_Vh in component d_KV (voltage_units)');
-    LEGEND_CONSTANTS(:,94) = strpad('d_KV_S in component d_KV (voltage_units)');
-    LEGEND_CONSTANTS(:,95) = strpad('d_KV_tau in component d_KV (time_units_ICC)');
-    LEGEND_STATES(:,24) = strpad('d_KV in component d_KV (dimensionless)');
-    LEGEND_ALGEBRAIC(:,22) = strpad('d_KV_inf in component d_KV (dimensionless)');
-    LEGEND_CONSTANTS(:,96) = strpad('f_KV_Vh in component f_KV (voltage_units)');
-    LEGEND_CONSTANTS(:,97) = strpad('f_KV_S in component f_KV (voltage_units)');
-    LEGEND_CONSTANTS(:,98) = strpad('f_KV_a in component f_KV (dimensionless)');
-    LEGEND_CONSTANTS(:,99) = strpad('f_KV_tau in component f_KV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,23) = strpad('f_KV_inf in component f_KV (dimensionless)');
-    LEGEND_STATES(:,25) = strpad('f_KV in component f_KV (dimensionless)');
-    LEGEND_CONSTANTS(:,100) = strpad('g_KV in component I_KV (conductance_units)');
-    LEGEND_ALGEBRAIC(:,57) = strpad('I_KV in component I_KV (current_units)');
-    LEGEND_CONSTANTS(:,101) = strpad('d_NSV_Vh in component d_NSV (voltage_units)');
-    LEGEND_CONSTANTS(:,102) = strpad('d_NSV_S in component d_NSV (voltage_units)');
-    LEGEND_CONSTANTS(:,103) = strpad('d_NSV_tau in component d_NSV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,24) = strpad('d_NSV_inf in component d_NSV (dimensionless)');
-    LEGEND_STATES(:,26) = strpad('d_NSV in component d_NSV (dimensionless)');
-    LEGEND_CONSTANTS(:,104) = strpad('f_NSV_Vh in component f_NSV (voltage_units)');
-    LEGEND_CONSTANTS(:,105) = strpad('f_NSV_S in component f_NSV (voltage_units)');
-    LEGEND_CONSTANTS(:,106) = strpad('f_NSV_tau in component f_NSV (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,25) = strpad('f_NSV_inf in component f_NSV (dimensionless)');
-    LEGEND_STATES(:,27) = strpad('f_NSV in component f_NSV (dimensionless)');
-    LEGEND_CONSTANTS(:,107) = strpad('g_NSV in component I_NSV (conductance_units)');
-    LEGEND_ALGEBRAIC(:,59) = strpad('I_NSV in component I_NSV (current_units)');
-    LEGEND_ALGEBRAIC(:,61) = strpad('J_NSV in component I_NSV (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,108) = strpad('g_BK in component I_BK (conductance_units)');
-    LEGEND_ALGEBRAIC(:,62) = strpad('I_BK in component I_BK (current_units)');
-    LEGEND_CONSTANTS(:,109) = strpad('d_KERG_Vh in component d_KERG (voltage_units)');
-    LEGEND_CONSTANTS(:,110) = strpad('d_KERG_S in component d_KERG (voltage_units)');
-    LEGEND_CONSTANTS(:,111) = strpad('d_KERG_ta in component d_KERG (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,112) = strpad('d_KERG_tV in component d_KERG (voltage_units)');
-    LEGEND_CONSTANTS(:,113) = strpad('d_KERG_tS in component d_KERG (voltage_units)');
-    LEGEND_ALGEBRAIC(:,26) = strpad('d_KERG_tau in component d_KERG (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,39) = strpad('d_KERG_inf in component d_KERG (dimensionless)');
-    LEGEND_STATES(:,28) = strpad('d_KERG in component d_KERG (dimensionless)');
-    LEGEND_CONSTANTS(:,114) = strpad('f_KERG_Vh in component f_KERG (voltage_units)');
-    LEGEND_CONSTANTS(:,115) = strpad('f_KERG_S in component f_KERG (voltage_units)');
-    LEGEND_CONSTANTS(:,116) = strpad('f_KERG_a in component f_KERG (dimensionless)');
-    LEGEND_CONSTANTS(:,117) = strpad('f_KERG_tau in component f_KERG (time_units_ICC)');
-    LEGEND_ALGEBRAIC(:,27) = strpad('f_KERG_inf in component f_KERG (dimensionless)');
-    LEGEND_STATES(:,29) = strpad('f_KERG in component f_KERG (dimensionless)');
-    LEGEND_CONSTANTS(:,118) = strpad('g_KERG in component I_KERG (conductance_units)');
-    LEGEND_ALGEBRAIC(:,64) = strpad('I_KERG in component I_KERG (current_units)');
-    LEGEND_ALGEBRAIC(:,66) = strpad('I_stim in component I_stim (current_units)');
-    LEGEND_ALGEBRAIC(:,67) = strpad('P_NSCC in component P_NSCC (dimensionless)');
-    LEGEND_CONSTANTS(:,119) = strpad('n_NSCC in component P_NSCC (dimensionless)');
-    LEGEND_CONSTANTS(:,120) = strpad('Ca_NSCC in component P_NSCC (micromolar)');
-    LEGEND_CONSTANTS(:,121) = strpad('g_NSCC in component I_NSCC (rate_constants_units_second)');
-    LEGEND_ALGEBRAIC(:,68) = strpad('I_NSCC in component I_NSCC (current_units)');
-    LEGEND_CONSTANTS(:,122) = strpad('Dc in component d_Ano1 (micrometer2_per_time)');
-    LEGEND_CONSTANTS(:,123) = strpad('Dm in component d_Ano1 (micrometer2_per_time)');
-    LEGEND_CONSTANTS(:,124) = strpad('Bm in component d_Ano1 (micromolar)');
-    LEGEND_CONSTANTS(:,125) = strpad('Km in component d_Ano1 (micromolar)');
-    LEGEND_CONSTANTS(:,126) = strpad('kc in component d_Ano1 (Inverse_Voltage_ICC)');
-    LEGEND_CONSTANTS(:,127) = strpad('nSOC in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,173) = strpad('rad in component d_Ano1 (micrometer)');
-    LEGEND_ALGEBRAIC(:,69) = strpad('mouthCa in component d_Ano1 (micromolar_per_second)');
-    LEGEND_ALGEBRAIC(:,70) = strpad('localCa in component d_Ano1 (micromolar)');
-    LEGEND_ALGEBRAIC(:,71) = strpad('d_Ano1_tau in component d_Ano1 (time_units_ICC)');
-    LEGEND_CONSTANTS(:,128) = strpad('d_Ano1_tscale in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,129) = strpad('colocalRadius in component d_Ano1 (micrometer)');
-    LEGEND_ALGEBRAIC(:,72) = strpad('d_Ano1_inf in component d_Ano1 (dimensionless)');
-    LEGEND_STATES(:,30) = strpad('d_Ano1 in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,130) = strpad('Ano1_n in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,131) = strpad('Ano1_Vh in component d_Ano1 (voltage_units)');
-    LEGEND_CONSTANTS(:,132) = strpad('Ano1_s in component d_Ano1 (voltage_units)');
-    LEGEND_ALGEBRAIC(:,73) = strpad('h_Ano1 in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,133) = strpad('g_Ano1 in component I_Ano1 (conductance_units)');
-    LEGEND_ALGEBRAIC(:,74) = strpad('I_Ano1 in component I_Ano1 (current_units)');
-    LEGEND_CONSTANTS(:,134) = strpad('Ke in component J_SERCA (micromolar)');
-    LEGEND_ALGEBRAIC(:,75) = strpad('J_SERCA in component J_SERCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,135) = strpad('Ve in component J_SERCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,136) = strpad('fc in component J_SERCA (dimensionless)');
-    LEGEND_CONSTANTS(:,137) = strpad('fe in component J_SERCA (dimensionless)');
-    LEGEND_ALGEBRAIC(:,77) = strpad('J_IPR in component J_IPR (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,138) = strpad('k1 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,139) = strpad('k2 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,140) = strpad('k3 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,141) = strpad('k4 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,142) = strpad('k5 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,143) = strpad('k_1 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,144) = strpad('k_2 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,145) = strpad('k_3 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,146) = strpad('k_4 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,147) = strpad('k_5 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,198) = strpad('IP3 in component J_IPR (micromolar)');
-    LEGEND_CONSTANTS(:,174) = strpad('K1 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,175) = strpad('K2 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,197) = strpad('K3 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,176) = strpad('K4 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,177) = strpad('K5 in component y_bind (micromolar)');
-    LEGEND_STATES(:,31) = strpad('y in component y_bind (dimensionless)');
-    LEGEND_ALGEBRAIC(:,28) = strpad('phi1 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,199) = strpad('phi2 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,148) = strpad('kipr in component J_IPR (rate_constants_units_second)');
-    LEGEND_ALGEBRAIC(:,76) = strpad('Pipr in component J_IPR (dimensionless)');
-    LEGEND_CONSTANTS(:,149) = strpad('Jer in component J_IPR (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,150) = strpad('IP3_base in component J_IPR (micromolar)');
-    LEGEND_CONSTANTS(:,151) = strpad('switch_NCX in component I_NCX (dimensionless)');
-    LEGEND_CONSTANTS(:,152) = strpad('v_NCX in component I_NCX (micromolar_per_second)');
-    LEGEND_ALGEBRAIC(:,78) = strpad('J_NCX in component I_NCX (micromolar_per_second)');
-    LEGEND_ALGEBRAIC(:,80) = strpad('I_NCX in component I_NCX (current_units)');
-    LEGEND_CONSTANTS(:,153) = strpad('g_PMCA in component J_PMCA (dimensionless)');
-    LEGEND_CONSTANTS(:,154) = strpad('J_PMCA_max in component J_PMCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,155) = strpad('K_PMCA in component J_PMCA (micromolar)');
-    LEGEND_CONSTANTS(:,156) = strpad('n_PMCA in component J_PMCA (dimensionless)');
-    LEGEND_ALGEBRAIC(:,79) = strpad('J_PMCA in component J_PMCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,157) = strpad('g_BNa in component I_BNa (conductance_units)');
-    LEGEND_ALGEBRAIC(:,81) = strpad('I_BNa in component I_BNa (current_units)');
-    LEGEND_CONSTANTS(:,158) = strpad('Cm in component ICC_Membrane (capacitance_units_ICC)');
-    LEGEND_ALGEBRAIC(:,82) = strpad('Iion in component ICC_Membrane (current_units)');
+    LEGEND_CONSTANTS(:,73) = strpad('g_CaT in component I_CaT (conductance_units)');
+    LEGEND_ALGEBRAIC(:,28) = strpad('I_CaT in component I_CaT (current_units)');
+    LEGEND_ALGEBRAIC(:,30) = strpad('J_CaT in component I_CaT (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,74) = strpad('SOC_h in component P_SOC (micromolar)');
+    LEGEND_STATES(:,20) = strpad('Ca_er in component Ca_er (micromolar)');
+    LEGEND_CONSTANTS(:,75) = strpad('SOC_n in component P_SOC (dimensionless)');
+    LEGEND_ALGEBRAIC(:,32) = strpad('P_SOC in component P_SOC (dimensionless)');
+    LEGEND_CONSTANTS(:,76) = strpad('g_SOC in component I_SOC (conductance_units)');
+    LEGEND_CONSTANTS(:,77) = strpad('SOCPropCa in component I_SOC (dimensionless)');
+    LEGEND_ALGEBRAIC(:,34) = strpad('I_SOC in component I_SOC (current_units)');
+    LEGEND_ALGEBRAIC(:,36) = strpad('J_SOC in component I_SOC (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,78) = strpad('g_BK in component I_BK (conductance_units)');
+    LEGEND_ALGEBRAIC(:,38) = strpad('I_BK in component I_BK (current_units)');
+    LEGEND_ALGEBRAIC(:,41) = strpad('I_stim in component I_stim (current_units)');
+    LEGEND_CONSTANTS(:,79) = strpad('stim_amp in component I_stim (current_units)');
+    LEGEND_CONSTANTS(:,80) = strpad('stim_start in component I_stim (time_units_ICC)');
+    LEGEND_CONSTANTS(:,81) = strpad('stim_PW in component I_stim (time_units_ICC)');
+    LEGEND_ALGEBRAIC(:,44) = strpad('P_NSCC in component P_NSCC (dimensionless)');
+    LEGEND_CONSTANTS(:,82) = strpad('n_NSCC in component P_NSCC (dimensionless)');
+    LEGEND_CONSTANTS(:,83) = strpad('Ca_NSCC in component P_NSCC (micromolar)');
+    LEGEND_CONSTANTS(:,84) = strpad('g_NSCC in component I_NSCC (conductance_units)');
+    LEGEND_ALGEBRAIC(:,47) = strpad('I_NSCC in component I_NSCC (current_units)');
+    LEGEND_CONSTANTS(:,85) = strpad('Dc in component d_Ano1 (micrometer2_per_time)');
+    LEGEND_CONSTANTS(:,86) = strpad('Dm in component d_Ano1 (micrometer2_per_time)');
+    LEGEND_CONSTANTS(:,87) = strpad('Bm in component d_Ano1 (micromolar)');
+    LEGEND_CONSTANTS(:,88) = strpad('Km in component d_Ano1 (micromolar)');
+    LEGEND_CONSTANTS(:,89) = strpad('kc in component d_Ano1 (Inverse_Voltage_ICC)');
+    LEGEND_CONSTANTS(:,90) = strpad('nSOC in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,134) = strpad('rad in component d_Ano1 (micrometer)');
+    LEGEND_ALGEBRAIC(:,50) = strpad('mouthCa in component d_Ano1 (micromolar_per_second)');
+    LEGEND_ALGEBRAIC(:,52) = strpad('localCa in component d_Ano1 (micromolar)');
+    LEGEND_ALGEBRAIC(:,54) = strpad('d_Ano1_tau in component d_Ano1 (time_units_ICC)');
+    LEGEND_CONSTANTS(:,91) = strpad('d_Ano1_tscale in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,92) = strpad('colocalRadius in component d_Ano1 (micrometer)');
+    LEGEND_ALGEBRAIC(:,56) = strpad('d_Ano1_inf in component d_Ano1 (dimensionless)');
+    LEGEND_STATES(:,21) = strpad('d_Ano1 in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,93) = strpad('Ano1_n in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,94) = strpad('Ano1_Vh in component d_Ano1 (voltage_units)');
+    LEGEND_CONSTANTS(:,95) = strpad('Ano1_s in component d_Ano1 (Inverse_Voltage_ICC)');
+    LEGEND_ALGEBRAIC(:,58) = strpad('h_Ano1 in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,96) = strpad('g_Ano1 in component I_Ano1 (conductance_units)');
+    LEGEND_ALGEBRAIC(:,59) = strpad('I_Ano1 in component I_Ano1 (current_units)');
+    LEGEND_CONSTANTS(:,97) = strpad('Ke in component J_SERCA (micromolar)');
+    LEGEND_ALGEBRAIC(:,39) = strpad('J_SERCA in component J_SERCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,98) = strpad('Ve in component J_SERCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,99) = strpad('fc in component J_SERCA (dimensionless)');
+    LEGEND_CONSTANTS(:,100) = strpad('fe in component J_SERCA (dimensionless)');
+    LEGEND_ALGEBRAIC(:,45) = strpad('J_IPR in component J_IPR (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,101) = strpad('k1 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,102) = strpad('k2 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,103) = strpad('k3 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,104) = strpad('k4 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,105) = strpad('k5 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,106) = strpad('k_1 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,107) = strpad('k_2 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,108) = strpad('k_3 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,109) = strpad('k_4 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,110) = strpad('k_5 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,159) = strpad('IP3 in component J_IPR (micromolar)');
+    LEGEND_CONSTANTS(:,135) = strpad('K1 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,136) = strpad('K2 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,158) = strpad('K3 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,137) = strpad('K4 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,138) = strpad('K5 in component y_bind (micromolar)');
+    LEGEND_STATES(:,22) = strpad('y in component y_bind (dimensionless)');
+    LEGEND_ALGEBRAIC(:,19) = strpad('phi1 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,160) = strpad('phi2 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,111) = strpad('kipr in component J_IPR (rate_constants_units_second)');
+    LEGEND_ALGEBRAIC(:,42) = strpad('Pipr in component J_IPR (dimensionless)');
+    LEGEND_CONSTANTS(:,112) = strpad('Jer in component J_IPR (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,113) = strpad('IP3_base in component J_IPR (micromolar)');
+    LEGEND_CONSTANTS(:,114) = strpad('g_PMCA in component J_PMCA (dimensionless)');
+    LEGEND_CONSTANTS(:,115) = strpad('J_PMCA_max in component J_PMCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,116) = strpad('K_PMCA in component J_PMCA (micromolar)');
+    LEGEND_CONSTANTS(:,117) = strpad('n_PMCA in component J_PMCA (dimensionless)');
+    LEGEND_ALGEBRAIC(:,48) = strpad('J_PMCA in component J_PMCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,118) = strpad('g_BNa in component I_BNa (conductance_units)');
+    LEGEND_ALGEBRAIC(:,60) = strpad('I_BNa in component I_BNa (current_units)');
+    LEGEND_CONSTANTS(:,119) = strpad('Cm in component ICC_Membrane (capacitance_units_ICC)');
+    LEGEND_ALGEBRAIC(:,61) = strpad('Iion in component ICC_Membrane (current_units)');
     LEGEND_RATES(:,1) = strpad('d/dt Vm_SM in component SM_Membrane (voltage_units)');
     LEGEND_RATES(:,2) = strpad('d/dt Ca_i in component SM_Membrane (millimolar)');
     LEGEND_RATES(:,4) = strpad('d/dt d_Ltype_SM in component d_Ltype_SM (dimensionless)');
@@ -396,18 +319,9 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_RATES(:,16) = strpad('d/dt m_NSCC_SM in component m_NSCC_SM (dimensionless)');
     LEGEND_RATES(:,18) = strpad('d/dt d_CaT in component d_CaT (dimensionless)');
     LEGEND_RATES(:,19) = strpad('d/dt f_CaT in component f_CaT (dimensionless)');
-    LEGEND_RATES(:,20) = strpad('d/dt d_CaV in component d_CaV (dimensionless)');
-    LEGEND_RATES(:,21) = strpad('d/dt d_NaV in component d_NaV (dimensionless)');
-    LEGEND_RATES(:,22) = strpad('d/dt f_NaV in component f_NaV (dimensionless)');
-    LEGEND_RATES(:,24) = strpad('d/dt d_KV in component d_KV (dimensionless)');
-    LEGEND_RATES(:,25) = strpad('d/dt f_KV in component f_KV (dimensionless)');
-    LEGEND_RATES(:,26) = strpad('d/dt d_NSV in component d_NSV (dimensionless)');
-    LEGEND_RATES(:,27) = strpad('d/dt f_NSV in component f_NSV (dimensionless)');
-    LEGEND_RATES(:,28) = strpad('d/dt d_KERG in component d_KERG (dimensionless)');
-    LEGEND_RATES(:,29) = strpad('d/dt f_KERG in component f_KERG (dimensionless)');
-    LEGEND_RATES(:,30) = strpad('d/dt d_Ano1 in component d_Ano1 (dimensionless)');
-    LEGEND_RATES(:,23) = strpad('d/dt Ca_er in component Ca_er (micromolar)');
-    LEGEND_RATES(:,31) = strpad('d/dt y in component y_bind (dimensionless)');
+    LEGEND_RATES(:,21) = strpad('d/dt d_Ano1 in component d_Ano1 (dimensionless)');
+    LEGEND_RATES(:,20) = strpad('d/dt Ca_er in component Ca_er (micromolar)');
+    LEGEND_RATES(:,22) = strpad('d/dt y in component y_bind (dimensionless)');
     LEGEND_RATES(:,3) = strpad('d/dt Vm in component ICC_Membrane (voltage_units)');
     LEGEND_RATES(:,17) = strpad('d/dt Ca_i in component ICC_Membrane (micromolar)');
     LEGEND_STATES  = LEGEND_STATES';
@@ -416,7 +330,7 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_CONSTANTS = LEGEND_CONSTANTS';
 end
 
-function [STATES, CONSTANTS] = initConsts(e, w, x_e, x_i)
+function [STATES, CONSTANTS] = initConsts(e, w, f_e, f_i)
     VOI = 0; CONSTANTS = []; STATES = []; ALGEBRAIC = [];
     CONSTANTS(:,1) = 310;
     CONSTANTS(:,2) = 297;
@@ -449,205 +363,157 @@ function [STATES, CONSTANTS] = initConsts(e, w, x_e, x_i)
     CONSTANTS(:,21) = 0.5623413;
     CONSTANTS(:,22) = 3.4;
     CONSTANTS(:,23) = 313;
-    CONSTANTS(:,24) = x_e;
-    CONSTANTS(:,25) = x_i;
-    CONSTANTS(:,26) = e(1);
-    CONSTANTS(:,27) = e(2);
-    CONSTANTS(:,28) = e(3);
-    CONSTANTS(:,29) = e(4);
-    CONSTANTS(:,30) = e(5);
-    CONSTANTS(:,31) = w(1);
-    CONSTANTS(:,32) = w(2);
-    CONSTANTS(:,33) = w(3);
+    CONSTANTS(:,24) = f_e;
+    CONSTANTS(:,25) = f_i;
+    CONSTANTS(:,26) = 10;
+    CONSTANTS(:,27) = e(1);
+    CONSTANTS(:,28) = e(2);
+    CONSTANTS(:,29) = e(3);
+    CONSTANTS(:,30) = e(4);
+    CONSTANTS(:,31) = e(5);
+    CONSTANTS(:,32) = w(1);
+    CONSTANTS(:,33) = w(2);
+    CONSTANTS(:,34) = w(3);
     STATES(:,9) = 0;
-    CONSTANTS(:,34) = 2;
-    CONSTANTS(:,35) = 0.3;
-    CONSTANTS(:,36) = 3.5;
-    CONSTANTS(:,37) = 0.0144;
+    CONSTANTS(:,35) = 2;
+    CONSTANTS(:,36) = 0.3;
+    CONSTANTS(:,37) = 3.5;
+    CONSTANTS(:,38) = 0.0144;
     STATES(:,10) = 0.0;
     STATES(:,11) = 0.82;
-    CONSTANTS(:,38) = 35;
+    CONSTANTS(:,39) = 35;
     STATES(:,12) = 0.005;
     STATES(:,13) = 0.05787;
-    CONSTANTS(:,39) = 3;
+    CONSTANTS(:,40) = 3;
     STATES(:,14) = 0.00414;
     STATES(:,15) = 0.72;
-    CONSTANTS(:,40) = 9;
+    CONSTANTS(:,41) = 9;
     STATES(:,16) = 0.0;
-    CONSTANTS(:,41) = -28;
-    CONSTANTS(:,42) = 50;
-    CONSTANTS(:,43) = 0.00001;
-    CONSTANTS(:,44) = 1e-09;
-    CONSTANTS(:,45) = 1e+15;
-    CONSTANTS(:,46) = 310;
-    CONSTANTS(:,47) = 96.4846;
-    CONSTANTS(:,48) = 8.3144;
-    CONSTANTS(:,49) = 2;
-    CONSTANTS(:,50) = 1;
+    CONSTANTS(:,42) = -28;
+    CONSTANTS(:,43) = 50;
+    CONSTANTS(:,44) = 0.00001;
+    CONSTANTS(:,45) = 1e-09;
+    CONSTANTS(:,46) = 1e+15;
+    CONSTANTS(:,47) = 310;
+    CONSTANTS(:,48) = 96.4846;
+    CONSTANTS(:,49) = 8.3144;
+    CONSTANTS(:,50) = 2;
     CONSTANTS(:,51) = 1;
-    CONSTANTS(:,52) = -1;
-    CONSTANTS(:,53) = 2000;
-    CONSTANTS(:,54) = 78000;
-    CONSTANTS(:,55) = 166000;
-    CONSTANTS(:,56) = 140000;
-    CONSTANTS(:,57) = 5000;
-    CONSTANTS(:,58) = 30000;
-    CONSTANTS(:,59) = 140000;
-    CONSTANTS(:,60) = 1e-12;
-    CONSTANTS(:,61) = 0.1;
-    CONSTANTS(:,62) = 0.7;
+    CONSTANTS(:,52) = 1;
+    CONSTANTS(:,53) = -1;
+    CONSTANTS(:,54) = 2000;
+    CONSTANTS(:,55) = 78000;
+    CONSTANTS(:,56) = 166000;
+    CONSTANTS(:,57) = 140000;
+    CONSTANTS(:,58) = 5000;
+    CONSTANTS(:,59) = 30000;
+    CONSTANTS(:,60) = 140000;
+    CONSTANTS(:,61) = 1e-12;
+    CONSTANTS(:,62) = 0.1;
+    CONSTANTS(:,63) = 0.7;
     STATES(:,17) = 0.14;
-    CONSTANTS(:,63) = 0;
     CONSTANTS(:,64) = 0;
     CONSTANTS(:,65) = 0;
-    CONSTANTS(:,66) = -40;
-    CONSTANTS(:,67) = -3;
-    CONSTANTS(:,68) = 0.006;
+    CONSTANTS(:,66) = 0;
+    CONSTANTS(:,67) = -40;
+    CONSTANTS(:,68) = -3;
+    CONSTANTS(:,69) = 0.006;
     STATES(:,18) = 0.001271016263081;
-    CONSTANTS(:,69) = -55;
-    CONSTANTS(:,70) = 5;
-    CONSTANTS(:,71) = 0.1;
+    CONSTANTS(:,70) = -55;
+    CONSTANTS(:,71) = 5;
+    CONSTANTS(:,72) = 0.1;
     STATES(:,19) = 0.5;
-    CONSTANTS(:,72) = 4;
-    CONSTANTS(:,73) = -26;
-    CONSTANTS(:,74) = -6;
-    CONSTANTS(:,75) = 0.006;
-    STATES(:,20) = 0.001271016263081;
-    CONSTANTS(:,76) = 0.0;
-    CONSTANTS(:,77) = -25;
-    CONSTANTS(:,78) = -5.6;
-    CONSTANTS(:,79) = 50;
-    CONSTANTS(:,80) = 1050;
-    CONSTANTS(:,81) = -0.06;
-    CONSTANTS(:,82) = -20;
-    STATES(:,21) = 0.0006607800216060858;
-    CONSTANTS(:,83) = -39;
-    CONSTANTS(:,84) = -5.6;
-    CONSTANTS(:,85) = 1;
-    STATES(:,22) = 1.0;
-    CONSTANTS(:,86) = 0;
-    CONSTANTS(:,87) = 0;
+    CONSTANTS(:,73) = 4;
+    CONSTANTS(:,74) = 200;
+    STATES(:,20) = 290.0;
+    CONSTANTS(:,75) = 8;
+    CONSTANTS(:,76) = 0.1;
+    CONSTANTS(:,77) = 1;
+    CONSTANTS(:,78) = 9;
+    CONSTANTS(:,79) = 0;
+    CONSTANTS(:,80) = 18;
+    CONSTANTS(:,81) = 0.5;
+    CONSTANTS(:,82) = 4;
+    CONSTANTS(:,83) = 1.8;
+    CONSTANTS(:,84) = 30;
+    CONSTANTS(:,85) = 250;
+    CONSTANTS(:,86) = 75;
+    CONSTANTS(:,87) = 50;
     CONSTANTS(:,88) = 1;
-    CONSTANTS(:,89) = 200;
-    STATES(:,23) = 290.0;
-    CONSTANTS(:,90) = 8;
-    CONSTANTS(:,91) = 0.1;
-    CONSTANTS(:,92) = 1;
-    CONSTANTS(:,93) = -20;
-    CONSTANTS(:,94) = -4.6;
-    CONSTANTS(:,95) = 0.045;
-    STATES(:,24) = 0.01;
-    CONSTANTS(:,96) = -45;
-    CONSTANTS(:,97) = 4.4;
-    CONSTANTS(:,98) = 1;
-    CONSTANTS(:,99) = 0.045;
-    STATES(:,25) = 0.583726132461315;
-    CONSTANTS(:,100) = 0;
-    CONSTANTS(:,101) = -30;
-    CONSTANTS(:,102) = -5;
-    CONSTANTS(:,103) = 0.005;
-    STATES(:,26) = 0.001271016263081;
-    CONSTANTS(:,104) = -50;
-    CONSTANTS(:,105) = 5;
-    CONSTANTS(:,106) = 0.8;
-    STATES(:,27) = 0.5;
-    CONSTANTS(:,107) = 0;
-    CONSTANTS(:,108) = 9;
-    CONSTANTS(:,109) = -35;
-    CONSTANTS(:,110) = -7.1;
-    CONSTANTS(:,111) = 0.15;
-    CONSTANTS(:,112) = -60;
-    CONSTANTS(:,113) = 20;
-    STATES(:,28) = 0.001;
-    CONSTANTS(:,114) = -42;
-    CONSTANTS(:,115) = 4;
-    CONSTANTS(:,116) = 1;
-    CONSTANTS(:,117) = 0.003;
-    STATES(:,29) = 0.001;
-    CONSTANTS(:,118) = 0;
-    CONSTANTS(:,119) = 4;
-    CONSTANTS(:,120) = 1.8;
-    CONSTANTS(:,121) = 30;
-    CONSTANTS(:,122) = 250;
-    CONSTANTS(:,123) = 75;
-    CONSTANTS(:,124) = 50;
-    CONSTANTS(:,125) = 1;
-    CONSTANTS(:,126) = 0.01248;
-    CONSTANTS(:,127) = 50;
-    CONSTANTS(:,128) = 1;
-    CONSTANTS(:,129) = 0.05;
-    STATES(:,30) = 0.01;
-    CONSTANTS(:,130) = 2;
-    CONSTANTS(:,131) = -100;
-    CONSTANTS(:,132) = 0.0156;
-    CONSTANTS(:,133) = 20;
-    CONSTANTS(:,134) = 0.1;
-    CONSTANTS(:,135) = 160;
-    CONSTANTS(:,136) = 0.01;
-    CONSTANTS(:,137) = 1;
-    CONSTANTS(:,138) = 500;
-    CONSTANTS(:,139) = 0.25;
-    CONSTANTS(:,140) = 500;
-    CONSTANTS(:,141) = 0.25;
-    CONSTANTS(:,142) = 25;
-    CONSTANTS(:,143) = 65;
-    CONSTANTS(:,144) = 0.2625;
-    CONSTANTS(:,145) = 471.5;
-    CONSTANTS(:,146) = 0.03625;
-    CONSTANTS(:,147) = 2.05;
-    STATES(:,31) = 0.4;
-    CONSTANTS(:,148) = 7;
-    CONSTANTS(:,149) = 0.01;
-    CONSTANTS(:,150) = 0.5;
-    CONSTANTS(:,151) = 0;
-    CONSTANTS(:,152) = 225;
-    CONSTANTS(:,153) = 1;
-    CONSTANTS(:,154) = 100;
-    CONSTANTS(:,155) = 0.1;
-    CONSTANTS(:,156) = 2;
-    CONSTANTS(:,157) = 2;
-    CONSTANTS(:,158) = 0.025;
-    CONSTANTS(:,159) = power(CONSTANTS(:,7), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,160) = power(CONSTANTS(:,6), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,161) = power(CONSTANTS(:,5), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,162) =  1.10000.*(CONSTANTS(:,1) - CONSTANTS(:,2));
-    CONSTANTS(:,163) = CONSTANTS(:,3)./( CONSTANTS(:,4).*CONSTANTS(:,1));
-    CONSTANTS(:,164) = ( CONSTANTS(:,4).*CONSTANTS(:,1))./CONSTANTS(:,3);
-    CONSTANTS(:,165) = (1.00000 - exp(  - CONSTANTS(:,32).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,32)));
-    CONSTANTS(:,166) = (1.00000 - exp(  - CONSTANTS(:,31).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,31)));
-    CONSTANTS(:,167) = (1.00000 - exp(  - CONSTANTS(:,33).*CONSTANTS(:,24)))./(1.00000 - exp( - CONSTANTS(:,33)));
-    CONSTANTS(:,168) = 1.00000./(1.00000+0.0100000./CONSTANTS(:,43));
-    CONSTANTS(:,169) =  (( CONSTANTS(:,48).*CONSTANTS(:,46))./( CONSTANTS(:,47).*CONSTANTS(:,52))).*log(CONSTANTS(:,55)./CONSTANTS(:,54));
-    CONSTANTS(:,170) =  (( CONSTANTS(:,48).*CONSTANTS(:,46))./( CONSTANTS(:,47).*CONSTANTS(:,50))).*log(CONSTANTS(:,59)./CONSTANTS(:,58));
-    CONSTANTS(:,171) =  (( CONSTANTS(:,48).*CONSTANTS(:,46))./( CONSTANTS(:,47).*CONSTANTS(:,51))).*log(CONSTANTS(:,57)./CONSTANTS(:,56));
-    CONSTANTS(:,172) =  CONSTANTS(:,60).*CONSTANTS(:,61);
-    CONSTANTS(:,173) = CONSTANTS(:,129);
-    CONSTANTS(:,174) = CONSTANTS(:,143)./CONSTANTS(:,138);
-    CONSTANTS(:,175) = CONSTANTS(:,144)./CONSTANTS(:,139);
-    CONSTANTS(:,176) = CONSTANTS(:,146)./CONSTANTS(:,141);
-    CONSTANTS(:,177) = CONSTANTS(:,147)./CONSTANTS(:,142);
-    CONSTANTS(:,178) =  CONSTANTS(:,165).*CONSTANTS(:,29);
-    CONSTANTS(:,179) =  CONSTANTS(:,161).*0.470000;
-    CONSTANTS(:,180) =  CONSTANTS(:,161).*86.0000;
-    CONSTANTS(:,181) =  CONSTANTS(:,161).*2.00000;
-    CONSTANTS(:,182) =  CONSTANTS(:,161).*3.00000;
-    CONSTANTS(:,183) =  CONSTANTS(:,164).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,184) =  CONSTANTS(:,165).*CONSTANTS(:,28);
-    CONSTANTS(:,185) =  CONSTANTS(:,166).*CONSTANTS(:,26);
-    CONSTANTS(:,186) =  CONSTANTS(:,166).*CONSTANTS(:,27);
-    CONSTANTS(:,187) =  CONSTANTS(:,164).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,188) =  CONSTANTS(:,164).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,189) =  CONSTANTS(:,160).*80.0000;
-    CONSTANTS(:,190) =  CONSTANTS(:,164).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,191) =  CONSTANTS(:,164).*log(CONSTANTS(:,9)./CONSTANTS(:,14));
-    CONSTANTS(:,192) =  CONSTANTS(:,160).*90.0000;
-    CONSTANTS(:,193) =  CONSTANTS(:,164).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,194) =  CONSTANTS(:,60).*CONSTANTS(:,62);
-    CONSTANTS(:,195) =  CONSTANTS(:,167).*CONSTANTS(:,30);
-    CONSTANTS(:,196) =  CONSTANTS(:,21).*(1.00000+CONSTANTS(:,184));
-    CONSTANTS(:,197) = CONSTANTS(:,145)./CONSTANTS(:,140);
-    CONSTANTS(:,198) =  CONSTANTS(:,150).*(1.00000+CONSTANTS(:,195));
-    CONSTANTS(:,199) = ( CONSTANTS(:,144).*CONSTANTS(:,198)+ CONSTANTS(:,146).*CONSTANTS(:,197))./(CONSTANTS(:,197)+CONSTANTS(:,198));
+    CONSTANTS(:,89) = 0.01248;
+    CONSTANTS(:,90) = 50;
+    CONSTANTS(:,91) = 1;
+    CONSTANTS(:,92) = 0.05;
+    STATES(:,21) = 0.01;
+    CONSTANTS(:,93) = 2;
+    CONSTANTS(:,94) = -100;
+    CONSTANTS(:,95) = 0.0156;
+    CONSTANTS(:,96) = 20;
+    CONSTANTS(:,97) = 0.1;
+    CONSTANTS(:,98) = 160;
+    CONSTANTS(:,99) = 0.01;
+    CONSTANTS(:,100) = 1;
+    CONSTANTS(:,101) = 500;
+    CONSTANTS(:,102) = 0.25;
+    CONSTANTS(:,103) = 500;
+    CONSTANTS(:,104) = 0.25;
+    CONSTANTS(:,105) = 25;
+    CONSTANTS(:,106) = 65;
+    CONSTANTS(:,107) = 0.2625;
+    CONSTANTS(:,108) = 471.5;
+    CONSTANTS(:,109) = 0.03625;
+    CONSTANTS(:,110) = 2.05;
+    STATES(:,22) = 0.4;
+    CONSTANTS(:,111) = 7;
+    CONSTANTS(:,112) = 0.01;
+    CONSTANTS(:,113) = 0.5;
+    CONSTANTS(:,114) = 1;
+    CONSTANTS(:,115) = 100;
+    CONSTANTS(:,116) = 0.1;
+    CONSTANTS(:,117) = 2;
+    CONSTANTS(:,118) = 2;
+    CONSTANTS(:,119) = 0.025;
+    CONSTANTS(:,120) = power(CONSTANTS(:,7), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,121) = power(CONSTANTS(:,6), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,122) = power(CONSTANTS(:,5), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,123) =  1.10000.*(CONSTANTS(:,1) - CONSTANTS(:,2));
+    CONSTANTS(:,124) = CONSTANTS(:,3)./( CONSTANTS(:,4).*CONSTANTS(:,1));
+    CONSTANTS(:,125) = ( CONSTANTS(:,4).*CONSTANTS(:,1))./CONSTANTS(:,3);
+    CONSTANTS(:,126) = (1.00000 - exp((  - CONSTANTS(:,33).*CONSTANTS(:,25))./CONSTANTS(:,26)))./(1.00000 - exp( - CONSTANTS(:,33)));
+    CONSTANTS(:,127) = (1.00000 - exp((  - CONSTANTS(:,32).*CONSTANTS(:,25))./CONSTANTS(:,26)))./(1.00000 - exp( - CONSTANTS(:,32)));
+    CONSTANTS(:,128) = (1.00000 - exp((  - CONSTANTS(:,34).*CONSTANTS(:,24))./CONSTANTS(:,26)))./(1.00000 - exp( - CONSTANTS(:,34)));
+    CONSTANTS(:,129) = 1.00000./(1.00000+0.0100000./CONSTANTS(:,44));
+    CONSTANTS(:,130) =  (( CONSTANTS(:,49).*CONSTANTS(:,47))./( CONSTANTS(:,48).*CONSTANTS(:,53))).*log(CONSTANTS(:,56)./CONSTANTS(:,55));
+    CONSTANTS(:,131) =  (( CONSTANTS(:,49).*CONSTANTS(:,47))./( CONSTANTS(:,48).*CONSTANTS(:,51))).*log(CONSTANTS(:,60)./CONSTANTS(:,59));
+    CONSTANTS(:,132) =  (( CONSTANTS(:,49).*CONSTANTS(:,47))./( CONSTANTS(:,48).*CONSTANTS(:,52))).*log(CONSTANTS(:,58)./CONSTANTS(:,57));
+    CONSTANTS(:,133) =  CONSTANTS(:,61).*CONSTANTS(:,62);
+    CONSTANTS(:,134) = CONSTANTS(:,92);
+    CONSTANTS(:,135) = CONSTANTS(:,106)./CONSTANTS(:,101);
+    CONSTANTS(:,136) = CONSTANTS(:,107)./CONSTANTS(:,102);
+    CONSTANTS(:,137) = CONSTANTS(:,109)./CONSTANTS(:,104);
+    CONSTANTS(:,138) = CONSTANTS(:,110)./CONSTANTS(:,105);
+    CONSTANTS(:,139) =  CONSTANTS(:,126).*CONSTANTS(:,30);
+    CONSTANTS(:,140) =  CONSTANTS(:,122).*0.470000;
+    CONSTANTS(:,141) =  CONSTANTS(:,122).*86.0000;
+    CONSTANTS(:,142) =  CONSTANTS(:,122).*2.00000;
+    CONSTANTS(:,143) =  CONSTANTS(:,122).*3.00000;
+    CONSTANTS(:,144) =  CONSTANTS(:,125).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,145) =  CONSTANTS(:,126).*CONSTANTS(:,29);
+    CONSTANTS(:,146) =  CONSTANTS(:,127).*CONSTANTS(:,27);
+    CONSTANTS(:,147) =  CONSTANTS(:,127).*CONSTANTS(:,28);
+    CONSTANTS(:,148) =  CONSTANTS(:,125).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,149) =  CONSTANTS(:,125).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,150) =  CONSTANTS(:,121).*80.0000;
+    CONSTANTS(:,151) =  CONSTANTS(:,125).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,152) =  CONSTANTS(:,125).*log(CONSTANTS(:,9)./CONSTANTS(:,14));
+    CONSTANTS(:,153) =  CONSTANTS(:,121).*90.0000;
+    CONSTANTS(:,154) =  CONSTANTS(:,125).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,155) =  CONSTANTS(:,61).*CONSTANTS(:,63);
+    CONSTANTS(:,156) =  CONSTANTS(:,128).*CONSTANTS(:,31);
+    CONSTANTS(:,157) =  CONSTANTS(:,21).*(1.00000+CONSTANTS(:,145));
+    CONSTANTS(:,158) = CONSTANTS(:,108)./CONSTANTS(:,103);
+    CONSTANTS(:,159) =  CONSTANTS(:,113).*(1.00000+CONSTANTS(:,156));
+    CONSTANTS(:,160) = ( CONSTANTS(:,107).*CONSTANTS(:,159)+ CONSTANTS(:,109).*CONSTANTS(:,158))./(CONSTANTS(:,158)+CONSTANTS(:,159));
     if (isempty(STATES)), warning('Initial values for states not set');, end
 end
 
@@ -666,116 +532,87 @@ function [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS)
         utilOnes = ones(statesRowCount, 1);
     end
     ALGEBRAIC(:,2) = 1.00000./(1.00000+exp((STATES(:,1)+17.0000)./ - 4.30000));
-    RATES(:,4) = (ALGEBRAIC(:,2) - STATES(:,4))./CONSTANTS(:,179);
+    RATES(:,4) = (ALGEBRAIC(:,2) - STATES(:,4))./CONSTANTS(:,140);
     ALGEBRAIC(:,3) = 1.00000./(1.00000+exp((STATES(:,1)+43.0000)./8.90000));
-    RATES(:,5) = (ALGEBRAIC(:,3) - STATES(:,5))./CONSTANTS(:,180);
+    RATES(:,5) = (ALGEBRAIC(:,3) - STATES(:,5))./CONSTANTS(:,141);
     ALGEBRAIC(:,4) = 1.00000 - 1.00000./(1.00000+exp(((STATES(:,2) - 8.99900e-05) - 0.000214000)./ - 1.31000e-05));
-    RATES(:,6) = (ALGEBRAIC(:,4) - STATES(:,6))./CONSTANTS(:,181);
+    RATES(:,6) = (ALGEBRAIC(:,4) - STATES(:,6))./CONSTANTS(:,142);
     ALGEBRAIC(:,5) = 1.00000./(1.00000+exp((STATES(:,1)+27.5000)./ - 10.9000));
-    RATES(:,7) = (ALGEBRAIC(:,5) - STATES(:,7))./CONSTANTS(:,182);
+    RATES(:,7) = (ALGEBRAIC(:,5) - STATES(:,7))./CONSTANTS(:,143);
     ALGEBRAIC(:,9) = 1.00000./(1.00000+exp((STATES(:,1)+27.0000)./ - 5.00000));
-    RATES(:,10) = (ALGEBRAIC(:,9) - STATES(:,10))./CONSTANTS(:,189);
+    RATES(:,10) = (ALGEBRAIC(:,9) - STATES(:,10))./CONSTANTS(:,150);
     ALGEBRAIC(:,14) = 0.100000+0.900000./(1.00000+exp((STATES(:,1)+65.0000)./6.20000));
-    RATES(:,15) = (ALGEBRAIC(:,14) - STATES(:,15))./CONSTANTS(:,192);
-    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,66))./CONSTANTS(:,67)));
-    RATES(:,18) = ((ALGEBRAIC(:,17) - STATES(:,18))./CONSTANTS(:,68)).*0.00100000;
-    ALGEBRAIC(:,18) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,69))./CONSTANTS(:,70)));
-    RATES(:,19) = ((ALGEBRAIC(:,18) - STATES(:,19))./CONSTANTS(:,71)).*0.00100000;
-    ALGEBRAIC(:,19) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,73))./CONSTANTS(:,74)));
-    RATES(:,20) = ((ALGEBRAIC(:,19) - STATES(:,20))./CONSTANTS(:,75)).*0.00100000;
-    ALGEBRAIC(:,21) = (0.530000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,83))./CONSTANTS(:,84)))+1.00000) - 0.530000;
-    RATES(:,22) = ((ALGEBRAIC(:,21) - STATES(:,22))./CONSTANTS(:,85)).*0.00100000;
-    ALGEBRAIC(:,22) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,93))./CONSTANTS(:,94)));
-    RATES(:,24) = ((ALGEBRAIC(:,22) - STATES(:,24))./CONSTANTS(:,95)).*0.00100000;
-    ALGEBRAIC(:,23) = (CONSTANTS(:,98)./(1.00000+exp((STATES(:,3) - CONSTANTS(:,96))./CONSTANTS(:,97)))+1.00000) - CONSTANTS(:,98);
-    RATES(:,25) = ((ALGEBRAIC(:,23) - STATES(:,25))./CONSTANTS(:,99)).*0.00100000;
-    ALGEBRAIC(:,24) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,101))./CONSTANTS(:,102)));
-    RATES(:,26) = ((ALGEBRAIC(:,24) - STATES(:,26))./CONSTANTS(:,103)).*0.00100000;
-    ALGEBRAIC(:,25) = (0.300000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,104))./CONSTANTS(:,105)))+1.00000) - 0.300000;
-    RATES(:,27) = ((ALGEBRAIC(:,25) - STATES(:,27))./CONSTANTS(:,106)).*0.00100000;
-    ALGEBRAIC(:,27) = (CONSTANTS(:,116)./(1.00000+exp((STATES(:,3) - CONSTANTS(:,114))./CONSTANTS(:,115)))+1.00000) - CONSTANTS(:,116);
-    RATES(:,29) = ((ALGEBRAIC(:,27) - STATES(:,29))./CONSTANTS(:,117)).*0.00100000;
-    ALGEBRAIC(:,28) = ( ( CONSTANTS(:,146).*CONSTANTS(:,175).*CONSTANTS(:,174)+ CONSTANTS(:,144).*CONSTANTS(:,176).*CONSTANTS(:,198)).*STATES(:,17))./( CONSTANTS(:,176).*CONSTANTS(:,175).*(CONSTANTS(:,174)+CONSTANTS(:,198)));
-    RATES(:,31) = ( ALGEBRAIC(:,28).*(1.00000 - STATES(:,31)) -  CONSTANTS(:,199).*STATES(:,31)).*0.00100000;
+    RATES(:,15) = (ALGEBRAIC(:,14) - STATES(:,15))./CONSTANTS(:,153);
+    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,67))./CONSTANTS(:,68)));
+    RATES(:,18) = ((ALGEBRAIC(:,17) - STATES(:,18))./CONSTANTS(:,69)).*0.00100000;
+    ALGEBRAIC(:,18) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,70))./CONSTANTS(:,71)));
+    RATES(:,19) = ((ALGEBRAIC(:,18) - STATES(:,19))./CONSTANTS(:,72)).*0.00100000;
+    ALGEBRAIC(:,19) = ( ( CONSTANTS(:,109).*CONSTANTS(:,136).*CONSTANTS(:,135)+ CONSTANTS(:,107).*CONSTANTS(:,137).*CONSTANTS(:,159)).*STATES(:,17))./( CONSTANTS(:,137).*CONSTANTS(:,136).*(CONSTANTS(:,135)+CONSTANTS(:,159)));
+    RATES(:,22) = ( ALGEBRAIC(:,19).*(1.00000 - STATES(:,22)) -  CONSTANTS(:,160).*STATES(:,22)).*0.00100000;
     ALGEBRAIC(:,6) = 1.00000./(1.00000+exp((STATES(:,1)+15.8000)./7.00000));
-    ALGEBRAIC(:,30) =  CONSTANTS(:,161).*7.58000.*exp( STATES(:,1).*0.00817000);
-    RATES(:,8) = (ALGEBRAIC(:,6) - STATES(:,8))./ALGEBRAIC(:,30);
-    ALGEBRAIC(:,8) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,34)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,34))+power(CONSTANTS(:,35), CONSTANTS(:,34)));
-    ALGEBRAIC(:,31) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
-    RATES(:,9) = (ALGEBRAIC(:,8) - STATES(:,9))./ALGEBRAIC(:,31);
+    ALGEBRAIC(:,21) =  CONSTANTS(:,122).*7.58000.*exp( STATES(:,1).*0.00817000);
+    RATES(:,8) = (ALGEBRAIC(:,6) - STATES(:,8))./ALGEBRAIC(:,21);
+    ALGEBRAIC(:,8) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,35)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,35))+power(CONSTANTS(:,36), CONSTANTS(:,35)));
+    ALGEBRAIC(:,22) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
+    RATES(:,9) = (ALGEBRAIC(:,8) - STATES(:,9))./ALGEBRAIC(:,22);
     ALGEBRAIC(:,10) = 0.200000+0.800000./(1.00000+exp((STATES(:,1)+58.0000)./10.0000));
-    ALGEBRAIC(:,32) =  CONSTANTS(:,160).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
-    RATES(:,11) = (ALGEBRAIC(:,10) - STATES(:,11))./ALGEBRAIC(:,32);
+    ALGEBRAIC(:,23) =  CONSTANTS(:,121).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
+    RATES(:,11) = (ALGEBRAIC(:,10) - STATES(:,11))./ALGEBRAIC(:,23);
     ALGEBRAIC(:,11) = 1.00000./(1.00000+exp((STATES(:,1)+47.0000)./ - 4.80000));
-    ALGEBRAIC(:,33) =  CONSTANTS(:,159).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
-    RATES(:,12) = (ALGEBRAIC(:,11) - STATES(:,12))./ALGEBRAIC(:,33);
+    ALGEBRAIC(:,24) =  CONSTANTS(:,120).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
+    RATES(:,12) = (ALGEBRAIC(:,11) - STATES(:,12))./ALGEBRAIC(:,24);
     ALGEBRAIC(:,12) = 1.00000./(1.00000+exp((STATES(:,1)+78.0000)./3.00000));
-    ALGEBRAIC(:,34) =  CONSTANTS(:,159).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
-    RATES(:,13) = (ALGEBRAIC(:,12) - STATES(:,13))./ALGEBRAIC(:,34);
+    ALGEBRAIC(:,25) =  CONSTANTS(:,120).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
+    RATES(:,13) = (ALGEBRAIC(:,12) - STATES(:,13))./ALGEBRAIC(:,25);
     ALGEBRAIC(:,13) = 1.00000./(1.00000+exp((STATES(:,1)+26.5000)./ - 7.90000));
-    ALGEBRAIC(:,35) =  CONSTANTS(:,160).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
-    RATES(:,14) = (ALGEBRAIC(:,13) - STATES(:,14))./ALGEBRAIC(:,35);
+    ALGEBRAIC(:,26) =  CONSTANTS(:,121).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
+    RATES(:,14) = (ALGEBRAIC(:,13) - STATES(:,14))./ALGEBRAIC(:,26);
     ALGEBRAIC(:,15) = 1.00000./(1.00000+exp((STATES(:,1)+25.0000)./ - 20.0000));
-    ALGEBRAIC(:,36) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
-    RATES(:,16) = (ALGEBRAIC(:,15) - STATES(:,16))./ALGEBRAIC(:,36);
-    ALGEBRAIC(:,38) = 1.00000./(CONSTANTS(:,79)+(CONSTANTS(:,80) - CONSTANTS(:,79))./(1.00000+exp( CONSTANTS(:,81).*(STATES(:,3) - CONSTANTS(:,82)))));
-    ALGEBRAIC(:,20) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,77))./CONSTANTS(:,78)));
-    RATES(:,21) = ((ALGEBRAIC(:,20) - STATES(:,21))./ALGEBRAIC(:,38)).*0.00100000;
-    ALGEBRAIC(:,26) = 1.00000./(1.00000+1.00000./(1.00000+exp( CONSTANTS(:,111).*(STATES(:,3) - CONSTANTS(:,112)))));
-    ALGEBRAIC(:,39) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,109))./CONSTANTS(:,110)));
-    RATES(:,28) = ((ALGEBRAIC(:,39) - STATES(:,28))./ALGEBRAIC(:,26)).*0.00100000;
-    ALGEBRAIC(:,29) =  0.500000.*CONSTANTS(:,164).*log(CONSTANTS(:,8)./STATES(:,2));
-    ALGEBRAIC(:,40) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,29));
-    ALGEBRAIC(:,44) =  0.500000.*CONSTANTS(:,164).*log(CONSTANTS(:,8)./STATES(:,2));
-    ALGEBRAIC(:,46) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,44));
-    ALGEBRAIC(:,42) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
-    RATES(:,2) = (  - 1.00000.*ALGEBRAIC(:,40)+  - 1.00000.*ALGEBRAIC(:,46))./( 2.00000.*0.00100000.*CONSTANTS(:,3).*CONSTANTS(:,13))+  - 1.00000.*ALGEBRAIC(:,42);
-    ALGEBRAIC(:,58) =  CONSTANTS(:,39).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,191));
-    ALGEBRAIC(:,56) =  CONSTANTS(:,38).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,190));
-    ALGEBRAIC(:,60) =  CONSTANTS(:,40).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,193));
-    ALGEBRAIC(:,48) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
-    ALGEBRAIC(:,50) =  (CONSTANTS(:,20)+CONSTANTS(:,162)).*ALGEBRAIC(:,48).*(STATES(:,1) - CONSTANTS(:,183));
-    ALGEBRAIC(:,52) =  CONSTANTS(:,36).*STATES(:,9).*CONSTANTS(:,178).*(STATES(:,1) - CONSTANTS(:,187));
-    ALGEBRAIC(:,63) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
-    ALGEBRAIC(:,65) =  CONSTANTS(:,42).*STATES(:,16).*ALGEBRAIC(:,63).*CONSTANTS(:,168).*(STATES(:,1) - CONSTANTS(:,41));
-    ALGEBRAIC(:,54) =  CONSTANTS(:,37).*(STATES(:,1) - CONSTANTS(:,188));
+    ALGEBRAIC(:,27) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
+    RATES(:,16) = (ALGEBRAIC(:,15) - STATES(:,16))./ALGEBRAIC(:,27);
+    ALGEBRAIC(:,20) =  0.500000.*CONSTANTS(:,125).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,29) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,20));
+    ALGEBRAIC(:,33) =  0.500000.*CONSTANTS(:,125).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,35) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,33));
+    ALGEBRAIC(:,31) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
+    RATES(:,2) = (  - 1.00000.*ALGEBRAIC(:,29)+  - 1.00000.*ALGEBRAIC(:,35))./( 2.00000.*0.00100000.*CONSTANTS(:,3).*CONSTANTS(:,13))+  - 1.00000.*ALGEBRAIC(:,31);
+    ALGEBRAIC(:,39) = ( CONSTANTS(:,98).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,97), 2.00000)+power(STATES(:,17), 2.00000));
+    ALGEBRAIC(:,42) = power(( CONSTANTS(:,159).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (CONSTANTS(:,159)+CONSTANTS(:,135)).*(STATES(:,17)+CONSTANTS(:,138))), 3.00000);
+    ALGEBRAIC(:,45) =  ( CONSTANTS(:,111).*ALGEBRAIC(:,42)+CONSTANTS(:,112)).*(STATES(:,20) - STATES(:,17));
+    RATES(:,20) = (( CONSTANTS(:,100).*(ALGEBRAIC(:,39) - ALGEBRAIC(:,45)).*CONSTANTS(:,155))./CONSTANTS(:,133)).*0.00100000;
+    ALGEBRAIC(:,16) =  (( CONSTANTS(:,49).*CONSTANTS(:,47))./( CONSTANTS(:,48).*CONSTANTS(:,50))).*log(CONSTANTS(:,54)./STATES(:,17));
+    ALGEBRAIC(:,28) =  CONSTANTS(:,73).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,16));
+    ALGEBRAIC(:,30) = (  - CONSTANTS(:,45).*ALGEBRAIC(:,28))./( CONSTANTS(:,50).*CONSTANTS(:,48).*CONSTANTS(:,155));
+    ALGEBRAIC(:,32) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,74), CONSTANTS(:,75)));
+    ALGEBRAIC(:,34) =  CONSTANTS(:,76).*ALGEBRAIC(:,32).*(STATES(:,3) - ALGEBRAIC(:,16));
+    ALGEBRAIC(:,36) = (  - CONSTANTS(:,45).*CONSTANTS(:,77).*ALGEBRAIC(:,34))./( CONSTANTS(:,50).*CONSTANTS(:,48).*CONSTANTS(:,155));
+    ALGEBRAIC(:,48) = ( CONSTANTS(:,114).*CONSTANTS(:,115).*1.00000)./(1.00000+power(CONSTANTS(:,116)./STATES(:,17), CONSTANTS(:,117)));
+    RATES(:,17) = ( CONSTANTS(:,99).*(((ALGEBRAIC(:,45) - ALGEBRAIC(:,39))+ALGEBRAIC(:,36)+ALGEBRAIC(:,30)) - ALGEBRAIC(:,48))).*0.00100000;
+    ALGEBRAIC(:,50) = ( 1.00000e+15.*ALGEBRAIC(:,36).*CONSTANTS(:,155))./CONSTANTS(:,90);
+    ALGEBRAIC(:,52) = (((  - CONSTANTS(:,85).*CONSTANTS(:,88)+ALGEBRAIC(:,50)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,85).*STATES(:,17)) - ( CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88))./(CONSTANTS(:,88)+STATES(:,17)))+power((power(( CONSTANTS(:,85).*CONSTANTS(:,88)+ALGEBRAIC(:,50)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,85).*STATES(:,17)) - ( CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88))./(CONSTANTS(:,88)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,85).*CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,85));
+    ALGEBRAIC(:,54) =  CONSTANTS(:,91).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,52))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,52)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,52))))).*0.00100000;
+    ALGEBRAIC(:,56) = 1.00000./( (1.00000+exp( (CONSTANTS(:,94) - STATES(:,3)).*CONSTANTS(:,95))).*(1.00000+power(ALGEBRAIC(:,52)./( 1.39000.*exp(  - CONSTANTS(:,89).*STATES(:,3))),  - CONSTANTS(:,93))));
+    RATES(:,21) = ((ALGEBRAIC(:,56) - STATES(:,21))./ALGEBRAIC(:,54)).*0.00100000;
+    ALGEBRAIC(:,51) =  CONSTANTS(:,40).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,152));
+    ALGEBRAIC(:,49) =  CONSTANTS(:,39).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,151));
+    ALGEBRAIC(:,53) =  CONSTANTS(:,41).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,154));
+    ALGEBRAIC(:,37) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
+    ALGEBRAIC(:,40) =  (CONSTANTS(:,20)+CONSTANTS(:,123)).*ALGEBRAIC(:,37).*(STATES(:,1) - CONSTANTS(:,144));
+    ALGEBRAIC(:,43) =  CONSTANTS(:,37).*STATES(:,9).*CONSTANTS(:,139).*(STATES(:,1) - CONSTANTS(:,148));
+    ALGEBRAIC(:,55) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
+    ALGEBRAIC(:,57) =  CONSTANTS(:,43).*STATES(:,16).*ALGEBRAIC(:,55).*CONSTANTS(:,129).*(STATES(:,1) - CONSTANTS(:,42));
+    ALGEBRAIC(:,46) =  CONSTANTS(:,38).*(STATES(:,1) - CONSTANTS(:,149));
     ALGEBRAIC(:,1) =  CONSTANTS(:,16).*(STATES(:,3) - STATES(:,1));
-    RATES(:,1) =  ((  - 1.00000.*1.00000)./CONSTANTS(:,12)).*(ALGEBRAIC(:,58)+ALGEBRAIC(:,52)+ALGEBRAIC(:,40)+ALGEBRAIC(:,46)+ALGEBRAIC(:,56)+ALGEBRAIC(:,60)+ALGEBRAIC(:,50)+ALGEBRAIC(:,65)+ALGEBRAIC(:,54)+  - 1.00000.*ALGEBRAIC(:,1));
-    ALGEBRAIC(:,16) =  (( CONSTANTS(:,48).*CONSTANTS(:,46))./( CONSTANTS(:,47).*CONSTANTS(:,49))).*log(CONSTANTS(:,53)./STATES(:,17));
-    ALGEBRAIC(:,51) = 1.00000./(1.00000+power(STATES(:,23)./CONSTANTS(:,89), CONSTANTS(:,90)));
-    ALGEBRAIC(:,53) =  CONSTANTS(:,91).*ALGEBRAIC(:,51).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,55) = (  - CONSTANTS(:,44).*CONSTANTS(:,92).*ALGEBRAIC(:,53))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,69) = ( 1.00000e+15.*ALGEBRAIC(:,55).*CONSTANTS(:,194))./CONSTANTS(:,127);
-    ALGEBRAIC(:,70) = (((  - CONSTANTS(:,122).*CONSTANTS(:,125)+ALGEBRAIC(:,69)./( 2.00000.* pi.*CONSTANTS(:,173))+ CONSTANTS(:,122).*STATES(:,17)) - ( CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125))./(CONSTANTS(:,125)+STATES(:,17)))+power((power(( CONSTANTS(:,122).*CONSTANTS(:,125)+ALGEBRAIC(:,69)./( 2.00000.* pi.*CONSTANTS(:,173))+ CONSTANTS(:,122).*STATES(:,17)) - ( CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125))./(CONSTANTS(:,125)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,122).*CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,122));
-    ALGEBRAIC(:,71) =  CONSTANTS(:,128).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,70))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,70)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,70))))).*0.00100000;
-    ALGEBRAIC(:,72) = 1.00000./( (1.00000+exp( (CONSTANTS(:,131) - STATES(:,3)).*CONSTANTS(:,132))).*(1.00000+power(ALGEBRAIC(:,70)./( 1.39000.*exp(  - CONSTANTS(:,126).*STATES(:,3))),  - CONSTANTS(:,130))));
-    RATES(:,30) = ((ALGEBRAIC(:,72) - STATES(:,30))./ALGEBRAIC(:,71)).*0.00100000;
-    ALGEBRAIC(:,75) = ( CONSTANTS(:,135).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,134), 2.00000)+power(STATES(:,17), 2.00000));
-    ALGEBRAIC(:,76) = power(( CONSTANTS(:,198).*STATES(:,17).*(1.00000 - STATES(:,31)))./( (CONSTANTS(:,198)+CONSTANTS(:,174)).*(STATES(:,17)+CONSTANTS(:,177))), 3.00000);
-    ALGEBRAIC(:,77) =  ( CONSTANTS(:,148).*ALGEBRAIC(:,76)+CONSTANTS(:,149)).*(STATES(:,23) - STATES(:,17));
-    RATES(:,23) = (( CONSTANTS(:,137).*(ALGEBRAIC(:,75) - ALGEBRAIC(:,77)).*CONSTANTS(:,194))./CONSTANTS(:,172)).*0.00100000;
-    ALGEBRAIC(:,37) =  CONSTANTS(:,72).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,41) = (  - CONSTANTS(:,44).*ALGEBRAIC(:,37))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,43) =  CONSTANTS(:,76).*STATES(:,20).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,45) = (  - CONSTANTS(:,44).*ALGEBRAIC(:,43))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,78) = ( CONSTANTS(:,151).*CONSTANTS(:,152).*STATES(:,17))./(3.60000+STATES(:,17));
-    ALGEBRAIC(:,79) = ( CONSTANTS(:,153).*CONSTANTS(:,154).*1.00000)./(1.00000+power(CONSTANTS(:,155)./STATES(:,17), CONSTANTS(:,156)));
-    RATES(:,17) = ( CONSTANTS(:,136).*((((ALGEBRAIC(:,77) - ALGEBRAIC(:,75))+ALGEBRAIC(:,55)+ALGEBRAIC(:,41)+ALGEBRAIC(:,45)) - ALGEBRAIC(:,78)) - ALGEBRAIC(:,79))).*0.00100000;
-    ALGEBRAIC(:,47) =  CONSTANTS(:,87).*STATES(:,22)+CONSTANTS(:,88);
-    ALGEBRAIC(:,49) =  CONSTANTS(:,86).*STATES(:,21).*ALGEBRAIC(:,47).*(STATES(:,3) - CONSTANTS(:,170));
-    ALGEBRAIC(:,57) =  CONSTANTS(:,100).*STATES(:,24).*STATES(:,25).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,59) =  CONSTANTS(:,107).*STATES(:,26).*STATES(:,27).*(STATES(:,3) - CONSTANTS(:,64));
-    ALGEBRAIC(:,62) =  CONSTANTS(:,108).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,64) =  CONSTANTS(:,118).*STATES(:,28).*STATES(:,29).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,66) = piecewise({VOI.*0.00100000>18.0000&VOI.*0.00100000<18.5000, 0.00000 }, 0.00000);
-    ALGEBRAIC(:,67) = power(STATES(:,17), CONSTANTS(:,119))./(power(CONSTANTS(:,120), CONSTANTS(:,119))+power(STATES(:,17), CONSTANTS(:,119)));
-    ALGEBRAIC(:,68) =  CONSTANTS(:,121).*(1.00000 - CONSTANTS(:,186)).*ALGEBRAIC(:,67).*(STATES(:,3) - CONSTANTS(:,63));
-    ALGEBRAIC(:,73) = ( STATES(:,30).*CONSTANTS(:,185).*1.00000)./(1.00000+power((ALGEBRAIC(:,72) - STATES(:,30))./ALGEBRAIC(:,71), 2.00000));
-    ALGEBRAIC(:,74) =  CONSTANTS(:,133).*(STATES(:,30) - ALGEBRAIC(:,73)).*(STATES(:,3) - CONSTANTS(:,169));
-    ALGEBRAIC(:,80) =  (( CONSTANTS(:,151).*CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194))./ - CONSTANTS(:,44)).*CONSTANTS(:,92).*ALGEBRAIC(:,78);
-    ALGEBRAIC(:,81) =  CONSTANTS(:,157).*(STATES(:,3) - CONSTANTS(:,170));
-    ALGEBRAIC(:,82) = ALGEBRAIC(:,53)+ALGEBRAIC(:,74)+ALGEBRAIC(:,37)+ALGEBRAIC(:,62)+ALGEBRAIC(:,81)+ALGEBRAIC(:,49)+ALGEBRAIC(:,43)+ALGEBRAIC(:,68)+ALGEBRAIC(:,80)+ALGEBRAIC(:,57)+ALGEBRAIC(:,64)+ALGEBRAIC(:,59)+ALGEBRAIC(:,66);
-    RATES(:,3) = ( - ALGEBRAIC(:,82)./CONSTANTS(:,158)).*0.00100000;
+    RATES(:,1) =  ((  - 1.00000.*1.00000)./CONSTANTS(:,12)).*(ALGEBRAIC(:,51)+ALGEBRAIC(:,43)+ALGEBRAIC(:,29)+ALGEBRAIC(:,35)+ALGEBRAIC(:,49)+ALGEBRAIC(:,53)+ALGEBRAIC(:,40)+ALGEBRAIC(:,57)+ALGEBRAIC(:,46)+  - 1.00000.*ALGEBRAIC(:,1));
+    ALGEBRAIC(:,38) =  CONSTANTS(:,78).*(STATES(:,3) - CONSTANTS(:,132));
+    ALGEBRAIC(:,41) = piecewise({VOI.*0.00100000>CONSTANTS(:,80)&VOI.*0.00100000<CONSTANTS(:,80)+CONSTANTS(:,81), CONSTANTS(:,79) }, 0.00000);
+    ALGEBRAIC(:,44) = power(STATES(:,17), CONSTANTS(:,82))./(power(CONSTANTS(:,83), CONSTANTS(:,82))+power(STATES(:,17), CONSTANTS(:,82)));
+    ALGEBRAIC(:,47) =  CONSTANTS(:,84).*(1.00000 - CONSTANTS(:,147)).*ALGEBRAIC(:,44).*(STATES(:,3) - CONSTANTS(:,64));
+    ALGEBRAIC(:,58) = ( STATES(:,21).*CONSTANTS(:,146).*1.00000)./(1.00000+power((ALGEBRAIC(:,56) - STATES(:,21))./ALGEBRAIC(:,54), 2.00000));
+    ALGEBRAIC(:,59) =  CONSTANTS(:,96).*(STATES(:,21) - ALGEBRAIC(:,58)).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,60) =  CONSTANTS(:,118).*(STATES(:,3) - CONSTANTS(:,131));
+    ALGEBRAIC(:,61) = ALGEBRAIC(:,34)+ALGEBRAIC(:,59)+ALGEBRAIC(:,28)+ALGEBRAIC(:,38)+ALGEBRAIC(:,60)+ALGEBRAIC(:,47)+ALGEBRAIC(:,41);
+    RATES(:,3) = ( - ALGEBRAIC(:,61)./CONSTANTS(:,119)).*0.00100000;
    RATES = RATES';
 end
 
@@ -796,82 +633,61 @@ function ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI)
     ALGEBRAIC(:,5) = 1.00000./(1.00000+exp((STATES(:,1)+27.5000)./ - 10.9000));
     ALGEBRAIC(:,9) = 1.00000./(1.00000+exp((STATES(:,1)+27.0000)./ - 5.00000));
     ALGEBRAIC(:,14) = 0.100000+0.900000./(1.00000+exp((STATES(:,1)+65.0000)./6.20000));
-    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,66))./CONSTANTS(:,67)));
-    ALGEBRAIC(:,18) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,69))./CONSTANTS(:,70)));
-    ALGEBRAIC(:,19) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,73))./CONSTANTS(:,74)));
-    ALGEBRAIC(:,21) = (0.530000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,83))./CONSTANTS(:,84)))+1.00000) - 0.530000;
-    ALGEBRAIC(:,22) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,93))./CONSTANTS(:,94)));
-    ALGEBRAIC(:,23) = (CONSTANTS(:,98)./(1.00000+exp((STATES(:,3) - CONSTANTS(:,96))./CONSTANTS(:,97)))+1.00000) - CONSTANTS(:,98);
-    ALGEBRAIC(:,24) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,101))./CONSTANTS(:,102)));
-    ALGEBRAIC(:,25) = (0.300000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,104))./CONSTANTS(:,105)))+1.00000) - 0.300000;
-    ALGEBRAIC(:,27) = (CONSTANTS(:,116)./(1.00000+exp((STATES(:,3) - CONSTANTS(:,114))./CONSTANTS(:,115)))+1.00000) - CONSTANTS(:,116);
-    ALGEBRAIC(:,28) = ( ( CONSTANTS(:,146).*CONSTANTS(:,175).*CONSTANTS(:,174)+ CONSTANTS(:,144).*CONSTANTS(:,176).*CONSTANTS(:,198)).*STATES(:,17))./( CONSTANTS(:,176).*CONSTANTS(:,175).*(CONSTANTS(:,174)+CONSTANTS(:,198)));
+    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,67))./CONSTANTS(:,68)));
+    ALGEBRAIC(:,18) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,70))./CONSTANTS(:,71)));
+    ALGEBRAIC(:,19) = ( ( CONSTANTS(:,109).*CONSTANTS(:,136).*CONSTANTS(:,135)+ CONSTANTS(:,107).*CONSTANTS(:,137).*CONSTANTS(:,159)).*STATES(:,17))./( CONSTANTS(:,137).*CONSTANTS(:,136).*(CONSTANTS(:,135)+CONSTANTS(:,159)));
     ALGEBRAIC(:,6) = 1.00000./(1.00000+exp((STATES(:,1)+15.8000)./7.00000));
-    ALGEBRAIC(:,30) =  CONSTANTS(:,161).*7.58000.*exp( STATES(:,1).*0.00817000);
-    ALGEBRAIC(:,8) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,34)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,34))+power(CONSTANTS(:,35), CONSTANTS(:,34)));
-    ALGEBRAIC(:,31) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
+    ALGEBRAIC(:,21) =  CONSTANTS(:,122).*7.58000.*exp( STATES(:,1).*0.00817000);
+    ALGEBRAIC(:,8) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,35)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,35))+power(CONSTANTS(:,36), CONSTANTS(:,35)));
+    ALGEBRAIC(:,22) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
     ALGEBRAIC(:,10) = 0.200000+0.800000./(1.00000+exp((STATES(:,1)+58.0000)./10.0000));
-    ALGEBRAIC(:,32) =  CONSTANTS(:,160).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
+    ALGEBRAIC(:,23) =  CONSTANTS(:,121).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
     ALGEBRAIC(:,11) = 1.00000./(1.00000+exp((STATES(:,1)+47.0000)./ - 4.80000));
-    ALGEBRAIC(:,33) =  CONSTANTS(:,159).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
+    ALGEBRAIC(:,24) =  CONSTANTS(:,120).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
     ALGEBRAIC(:,12) = 1.00000./(1.00000+exp((STATES(:,1)+78.0000)./3.00000));
-    ALGEBRAIC(:,34) =  CONSTANTS(:,159).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
+    ALGEBRAIC(:,25) =  CONSTANTS(:,120).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
     ALGEBRAIC(:,13) = 1.00000./(1.00000+exp((STATES(:,1)+26.5000)./ - 7.90000));
-    ALGEBRAIC(:,35) =  CONSTANTS(:,160).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
+    ALGEBRAIC(:,26) =  CONSTANTS(:,121).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
     ALGEBRAIC(:,15) = 1.00000./(1.00000+exp((STATES(:,1)+25.0000)./ - 20.0000));
-    ALGEBRAIC(:,36) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
-    ALGEBRAIC(:,38) = 1.00000./(CONSTANTS(:,79)+(CONSTANTS(:,80) - CONSTANTS(:,79))./(1.00000+exp( CONSTANTS(:,81).*(STATES(:,3) - CONSTANTS(:,82)))));
-    ALGEBRAIC(:,20) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,77))./CONSTANTS(:,78)));
-    ALGEBRAIC(:,26) = 1.00000./(1.00000+1.00000./(1.00000+exp( CONSTANTS(:,111).*(STATES(:,3) - CONSTANTS(:,112)))));
-    ALGEBRAIC(:,39) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,109))./CONSTANTS(:,110)));
-    ALGEBRAIC(:,29) =  0.500000.*CONSTANTS(:,164).*log(CONSTANTS(:,8)./STATES(:,2));
-    ALGEBRAIC(:,40) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,29));
-    ALGEBRAIC(:,44) =  0.500000.*CONSTANTS(:,164).*log(CONSTANTS(:,8)./STATES(:,2));
-    ALGEBRAIC(:,46) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,44));
-    ALGEBRAIC(:,42) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
-    ALGEBRAIC(:,58) =  CONSTANTS(:,39).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,191));
-    ALGEBRAIC(:,56) =  CONSTANTS(:,38).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,190));
-    ALGEBRAIC(:,60) =  CONSTANTS(:,40).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,193));
-    ALGEBRAIC(:,48) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
-    ALGEBRAIC(:,50) =  (CONSTANTS(:,20)+CONSTANTS(:,162)).*ALGEBRAIC(:,48).*(STATES(:,1) - CONSTANTS(:,183));
-    ALGEBRAIC(:,52) =  CONSTANTS(:,36).*STATES(:,9).*CONSTANTS(:,178).*(STATES(:,1) - CONSTANTS(:,187));
-    ALGEBRAIC(:,63) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
-    ALGEBRAIC(:,65) =  CONSTANTS(:,42).*STATES(:,16).*ALGEBRAIC(:,63).*CONSTANTS(:,168).*(STATES(:,1) - CONSTANTS(:,41));
-    ALGEBRAIC(:,54) =  CONSTANTS(:,37).*(STATES(:,1) - CONSTANTS(:,188));
+    ALGEBRAIC(:,27) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
+    ALGEBRAIC(:,20) =  0.500000.*CONSTANTS(:,125).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,29) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,20));
+    ALGEBRAIC(:,33) =  0.500000.*CONSTANTS(:,125).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,35) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,33));
+    ALGEBRAIC(:,31) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
+    ALGEBRAIC(:,39) = ( CONSTANTS(:,98).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,97), 2.00000)+power(STATES(:,17), 2.00000));
+    ALGEBRAIC(:,42) = power(( CONSTANTS(:,159).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (CONSTANTS(:,159)+CONSTANTS(:,135)).*(STATES(:,17)+CONSTANTS(:,138))), 3.00000);
+    ALGEBRAIC(:,45) =  ( CONSTANTS(:,111).*ALGEBRAIC(:,42)+CONSTANTS(:,112)).*(STATES(:,20) - STATES(:,17));
+    ALGEBRAIC(:,16) =  (( CONSTANTS(:,49).*CONSTANTS(:,47))./( CONSTANTS(:,48).*CONSTANTS(:,50))).*log(CONSTANTS(:,54)./STATES(:,17));
+    ALGEBRAIC(:,28) =  CONSTANTS(:,73).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,16));
+    ALGEBRAIC(:,30) = (  - CONSTANTS(:,45).*ALGEBRAIC(:,28))./( CONSTANTS(:,50).*CONSTANTS(:,48).*CONSTANTS(:,155));
+    ALGEBRAIC(:,32) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,74), CONSTANTS(:,75)));
+    ALGEBRAIC(:,34) =  CONSTANTS(:,76).*ALGEBRAIC(:,32).*(STATES(:,3) - ALGEBRAIC(:,16));
+    ALGEBRAIC(:,36) = (  - CONSTANTS(:,45).*CONSTANTS(:,77).*ALGEBRAIC(:,34))./( CONSTANTS(:,50).*CONSTANTS(:,48).*CONSTANTS(:,155));
+    ALGEBRAIC(:,48) = ( CONSTANTS(:,114).*CONSTANTS(:,115).*1.00000)./(1.00000+power(CONSTANTS(:,116)./STATES(:,17), CONSTANTS(:,117)));
+    ALGEBRAIC(:,50) = ( 1.00000e+15.*ALGEBRAIC(:,36).*CONSTANTS(:,155))./CONSTANTS(:,90);
+    ALGEBRAIC(:,52) = (((  - CONSTANTS(:,85).*CONSTANTS(:,88)+ALGEBRAIC(:,50)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,85).*STATES(:,17)) - ( CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88))./(CONSTANTS(:,88)+STATES(:,17)))+power((power(( CONSTANTS(:,85).*CONSTANTS(:,88)+ALGEBRAIC(:,50)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,85).*STATES(:,17)) - ( CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88))./(CONSTANTS(:,88)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,85).*CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,85));
+    ALGEBRAIC(:,54) =  CONSTANTS(:,91).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,52))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,52)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,52))))).*0.00100000;
+    ALGEBRAIC(:,56) = 1.00000./( (1.00000+exp( (CONSTANTS(:,94) - STATES(:,3)).*CONSTANTS(:,95))).*(1.00000+power(ALGEBRAIC(:,52)./( 1.39000.*exp(  - CONSTANTS(:,89).*STATES(:,3))),  - CONSTANTS(:,93))));
+    ALGEBRAIC(:,51) =  CONSTANTS(:,40).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,152));
+    ALGEBRAIC(:,49) =  CONSTANTS(:,39).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,151));
+    ALGEBRAIC(:,53) =  CONSTANTS(:,41).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,154));
+    ALGEBRAIC(:,37) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
+    ALGEBRAIC(:,40) =  (CONSTANTS(:,20)+CONSTANTS(:,123)).*ALGEBRAIC(:,37).*(STATES(:,1) - CONSTANTS(:,144));
+    ALGEBRAIC(:,43) =  CONSTANTS(:,37).*STATES(:,9).*CONSTANTS(:,139).*(STATES(:,1) - CONSTANTS(:,148));
+    ALGEBRAIC(:,55) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
+    ALGEBRAIC(:,57) =  CONSTANTS(:,43).*STATES(:,16).*ALGEBRAIC(:,55).*CONSTANTS(:,129).*(STATES(:,1) - CONSTANTS(:,42));
+    ALGEBRAIC(:,46) =  CONSTANTS(:,38).*(STATES(:,1) - CONSTANTS(:,149));
     ALGEBRAIC(:,1) =  CONSTANTS(:,16).*(STATES(:,3) - STATES(:,1));
-    ALGEBRAIC(:,16) =  (( CONSTANTS(:,48).*CONSTANTS(:,46))./( CONSTANTS(:,47).*CONSTANTS(:,49))).*log(CONSTANTS(:,53)./STATES(:,17));
-    ALGEBRAIC(:,51) = 1.00000./(1.00000+power(STATES(:,23)./CONSTANTS(:,89), CONSTANTS(:,90)));
-    ALGEBRAIC(:,53) =  CONSTANTS(:,91).*ALGEBRAIC(:,51).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,55) = (  - CONSTANTS(:,44).*CONSTANTS(:,92).*ALGEBRAIC(:,53))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,69) = ( 1.00000e+15.*ALGEBRAIC(:,55).*CONSTANTS(:,194))./CONSTANTS(:,127);
-    ALGEBRAIC(:,70) = (((  - CONSTANTS(:,122).*CONSTANTS(:,125)+ALGEBRAIC(:,69)./( 2.00000.* pi.*CONSTANTS(:,173))+ CONSTANTS(:,122).*STATES(:,17)) - ( CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125))./(CONSTANTS(:,125)+STATES(:,17)))+power((power(( CONSTANTS(:,122).*CONSTANTS(:,125)+ALGEBRAIC(:,69)./( 2.00000.* pi.*CONSTANTS(:,173))+ CONSTANTS(:,122).*STATES(:,17)) - ( CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125))./(CONSTANTS(:,125)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,122).*CONSTANTS(:,123).*CONSTANTS(:,124).*CONSTANTS(:,125)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,122));
-    ALGEBRAIC(:,71) =  CONSTANTS(:,128).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,70))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,70)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,70))))).*0.00100000;
-    ALGEBRAIC(:,72) = 1.00000./( (1.00000+exp( (CONSTANTS(:,131) - STATES(:,3)).*CONSTANTS(:,132))).*(1.00000+power(ALGEBRAIC(:,70)./( 1.39000.*exp(  - CONSTANTS(:,126).*STATES(:,3))),  - CONSTANTS(:,130))));
-    ALGEBRAIC(:,75) = ( CONSTANTS(:,135).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,134), 2.00000)+power(STATES(:,17), 2.00000));
-    ALGEBRAIC(:,76) = power(( CONSTANTS(:,198).*STATES(:,17).*(1.00000 - STATES(:,31)))./( (CONSTANTS(:,198)+CONSTANTS(:,174)).*(STATES(:,17)+CONSTANTS(:,177))), 3.00000);
-    ALGEBRAIC(:,77) =  ( CONSTANTS(:,148).*ALGEBRAIC(:,76)+CONSTANTS(:,149)).*(STATES(:,23) - STATES(:,17));
-    ALGEBRAIC(:,37) =  CONSTANTS(:,72).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,41) = (  - CONSTANTS(:,44).*ALGEBRAIC(:,37))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,43) =  CONSTANTS(:,76).*STATES(:,20).*(STATES(:,3) - ALGEBRAIC(:,16));
-    ALGEBRAIC(:,45) = (  - CONSTANTS(:,44).*ALGEBRAIC(:,43))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
-    ALGEBRAIC(:,78) = ( CONSTANTS(:,151).*CONSTANTS(:,152).*STATES(:,17))./(3.60000+STATES(:,17));
-    ALGEBRAIC(:,79) = ( CONSTANTS(:,153).*CONSTANTS(:,154).*1.00000)./(1.00000+power(CONSTANTS(:,155)./STATES(:,17), CONSTANTS(:,156)));
-    ALGEBRAIC(:,47) =  CONSTANTS(:,87).*STATES(:,22)+CONSTANTS(:,88);
-    ALGEBRAIC(:,49) =  CONSTANTS(:,86).*STATES(:,21).*ALGEBRAIC(:,47).*(STATES(:,3) - CONSTANTS(:,170));
-    ALGEBRAIC(:,57) =  CONSTANTS(:,100).*STATES(:,24).*STATES(:,25).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,59) =  CONSTANTS(:,107).*STATES(:,26).*STATES(:,27).*(STATES(:,3) - CONSTANTS(:,64));
-    ALGEBRAIC(:,62) =  CONSTANTS(:,108).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,64) =  CONSTANTS(:,118).*STATES(:,28).*STATES(:,29).*(STATES(:,3) - CONSTANTS(:,171));
-    ALGEBRAIC(:,66) = piecewise({VOI.*0.00100000>18.0000&VOI.*0.00100000<18.5000, 0.00000 }, 0.00000);
-    ALGEBRAIC(:,67) = power(STATES(:,17), CONSTANTS(:,119))./(power(CONSTANTS(:,120), CONSTANTS(:,119))+power(STATES(:,17), CONSTANTS(:,119)));
-    ALGEBRAIC(:,68) =  CONSTANTS(:,121).*(1.00000 - CONSTANTS(:,186)).*ALGEBRAIC(:,67).*(STATES(:,3) - CONSTANTS(:,63));
-    ALGEBRAIC(:,73) = ( STATES(:,30).*CONSTANTS(:,185).*1.00000)./(1.00000+power((ALGEBRAIC(:,72) - STATES(:,30))./ALGEBRAIC(:,71), 2.00000));
-    ALGEBRAIC(:,74) =  CONSTANTS(:,133).*(STATES(:,30) - ALGEBRAIC(:,73)).*(STATES(:,3) - CONSTANTS(:,169));
-    ALGEBRAIC(:,80) =  (( CONSTANTS(:,151).*CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194))./ - CONSTANTS(:,44)).*CONSTANTS(:,92).*ALGEBRAIC(:,78);
-    ALGEBRAIC(:,81) =  CONSTANTS(:,157).*(STATES(:,3) - CONSTANTS(:,170));
-    ALGEBRAIC(:,82) = ALGEBRAIC(:,53)+ALGEBRAIC(:,74)+ALGEBRAIC(:,37)+ALGEBRAIC(:,62)+ALGEBRAIC(:,81)+ALGEBRAIC(:,49)+ALGEBRAIC(:,43)+ALGEBRAIC(:,68)+ALGEBRAIC(:,80)+ALGEBRAIC(:,57)+ALGEBRAIC(:,64)+ALGEBRAIC(:,59)+ALGEBRAIC(:,66);
-    ALGEBRAIC(:,7) = ( CONSTANTS(:,23).*power(STATES(:,2).*1000.00, CONSTANTS(:,22)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,22))+power(CONSTANTS(:,196), CONSTANTS(:,22)));
-    ALGEBRAIC(:,61) = (  - CONSTANTS(:,44).*ALGEBRAIC(:,59))./( CONSTANTS(:,49).*CONSTANTS(:,47).*CONSTANTS(:,194));
+    ALGEBRAIC(:,38) =  CONSTANTS(:,78).*(STATES(:,3) - CONSTANTS(:,132));
+    ALGEBRAIC(:,41) = piecewise({VOI.*0.00100000>CONSTANTS(:,80)&VOI.*0.00100000<CONSTANTS(:,80)+CONSTANTS(:,81), CONSTANTS(:,79) }, 0.00000);
+    ALGEBRAIC(:,44) = power(STATES(:,17), CONSTANTS(:,82))./(power(CONSTANTS(:,83), CONSTANTS(:,82))+power(STATES(:,17), CONSTANTS(:,82)));
+    ALGEBRAIC(:,47) =  CONSTANTS(:,84).*(1.00000 - CONSTANTS(:,147)).*ALGEBRAIC(:,44).*(STATES(:,3) - CONSTANTS(:,64));
+    ALGEBRAIC(:,58) = ( STATES(:,21).*CONSTANTS(:,146).*1.00000)./(1.00000+power((ALGEBRAIC(:,56) - STATES(:,21))./ALGEBRAIC(:,54), 2.00000));
+    ALGEBRAIC(:,59) =  CONSTANTS(:,96).*(STATES(:,21) - ALGEBRAIC(:,58)).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,60) =  CONSTANTS(:,118).*(STATES(:,3) - CONSTANTS(:,131));
+    ALGEBRAIC(:,61) = ALGEBRAIC(:,34)+ALGEBRAIC(:,59)+ALGEBRAIC(:,28)+ALGEBRAIC(:,38)+ALGEBRAIC(:,60)+ALGEBRAIC(:,47)+ALGEBRAIC(:,41);
+    ALGEBRAIC(:,7) = ( CONSTANTS(:,23).*power(STATES(:,2).*1000.00, CONSTANTS(:,22)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,22))+power(CONSTANTS(:,157), CONSTANTS(:,22)));
 end
 
 % Compute result of a piecewise function
diff --git a/matlab_common/ICC_SMC_Neuro_Tvar.m b/matlab_common/ICC_SMC_Neuro_Tvar.m
index a9c9efc..d13668e 100644
--- a/matlab_common/ICC_SMC_Neuro_Tvar.m
+++ b/matlab_common/ICC_SMC_Neuro_Tvar.m
@@ -1,10 +1,10 @@
 
-function [VOI, STATES, ALGEBRAIC, CONSTANTS] = ICC_SMC_Neuro_Tvar(x_e, x_i, duration)
+function [VOI, STATES, ALGEBRAIC, CONSTANTS] = ICC_SMC_Neuro_Tvar(f_e, f_i, duration)
    % Solves the combined ICC and SMC model with neurotransmission using the fitted weights 
    % and scaling constants but applying sitmulation only between 120 - 180 s. 
    % INPUTS
-   % x_e: excitatory stimulation dosage in domain [0, 1]
-   % x_i: inhibitory stimulation dosage in domain [0, 1]
+   % f_e: excitatory stimulation frequency in domain [0, 10]
+   % f_i: inhibitory stimulation frequency in domain [0, 10]
    % duration (OPTIONAL): two element array of start and end time for
    %                      ode15s solver. Default [0 240000].
    %
@@ -20,7 +20,7 @@ function [VOI, STATES, ALGEBRAIC, CONSTANTS] = ICC_SMC_Neuro_Tvar(x_e, x_i, dura
     if nargin < 5
         duration = [0 240000];
     end
-   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(x_e, x_i, duration);
+   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(f_e, f_i, duration);
 end
 
 function [algebraicVariableCount] = getAlgebraicVariableCount()
@@ -29,14 +29,14 @@ function [algebraicVariableCount] = getAlgebraicVariableCount()
     algebraicVariableCount =72;
 end
 % There are a total of 22 entries in each of the rate and state variable arrays.
-% There are a total of 150 entries in the constant variable array.
+% There are a total of 151 entries in the constant variable array.
 %
 
-function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(x_e, x_i, duration)
+function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(f_e, f_i, duration)
     % Create ALGEBRAIC of correct size
     global algebraicVariableCount;  algebraicVariableCount = getAlgebraicVariableCount();
     % Initialise constants and state variables
-    [INIT_STATES, CONSTANTS] = initConsts(x_e, x_i);
+    [INIT_STATES, CONSTANTS] = initConsts(f_e, f_i);
 
     % Set timespan to solve over
     tspan = duration;
@@ -50,14 +50,6 @@ function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel(x_e, x_i, duration)
     % Compute algebraic variables
     [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS);
     ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI);
-
-    % Plot state variables against variable of integration
-%     [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends();
-%     figure();
-%     plot(VOI, STATES);
-%     xlabel(LEGEND_VOI);
-%     l = legend(LEGEND_STATES);
-%     set(l,'Interpreter','none');
 end
 
 function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends()
@@ -74,12 +66,12 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_CONSTANTS(:,9) = strpad('Na_o in component Environment (millimolar)');
     LEGEND_CONSTANTS(:,10) = strpad('K_o in component Environment (millimolar)');
     LEGEND_CONSTANTS(:,11) = strpad('Cl_o in component Environment (millimolar)');
-    LEGEND_CONSTANTS(:,121) = strpad('T_correction_Na in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,122) = strpad('T_correction_K in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,123) = strpad('T_correction_Ca in component Environment (dimensionless)');
-    LEGEND_CONSTANTS(:,124) = strpad('T_correction_BK in component Environment (conductance_units)');
-    LEGEND_CONSTANTS(:,125) = strpad('FoRT in component Environment (Inverse_Voltage_units)');
-    LEGEND_CONSTANTS(:,126) = strpad('RToF in component Environment (voltage_units)');
+    LEGEND_CONSTANTS(:,122) = strpad('T_correction_Na in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,123) = strpad('T_correction_K in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,124) = strpad('T_correction_Ca in component Environment (dimensionless)');
+    LEGEND_CONSTANTS(:,125) = strpad('T_correction_BK in component Environment (conductance_units)');
+    LEGEND_CONSTANTS(:,126) = strpad('FoRT in component Environment (Inverse_Voltage_units)');
+    LEGEND_CONSTANTS(:,127) = strpad('RToF in component Environment (voltage_units)');
     LEGEND_CONSTANTS(:,12) = strpad('Cm_SM in component SM_Membrane (capacitance_units)');
     LEGEND_CONSTANTS(:,13) = strpad('Vol_SM in component SM_Membrane (volume_units)');
     LEGEND_STATES(:,1) = strpad('Vm_SM in component SM_Membrane (voltage_units)');
@@ -101,19 +93,19 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_CONSTANTS(:,16) = strpad('g_couple in component I_couple (conductance_units)');
     LEGEND_STATES(:,3) = strpad('Vm in component ICC_Membrane (voltage_units)');
     LEGEND_ALGEBRAIC(:,1) = strpad('d_inf_Ltype_SM in component d_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,138) = strpad('tau_d_Ltype_SM in component d_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,139) = strpad('tau_d_Ltype_SM in component d_Ltype_SM (time_units)');
     LEGEND_STATES(:,4) = strpad('d_Ltype_SM in component d_Ltype_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,2) = strpad('f_inf_Ltype_SM in component f_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,139) = strpad('tau_f_Ltype_SM in component f_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,140) = strpad('tau_f_Ltype_SM in component f_Ltype_SM (time_units)');
     LEGEND_STATES(:,5) = strpad('f_Ltype_SM in component f_Ltype_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,3) = strpad('f_ca_inf_Ltype_SM in component f_ca_Ltype_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,140) = strpad('tau_f_ca_Ltype_SM in component f_ca_Ltype_SM (time_units)');
+    LEGEND_CONSTANTS(:,141) = strpad('tau_f_ca_Ltype_SM in component f_ca_Ltype_SM (time_units)');
     LEGEND_STATES(:,6) = strpad('f_ca_Ltype_SM in component f_ca_Ltype_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,19) = strpad('E_Ca in component I_Ltype_SM (voltage_units)');
     LEGEND_CONSTANTS(:,17) = strpad('G_max_Ltype in component I_Ltype_SM (conductance_units)');
     LEGEND_CONSTANTS(:,18) = strpad('J_max_CaSR in component J_CaSR_SM (millimolar_per_millisecond)');
     LEGEND_ALGEBRAIC(:,4) = strpad('d_inf_LVA_SM in component d_LVA_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,141) = strpad('tau_d_LVA_SM in component d_LVA_SM (time_units)');
+    LEGEND_CONSTANTS(:,142) = strpad('tau_d_LVA_SM in component d_LVA_SM (time_units)');
     LEGEND_STATES(:,7) = strpad('d_LVA_SM in component d_LVA_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,5) = strpad('f_inf_LVA_SM in component f_LVA_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,18) = strpad('tau_f_LVA_SM in component f_LVA_SM (time_units)');
@@ -121,7 +113,7 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_ALGEBRAIC(:,31) = strpad('E_Ca in component I_LVA_SM (voltage_units)');
     LEGEND_CONSTANTS(:,19) = strpad('G_max_LVA in component I_LVA_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,35) = strpad('d_BK_SM in component d_BK_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,142) = strpad('E_K in component I_BK_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,143) = strpad('E_K in component I_BK_SM (voltage_units)');
     LEGEND_CONSTANTS(:,20) = strpad('G_max_BK in component I_BK_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,48) = strpad('T in component active_tension (kilopascals)');
     LEGEND_CONSTANTS(:,21) = strpad('Ca50_0 in component active_tension (micromolar)');
@@ -129,183 +121,184 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_ALGEBRAIC(:,45) = strpad('Ca50 in component active_tension (micromolar)');
     LEGEND_CONSTANTS(:,22) = strpad('h in component active_tension (dimensionless)');
     LEGEND_CONSTANTS(:,23) = strpad('T_max in component active_tension (kilopascals)');
-    LEGEND_CONSTANTS(:,24) = strpad('x_e in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,25) = strpad('x_i in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,24) = strpad('f_e in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,25) = strpad('f_i in component neural_input (dimensionless)');
     LEGEND_CONSTANTS(:,26) = strpad('ns_start in component neural_input (time_units_ICC)');
     LEGEND_CONSTANTS(:,27) = strpad('ns_end in component neural_input (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,15) = strpad('w_iICC in component neural_input (dimensionless)');
     LEGEND_ALGEBRAIC(:,39) = strpad('w_iSMC in component neural_input (dimensionless)');
     LEGEND_ALGEBRAIC(:,26) = strpad('w_e in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,28) = strpad('k_iAno1 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,29) = strpad('k_iNSCC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,30) = strpad('k_iCa50 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,31) = strpad('k_iSK in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,32) = strpad('k_eIP3 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,28) = strpad('f_max in component neural_input (Hertz)');
+    LEGEND_CONSTANTS(:,29) = strpad('k_iAno1 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,30) = strpad('k_iNSCC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,31) = strpad('k_iCa50 in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,32) = strpad('k_iSK in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,33) = strpad('k_eIP3 in component neural_input (dimensionless)');
     LEGEND_ALGEBRAIC(:,28) = strpad('S_iAno1 in component neural_input (dimensionless)');
     LEGEND_ALGEBRAIC(:,30) = strpad('S_iNSCC in component neural_input (dimensionless)');
     LEGEND_ALGEBRAIC(:,32) = strpad('S_eIP3 in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,33) = strpad('p_iICC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,34) = strpad('p_iSMC in component neural_input (dimensionless)');
-    LEGEND_CONSTANTS(:,35) = strpad('p_e in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,34) = strpad('p_iICC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,35) = strpad('p_iSMC in component neural_input (dimensionless)');
+    LEGEND_CONSTANTS(:,36) = strpad('p_e in component neural_input (dimensionless)');
     LEGEND_STATES(:,9) = strpad('x_SK_SM in component x_SK_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,7) = strpad('x_SK_inf_SM in component x_SK_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,20) = strpad('tau_x_SK_SM in component x_SK_SM (time_units)');
-    LEGEND_CONSTANTS(:,36) = strpad('n in component x_SK_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,37) = strpad('EC50 in component x_SK_SM (micromolar)');
-    LEGEND_CONSTANTS(:,143) = strpad('E_K in component I_SK_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,38) = strpad('G_max_SK in component I_SK_SM (conductance_units)');
-    LEGEND_CONSTANTS(:,144) = strpad('E_K in component I_bk_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,39) = strpad('G_max_bk in component I_bk_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,37) = strpad('n in component x_SK_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,38) = strpad('EC50 in component x_SK_SM (micromolar)');
+    LEGEND_CONSTANTS(:,144) = strpad('E_K in component I_SK_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,39) = strpad('G_max_SK in component I_SK_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,145) = strpad('E_K in component I_bk_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,40) = strpad('G_max_bk in component I_bk_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,8) = strpad('xr1_inf_SM in component xr1_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,145) = strpad('tau_xr1_SM in component xr1_SM (time_units)');
+    LEGEND_CONSTANTS(:,146) = strpad('tau_xr1_SM in component xr1_SM (time_units)');
     LEGEND_STATES(:,10) = strpad('xr1_SM in component xr1_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,9) = strpad('xr2_inf_SM in component xr2_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,21) = strpad('tau_xr2_SM in component xr2_SM (time_units)');
     LEGEND_STATES(:,11) = strpad('xr2_SM in component xr2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,146) = strpad('E_K in component I_kr_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,40) = strpad('G_max_kr_SM in component I_kr_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,147) = strpad('E_K in component I_kr_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,41) = strpad('G_max_kr_SM in component I_kr_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,10) = strpad('m_inf_Na in component m_Na_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,22) = strpad('tau_m_Na in component m_Na_SM (time_units)');
     LEGEND_STATES(:,12) = strpad('m_Na_SM in component m_Na_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,11) = strpad('h_inf_Na in component h_Na_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,23) = strpad('tau_h_Na in component h_Na_SM (time_units)');
     LEGEND_STATES(:,13) = strpad('h_Na_SM in component h_Na_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,147) = strpad('E_Na in component I_Na_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,41) = strpad('G_max_Na_SM in component I_Na_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,148) = strpad('E_Na in component I_Na_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,42) = strpad('G_max_Na_SM in component I_Na_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,12) = strpad('xa1_inf_SM in component xa1_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,24) = strpad('tau_xa1_SM in component xa1_SM (time_units)');
     LEGEND_STATES(:,14) = strpad('xa1_SM in component xa1_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,13) = strpad('xa2_inf_SM in component xa2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,148) = strpad('tau_xa2_SM in component xa2_SM (time_units)');
+    LEGEND_CONSTANTS(:,149) = strpad('tau_xa2_SM in component xa2_SM (time_units)');
     LEGEND_STATES(:,15) = strpad('xa2_SM in component xa2_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,149) = strpad('E_K in component I_ka_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,42) = strpad('G_max_ka_SM in component I_ka_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,150) = strpad('E_K in component I_ka_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,43) = strpad('G_max_ka_SM in component I_ka_SM (conductance_units)');
     LEGEND_ALGEBRAIC(:,14) = strpad('m_inf_NSCC_SM in component m_NSCC_SM (dimensionless)');
     LEGEND_ALGEBRAIC(:,25) = strpad('tau_m_NSCC_SM in component m_NSCC_SM (time_units)');
     LEGEND_STATES(:,16) = strpad('m_NSCC_SM in component m_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,43) = strpad('E_NSCC in component I_NSCC_SM (voltage_units)');
-    LEGEND_CONSTANTS(:,44) = strpad('G_max_NSCC_SM in component I_NSCC_SM (conductance_units)');
-    LEGEND_CONSTANTS(:,45) = strpad('Ach in component I_NSCC_SM (millimolar)');
+    LEGEND_CONSTANTS(:,44) = strpad('E_NSCC in component I_NSCC_SM (voltage_units)');
+    LEGEND_CONSTANTS(:,45) = strpad('G_max_NSCC_SM in component I_NSCC_SM (conductance_units)');
+    LEGEND_CONSTANTS(:,46) = strpad('Ach in component I_NSCC_SM (millimolar)');
     LEGEND_ALGEBRAIC(:,62) = strpad('f_ca_NSCC_SM in component I_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,128) = strpad('rach_NSCC_SM in component I_NSCC_SM (dimensionless)');
-    LEGEND_CONSTANTS(:,46) = strpad('p2m in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,47) = strpad('umc2L in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,48) = strpad('T in component Parameters (Temperature_units)');
-    LEGEND_CONSTANTS(:,49) = strpad('F in component Parameters (F_units_ICC)');
-    LEGEND_CONSTANTS(:,50) = strpad('R in component Parameters (R_units_ICC)');
-    LEGEND_CONSTANTS(:,51) = strpad('z_ca in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,52) = strpad('z_na in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,53) = strpad('z_k in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,54) = strpad('z_cl in component Parameters (dimensionless)');
-    LEGEND_CONSTANTS(:,55) = strpad('Ca_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,56) = strpad('Cl_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,57) = strpad('Cl_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,58) = strpad('K_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,59) = strpad('K_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,60) = strpad('Na_i in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,61) = strpad('Na_o in component Parameters (micromolar)');
-    LEGEND_CONSTANTS(:,62) = strpad('cellVol in component Volume (litre)');
-    LEGEND_CONSTANTS(:,63) = strpad('cellPropER in component Volume (dimensionless)');
-    LEGEND_CONSTANTS(:,64) = strpad('cellPropCyto in component Volume (dimensionless)');
-    LEGEND_CONSTANTS(:,132) = strpad('volER in component Volume (litre)');
-    LEGEND_CONSTANTS(:,150) = strpad('volCyto in component Volume (litre)');
+    LEGEND_CONSTANTS(:,129) = strpad('rach_NSCC_SM in component I_NSCC_SM (dimensionless)');
+    LEGEND_CONSTANTS(:,47) = strpad('p2m in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,48) = strpad('umc2L in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,49) = strpad('T in component Parameters (Temperature_units)');
+    LEGEND_CONSTANTS(:,50) = strpad('F in component Parameters (F_units_ICC)');
+    LEGEND_CONSTANTS(:,51) = strpad('R in component Parameters (R_units_ICC)');
+    LEGEND_CONSTANTS(:,52) = strpad('z_ca in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,53) = strpad('z_na in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,54) = strpad('z_k in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,55) = strpad('z_cl in component Parameters (dimensionless)');
+    LEGEND_CONSTANTS(:,56) = strpad('Ca_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,57) = strpad('Cl_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,58) = strpad('Cl_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,59) = strpad('K_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,60) = strpad('K_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,61) = strpad('Na_i in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,62) = strpad('Na_o in component Parameters (micromolar)');
+    LEGEND_CONSTANTS(:,63) = strpad('cellVol in component Volume (litre)');
+    LEGEND_CONSTANTS(:,64) = strpad('cellPropER in component Volume (dimensionless)');
+    LEGEND_CONSTANTS(:,65) = strpad('cellPropCyto in component Volume (dimensionless)');
+    LEGEND_CONSTANTS(:,133) = strpad('volER in component Volume (litre)');
+    LEGEND_CONSTANTS(:,151) = strpad('volCyto in component Volume (litre)');
     LEGEND_STATES(:,17) = strpad('Ca_i in component ICC_Membrane (micromolar)');
-    LEGEND_CONSTANTS(:,65) = strpad('E_NSCC in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,66) = strpad('E_NSV in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,67) = strpad('E_SOC in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,66) = strpad('E_NSCC in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,67) = strpad('E_NSV in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,68) = strpad('E_SOC in component Nernst (voltage_units)');
     LEGEND_ALGEBRAIC(:,34) = strpad('E_Ca in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,129) = strpad('E_Cl in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,130) = strpad('E_Na in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,131) = strpad('E_K in component Nernst (voltage_units)');
-    LEGEND_CONSTANTS(:,68) = strpad('d_CaT_Vh in component d_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,69) = strpad('d_CaT_S in component d_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,70) = strpad('d_CaT_tau in component d_CaT (time_units_ICC)');
+    LEGEND_CONSTANTS(:,130) = strpad('E_Cl in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,131) = strpad('E_Na in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,132) = strpad('E_K in component Nernst (voltage_units)');
+    LEGEND_CONSTANTS(:,69) = strpad('d_CaT_Vh in component d_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,70) = strpad('d_CaT_S in component d_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,71) = strpad('d_CaT_tau in component d_CaT (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,16) = strpad('d_CaT_inf in component d_CaT (dimensionless)');
     LEGEND_STATES(:,18) = strpad('d_CaT in component d_CaT (dimensionless)');
-    LEGEND_CONSTANTS(:,71) = strpad('f_CaT_Vh in component f_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,72) = strpad('f_CaT_S in component f_CaT (voltage_units)');
-    LEGEND_CONSTANTS(:,73) = strpad('f_CaT_tau in component f_CaT (time_units_ICC)');
+    LEGEND_CONSTANTS(:,72) = strpad('f_CaT_Vh in component f_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,73) = strpad('f_CaT_S in component f_CaT (voltage_units)');
+    LEGEND_CONSTANTS(:,74) = strpad('f_CaT_tau in component f_CaT (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,17) = strpad('f_CaT_inf in component f_CaT (dimensionless)');
     LEGEND_STATES(:,19) = strpad('f_CaT in component f_CaT (dimensionless)');
-    LEGEND_CONSTANTS(:,74) = strpad('g_CaT in component I_CaT (conductance_units)');
+    LEGEND_CONSTANTS(:,75) = strpad('g_CaT in component I_CaT (conductance_units)');
     LEGEND_ALGEBRAIC(:,36) = strpad('I_CaT in component I_CaT (current_units)');
     LEGEND_ALGEBRAIC(:,38) = strpad('J_CaT in component I_CaT (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,75) = strpad('SOC_h in component P_SOC (micromolar)');
+    LEGEND_CONSTANTS(:,76) = strpad('SOC_h in component P_SOC (micromolar)');
     LEGEND_STATES(:,20) = strpad('Ca_er in component Ca_er (micromolar)');
-    LEGEND_CONSTANTS(:,76) = strpad('SOC_n in component P_SOC (dimensionless)');
+    LEGEND_CONSTANTS(:,77) = strpad('SOC_n in component P_SOC (dimensionless)');
     LEGEND_ALGEBRAIC(:,40) = strpad('P_SOC in component P_SOC (dimensionless)');
-    LEGEND_CONSTANTS(:,77) = strpad('g_SOC in component I_SOC (conductance_units)');
-    LEGEND_CONSTANTS(:,78) = strpad('SOCPropCa in component I_SOC (dimensionless)');
+    LEGEND_CONSTANTS(:,78) = strpad('g_SOC in component I_SOC (conductance_units)');
+    LEGEND_CONSTANTS(:,79) = strpad('SOCPropCa in component I_SOC (dimensionless)');
     LEGEND_ALGEBRAIC(:,43) = strpad('I_SOC in component I_SOC (current_units)');
     LEGEND_ALGEBRAIC(:,46) = strpad('J_SOC in component I_SOC (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,79) = strpad('g_BK in component I_BK (conductance_units)');
+    LEGEND_CONSTANTS(:,80) = strpad('g_BK in component I_BK (conductance_units)');
     LEGEND_ALGEBRAIC(:,49) = strpad('I_BK in component I_BK (current_units)');
     LEGEND_ALGEBRAIC(:,52) = strpad('I_stim in component I_stim (current_units)');
-    LEGEND_CONSTANTS(:,80) = strpad('stim_amp in component I_stim (current_units)');
-    LEGEND_CONSTANTS(:,81) = strpad('stim_start in component I_stim (time_units)');
-    LEGEND_CONSTANTS(:,82) = strpad('stim_PW in component I_stim (time_units)');
+    LEGEND_CONSTANTS(:,81) = strpad('stim_amp in component I_stim (current_units)');
+    LEGEND_CONSTANTS(:,82) = strpad('stim_start in component I_stim (time_units_ICC)');
+    LEGEND_CONSTANTS(:,83) = strpad('stim_PW in component I_stim (time_units_ICC)');
     LEGEND_ALGEBRAIC(:,55) = strpad('P_NSCC in component P_NSCC (dimensionless)');
-    LEGEND_CONSTANTS(:,83) = strpad('n_NSCC in component P_NSCC (dimensionless)');
-    LEGEND_CONSTANTS(:,84) = strpad('Ca_NSCC in component P_NSCC (micromolar)');
-    LEGEND_CONSTANTS(:,85) = strpad('g_NSCC in component I_NSCC (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,84) = strpad('n_NSCC in component P_NSCC (dimensionless)');
+    LEGEND_CONSTANTS(:,85) = strpad('Ca_NSCC in component P_NSCC (micromolar)');
+    LEGEND_CONSTANTS(:,86) = strpad('g_NSCC in component I_NSCC (conductance_units)');
     LEGEND_ALGEBRAIC(:,59) = strpad('I_NSCC in component I_NSCC (current_units)');
-    LEGEND_CONSTANTS(:,86) = strpad('Dc in component d_Ano1 (micrometer2_per_time)');
-    LEGEND_CONSTANTS(:,87) = strpad('Dm in component d_Ano1 (micrometer2_per_time)');
-    LEGEND_CONSTANTS(:,88) = strpad('Bm in component d_Ano1 (micromolar)');
-    LEGEND_CONSTANTS(:,89) = strpad('Km in component d_Ano1 (micromolar)');
-    LEGEND_CONSTANTS(:,90) = strpad('kc in component d_Ano1 (Inverse_Voltage_ICC)');
-    LEGEND_CONSTANTS(:,91) = strpad('nSOC in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,133) = strpad('rad in component d_Ano1 (micrometer)');
+    LEGEND_CONSTANTS(:,87) = strpad('Dc in component d_Ano1 (micrometer2_per_time)');
+    LEGEND_CONSTANTS(:,88) = strpad('Dm in component d_Ano1 (micrometer2_per_time)');
+    LEGEND_CONSTANTS(:,89) = strpad('Bm in component d_Ano1 (micromolar)');
+    LEGEND_CONSTANTS(:,90) = strpad('Km in component d_Ano1 (micromolar)');
+    LEGEND_CONSTANTS(:,91) = strpad('kc in component d_Ano1 (Inverse_Voltage_ICC)');
+    LEGEND_CONSTANTS(:,92) = strpad('nSOC in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,134) = strpad('rad in component d_Ano1 (micrometer)');
     LEGEND_ALGEBRAIC(:,63) = strpad('mouthCa in component d_Ano1 (micromolar_per_second)');
     LEGEND_ALGEBRAIC(:,66) = strpad('localCa in component d_Ano1 (micromolar)');
     LEGEND_ALGEBRAIC(:,67) = strpad('d_Ano1_tau in component d_Ano1 (time_units_ICC)');
-    LEGEND_CONSTANTS(:,92) = strpad('d_Ano1_tscale in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,93) = strpad('colocalRadius in component d_Ano1 (micrometer)');
+    LEGEND_CONSTANTS(:,93) = strpad('d_Ano1_tscale in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,94) = strpad('colocalRadius in component d_Ano1 (micrometer)');
     LEGEND_ALGEBRAIC(:,68) = strpad('d_Ano1_inf in component d_Ano1 (dimensionless)');
     LEGEND_STATES(:,21) = strpad('d_Ano1 in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,94) = strpad('Ano1_n in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,95) = strpad('Ano1_Vh in component d_Ano1 (voltage_units)');
-    LEGEND_CONSTANTS(:,96) = strpad('Ano1_s in component d_Ano1 (voltage_units)');
+    LEGEND_CONSTANTS(:,95) = strpad('Ano1_n in component d_Ano1 (dimensionless)');
+    LEGEND_CONSTANTS(:,96) = strpad('Ano1_Vh in component d_Ano1 (voltage_units)');
+    LEGEND_CONSTANTS(:,97) = strpad('Ano1_s in component d_Ano1 (Inverse_Voltage_ICC)');
     LEGEND_ALGEBRAIC(:,69) = strpad('h_Ano1 in component d_Ano1 (dimensionless)');
-    LEGEND_CONSTANTS(:,97) = strpad('g_Ano1 in component I_Ano1 (conductance_units)');
+    LEGEND_CONSTANTS(:,98) = strpad('g_Ano1 in component I_Ano1 (conductance_units)');
     LEGEND_ALGEBRAIC(:,70) = strpad('I_Ano1 in component I_Ano1 (current_units)');
-    LEGEND_CONSTANTS(:,98) = strpad('Ke in component J_SERCA (micromolar)');
+    LEGEND_CONSTANTS(:,99) = strpad('Ke in component J_SERCA (micromolar)');
     LEGEND_ALGEBRAIC(:,50) = strpad('J_SERCA in component J_SERCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,99) = strpad('Ve in component J_SERCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,100) = strpad('fc in component J_SERCA (dimensionless)');
-    LEGEND_CONSTANTS(:,101) = strpad('fe in component J_SERCA (dimensionless)');
+    LEGEND_CONSTANTS(:,100) = strpad('Ve in component J_SERCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,101) = strpad('fc in component J_SERCA (dimensionless)');
+    LEGEND_CONSTANTS(:,102) = strpad('fe in component J_SERCA (dimensionless)');
     LEGEND_ALGEBRAIC(:,60) = strpad('J_IPR in component J_IPR (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,102) = strpad('k1 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,103) = strpad('k2 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,104) = strpad('k3 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,105) = strpad('k4 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,106) = strpad('k5 in component y_bind (per_micromolarsecond)');
-    LEGEND_CONSTANTS(:,107) = strpad('k_1 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,108) = strpad('k_2 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,109) = strpad('k_3 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,110) = strpad('k_4 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,111) = strpad('k_5 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,103) = strpad('k1 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,104) = strpad('k2 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,105) = strpad('k3 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,106) = strpad('k4 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,107) = strpad('k5 in component y_bind (per_micromolarsecond)');
+    LEGEND_CONSTANTS(:,108) = strpad('k_1 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,109) = strpad('k_2 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,110) = strpad('k_3 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,111) = strpad('k_4 in component y_bind (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,112) = strpad('k_5 in component y_bind (rate_constants_units_second)');
     LEGEND_ALGEBRAIC(:,53) = strpad('IP3 in component J_IPR (micromolar)');
-    LEGEND_CONSTANTS(:,134) = strpad('K1 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,135) = strpad('K2 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,127) = strpad('K3 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,136) = strpad('K4 in component y_bind (micromolar)');
-    LEGEND_CONSTANTS(:,137) = strpad('K5 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,135) = strpad('K1 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,136) = strpad('K2 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,128) = strpad('K3 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,137) = strpad('K4 in component y_bind (micromolar)');
+    LEGEND_CONSTANTS(:,138) = strpad('K5 in component y_bind (micromolar)');
     LEGEND_STATES(:,22) = strpad('y in component y_bind (dimensionless)');
     LEGEND_ALGEBRAIC(:,57) = strpad('phi1 in component y_bind (rate_constants_units_second)');
     LEGEND_ALGEBRAIC(:,61) = strpad('phi2 in component y_bind (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,112) = strpad('kipr in component J_IPR (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,113) = strpad('kipr in component J_IPR (rate_constants_units_second)');
     LEGEND_ALGEBRAIC(:,56) = strpad('Pipr in component J_IPR (dimensionless)');
-    LEGEND_CONSTANTS(:,113) = strpad('Jer in component J_IPR (rate_constants_units_second)');
-    LEGEND_CONSTANTS(:,114) = strpad('IP3_base in component J_IPR (micromolar)');
-    LEGEND_CONSTANTS(:,115) = strpad('g_PMCA in component J_PMCA (dimensionless)');
-    LEGEND_CONSTANTS(:,116) = strpad('J_PMCA_max in component J_PMCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,117) = strpad('K_PMCA in component J_PMCA (micromolar)');
-    LEGEND_CONSTANTS(:,118) = strpad('n_PMCA in component J_PMCA (dimensionless)');
+    LEGEND_CONSTANTS(:,114) = strpad('Jer in component J_IPR (rate_constants_units_second)');
+    LEGEND_CONSTANTS(:,115) = strpad('IP3_base in component J_IPR (micromolar)');
+    LEGEND_CONSTANTS(:,116) = strpad('g_PMCA in component J_PMCA (dimensionless)');
+    LEGEND_CONSTANTS(:,117) = strpad('J_PMCA_max in component J_PMCA (micromolar_per_second)');
+    LEGEND_CONSTANTS(:,118) = strpad('K_PMCA in component J_PMCA (micromolar)');
+    LEGEND_CONSTANTS(:,119) = strpad('n_PMCA in component J_PMCA (dimensionless)');
     LEGEND_ALGEBRAIC(:,64) = strpad('J_PMCA in component J_PMCA (micromolar_per_second)');
-    LEGEND_CONSTANTS(:,119) = strpad('g_BNa in component I_BNa (conductance_units)');
+    LEGEND_CONSTANTS(:,120) = strpad('g_BNa in component I_BNa (conductance_units)');
     LEGEND_ALGEBRAIC(:,71) = strpad('I_BNa in component I_BNa (current_units)');
-    LEGEND_CONSTANTS(:,120) = strpad('Cm in component ICC_Membrane (capacitance_units_ICC)');
+    LEGEND_CONSTANTS(:,121) = strpad('Cm in component ICC_Membrane (capacitance_units_ICC)');
     LEGEND_ALGEBRAIC(:,72) = strpad('Iion in component ICC_Membrane (current_units)');
     LEGEND_RATES(:,1) = strpad('d/dt Vm_SM in component SM_Membrane (voltage_units)');
     LEGEND_RATES(:,2) = strpad('d/dt Ca_i in component SM_Membrane (millimolar)');
@@ -335,7 +328,7 @@ function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = creat
     LEGEND_CONSTANTS = LEGEND_CONSTANTS';
 end
 
-function [STATES, CONSTANTS] = initConsts(x_e, x_i)
+function [STATES, CONSTANTS] = initConsts(f_e, f_i)
     VOI = 0; CONSTANTS = []; STATES = []; ALGEBRAIC = [];
     CONSTANTS(:,1) = 310;
     CONSTANTS(:,2) = 297;
@@ -368,147 +361,153 @@ function [STATES, CONSTANTS] = initConsts(x_e, x_i)
     CONSTANTS(:,21) = 0.5623413;
     CONSTANTS(:,22) = 3.4;
     CONSTANTS(:,23) = 313;
-    CONSTANTS(:,24) = x_e;
-    CONSTANTS(:,25) = x_i;
+    CONSTANTS(:,24) = f_e;
+    CONSTANTS(:,25) = f_i;
     CONSTANTS(:,26) = 120;
     CONSTANTS(:,27) = 180;
-    CONSTANTS(:,28) = 0.326;
-    CONSTANTS(:,29) = 0.775;
-    CONSTANTS(:,30) = 0.882;
-    CONSTANTS(:,31) = 0.441;
-    CONSTANTS(:,32) = 0.92;
-    CONSTANTS(:,33) = 3.17;
-    CONSTANTS(:,34) = 1.17;
-    CONSTANTS(:,35) = 5;
+    CONSTANTS(:,28) = 10;
+    CONSTANTS(:,29) = 0.326;
+    CONSTANTS(:,30) = 0.775;
+    CONSTANTS(:,31) = 0.882;
+    CONSTANTS(:,32) = 0.441;
+    CONSTANTS(:,33) = 0.92;
+    CONSTANTS(:,34) = 3.17;
+    CONSTANTS(:,35) = 1.17;
+    CONSTANTS(:,36) = 5;
     STATES(:,9) = 0;
-    CONSTANTS(:,36) = 2;
-    CONSTANTS(:,37) = 0.3;
-    CONSTANTS(:,38) = 3.5;
-    CONSTANTS(:,39) = 0.0144;
+    CONSTANTS(:,37) = 2;
+    CONSTANTS(:,38) = 0.3;
+    CONSTANTS(:,39) = 3.5;
+    CONSTANTS(:,40) = 0.0144;
     STATES(:,10) = 0.0;
     STATES(:,11) = 0.82;
-    CONSTANTS(:,40) = 35;
+    CONSTANTS(:,41) = 35;
     STATES(:,12) = 0.005;
     STATES(:,13) = 0.05787;
-    CONSTANTS(:,41) = 3;
+    CONSTANTS(:,42) = 3;
     STATES(:,14) = 0.00414;
     STATES(:,15) = 0.72;
-    CONSTANTS(:,42) = 9;
+    CONSTANTS(:,43) = 9;
     STATES(:,16) = 0.0;
-    CONSTANTS(:,43) = -28;
-    CONSTANTS(:,44) = 50;
-    CONSTANTS(:,45) = 0.00001;
-    CONSTANTS(:,46) = 1e-09;
-    CONSTANTS(:,47) = 1e+15;
-    CONSTANTS(:,48) = 310;
-    CONSTANTS(:,49) = 96.4846;
-    CONSTANTS(:,50) = 8.3144;
-    CONSTANTS(:,51) = 2;
-    CONSTANTS(:,52) = 1;
+    CONSTANTS(:,44) = -28;
+    CONSTANTS(:,45) = 50;
+    CONSTANTS(:,46) = 0.00001;
+    CONSTANTS(:,47) = 1e-09;
+    CONSTANTS(:,48) = 1e+15;
+    CONSTANTS(:,49) = 310;
+    CONSTANTS(:,50) = 96.4846;
+    CONSTANTS(:,51) = 8.3144;
+    CONSTANTS(:,52) = 2;
+						
     CONSTANTS(:,53) = 1;
-    CONSTANTS(:,54) = -1;
-    CONSTANTS(:,55) = 2000;
-    CONSTANTS(:,56) = 78000;
-    CONSTANTS(:,57) = 166000;
-    CONSTANTS(:,58) = 140000;
-    CONSTANTS(:,59) = 5000;
-    CONSTANTS(:,60) = 30000;
-    CONSTANTS(:,61) = 140000;
-    CONSTANTS(:,62) = 1e-12;
-    CONSTANTS(:,63) = 0.1;
-    CONSTANTS(:,64) = 0.7;
+    CONSTANTS(:,54) = 1;
+    CONSTANTS(:,55) = -1;
+    CONSTANTS(:,56) = 2000;
+    CONSTANTS(:,57) = 78000;
+    CONSTANTS(:,58) = 166000;
+    CONSTANTS(:,59) = 140000;
+    CONSTANTS(:,60) = 5000;
+    CONSTANTS(:,61) = 30000;
+    CONSTANTS(:,62) = 140000;
+    CONSTANTS(:,63) = 1e-12;
+    CONSTANTS(:,64) = 0.1;
+    CONSTANTS(:,65) = 0.7;
     STATES(:,17) = 0.14;
-    CONSTANTS(:,65) = 0;
+						
     CONSTANTS(:,66) = 0;
     CONSTANTS(:,67) = 0;
-    CONSTANTS(:,68) = -40;
-    CONSTANTS(:,69) = -3;
-    CONSTANTS(:,70) = 0.006;
+    CONSTANTS(:,68) = 0;
+    CONSTANTS(:,69) = -40;
+    CONSTANTS(:,70) = -3;
+    CONSTANTS(:,71) = 0.006;
     STATES(:,18) = 0.001271016263081;
-    CONSTANTS(:,71) = -55;
-    CONSTANTS(:,72) = 5;
-    CONSTANTS(:,73) = 0.1;
+    CONSTANTS(:,72) = -55;
+    CONSTANTS(:,73) = 5;
+    CONSTANTS(:,74) = 0.1;
     STATES(:,19) = 0.5;
-    CONSTANTS(:,74) = 4;
-    CONSTANTS(:,75) = 200;
+    CONSTANTS(:,75) = 4;
+    CONSTANTS(:,76) = 200;
     STATES(:,20) = 290.0;
-    CONSTANTS(:,76) = 8;
-    CONSTANTS(:,77) = 0.1;
-    CONSTANTS(:,78) = 1;
-    CONSTANTS(:,79) = 9;
-    CONSTANTS(:,80) = 0;
-    CONSTANTS(:,81) = 18;
-    CONSTANTS(:,82) = 0.5;
-    CONSTANTS(:,83) = 4;
-    CONSTANTS(:,84) = 1.8;
-    CONSTANTS(:,85) = 30;
-    CONSTANTS(:,86) = 250;
-    CONSTANTS(:,87) = 75;
-    CONSTANTS(:,88) = 50;
-    CONSTANTS(:,89) = 1;
-    CONSTANTS(:,90) = 0.01248;
-    CONSTANTS(:,91) = 50;
-    CONSTANTS(:,92) = 1;
-    CONSTANTS(:,93) = 0.05;
+    CONSTANTS(:,77) = 8;
+    CONSTANTS(:,78) = 0.1;
+    CONSTANTS(:,79) = 1;
+    CONSTANTS(:,80) = 9;
+    CONSTANTS(:,81) = 0;
+    CONSTANTS(:,82) = 18;
+    CONSTANTS(:,83) = 0.5;
+    CONSTANTS(:,84) = 4;
+    CONSTANTS(:,85) = 1.8;
+    CONSTANTS(:,86) = 30;
+    CONSTANTS(:,87) = 250;
+    CONSTANTS(:,88) = 75;
+    CONSTANTS(:,89) = 50;
+    CONSTANTS(:,90) = 1;
+    CONSTANTS(:,91) = 0.01248;
+    CONSTANTS(:,92) = 50;
+    CONSTANTS(:,93) = 1;
+    CONSTANTS(:,94) = 0.05;
     STATES(:,21) = 0.01;
-    CONSTANTS(:,94) = 2;
-    CONSTANTS(:,95) = -100;
-    CONSTANTS(:,96) = 0.0156;
-    CONSTANTS(:,97) = 20;
-    CONSTANTS(:,98) = 0.1;
-    CONSTANTS(:,99) = 160;
-    CONSTANTS(:,100) = 0.01;
-    CONSTANTS(:,101) = 1;
-    CONSTANTS(:,102) = 500;
-    CONSTANTS(:,103) = 0.25;
-    CONSTANTS(:,104) = 500;
-    CONSTANTS(:,105) = 0.25;
-    CONSTANTS(:,106) = 25;
-    CONSTANTS(:,107) = 65;
-    CONSTANTS(:,108) = 0.2625;
-    CONSTANTS(:,109) = 471.5;
-    CONSTANTS(:,110) = 0.03625;
-    CONSTANTS(:,111) = 2.05;
+    CONSTANTS(:,95) = 2;
+    CONSTANTS(:,96) = -100;
+    CONSTANTS(:,97) = 0.0156;
+    CONSTANTS(:,98) = 20;
+    CONSTANTS(:,99) = 0.1;
+    CONSTANTS(:,100) = 160;
+    CONSTANTS(:,101) = 0.01;
+    CONSTANTS(:,102) = 1;
+    CONSTANTS(:,103) = 500;
+    CONSTANTS(:,104) = 0.25;
+    CONSTANTS(:,105) = 500;
+    CONSTANTS(:,106) = 0.25;
+    CONSTANTS(:,107) = 25;
+    CONSTANTS(:,108) = 65;
+    CONSTANTS(:,109) = 0.2625;
+    CONSTANTS(:,110) = 471.5;
+    CONSTANTS(:,111) = 0.03625;
+    CONSTANTS(:,112) = 2.05;
     STATES(:,22) = 0.4;
-    CONSTANTS(:,112) = 7;
-    CONSTANTS(:,113) = 0.01;
-    CONSTANTS(:,114) = 0.5;
-    CONSTANTS(:,115) = 1;
-    CONSTANTS(:,116) = 100;
-    CONSTANTS(:,117) = 0.1;
-    CONSTANTS(:,118) = 2;
+    CONSTANTS(:,113) = 7;
+    CONSTANTS(:,114) = 0.01;
+    CONSTANTS(:,115) = 0.5;
+    CONSTANTS(:,116) = 1;
+    CONSTANTS(:,117) = 100;
+    CONSTANTS(:,118) = 0.1;
+						 
     CONSTANTS(:,119) = 2;
-    CONSTANTS(:,120) = 0.025;
-    CONSTANTS(:,121) = power(CONSTANTS(:,7), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,122) = power(CONSTANTS(:,6), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,123) = power(CONSTANTS(:,5), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
-    CONSTANTS(:,124) =  1.10000.*(CONSTANTS(:,1) - CONSTANTS(:,2));
-    CONSTANTS(:,125) = CONSTANTS(:,3)./( CONSTANTS(:,4).*CONSTANTS(:,1));
-    CONSTANTS(:,126) = ( CONSTANTS(:,4).*CONSTANTS(:,1))./CONSTANTS(:,3);
-    CONSTANTS(:,127) = CONSTANTS(:,109)./CONSTANTS(:,104);
-    CONSTANTS(:,128) = 1.00000./(1.00000+0.0100000./CONSTANTS(:,45));
-    CONSTANTS(:,129) =  (( CONSTANTS(:,50).*CONSTANTS(:,48))./( CONSTANTS(:,49).*CONSTANTS(:,54))).*log(CONSTANTS(:,57)./CONSTANTS(:,56));
-    CONSTANTS(:,130) =  (( CONSTANTS(:,50).*CONSTANTS(:,48))./( CONSTANTS(:,49).*CONSTANTS(:,52))).*log(CONSTANTS(:,61)./CONSTANTS(:,60));
-    CONSTANTS(:,131) =  (( CONSTANTS(:,50).*CONSTANTS(:,48))./( CONSTANTS(:,49).*CONSTANTS(:,53))).*log(CONSTANTS(:,59)./CONSTANTS(:,58));
-    CONSTANTS(:,132) =  CONSTANTS(:,62).*CONSTANTS(:,63);
-    CONSTANTS(:,133) = CONSTANTS(:,93);
-    CONSTANTS(:,134) = CONSTANTS(:,107)./CONSTANTS(:,102);
+    CONSTANTS(:,120) = 2;
+    CONSTANTS(:,121) = 0.025;
+																						 
+    CONSTANTS(:,122) = power(CONSTANTS(:,7), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,123) = power(CONSTANTS(:,6), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,124) = power(CONSTANTS(:,5), (CONSTANTS(:,1) - CONSTANTS(:,2))./10.0000);
+    CONSTANTS(:,125) =  1.10000.*(CONSTANTS(:,1) - CONSTANTS(:,2));
+    CONSTANTS(:,126) = CONSTANTS(:,3)./( CONSTANTS(:,4).*CONSTANTS(:,1));
+    CONSTANTS(:,127) = ( CONSTANTS(:,4).*CONSTANTS(:,1))./CONSTANTS(:,3);
+    CONSTANTS(:,128) = CONSTANTS(:,110)./CONSTANTS(:,105);
+    CONSTANTS(:,129) = 1.00000./(1.00000+0.0100000./CONSTANTS(:,46));
+    CONSTANTS(:,130) =  (( CONSTANTS(:,51).*CONSTANTS(:,49))./( CONSTANTS(:,50).*CONSTANTS(:,55))).*log(CONSTANTS(:,58)./CONSTANTS(:,57));
+    CONSTANTS(:,131) =  (( CONSTANTS(:,51).*CONSTANTS(:,49))./( CONSTANTS(:,50).*CONSTANTS(:,53))).*log(CONSTANTS(:,62)./CONSTANTS(:,61));
+    CONSTANTS(:,132) =  (( CONSTANTS(:,51).*CONSTANTS(:,49))./( CONSTANTS(:,50).*CONSTANTS(:,54))).*log(CONSTANTS(:,60)./CONSTANTS(:,59));
+    CONSTANTS(:,133) =  CONSTANTS(:,63).*CONSTANTS(:,64);
+									   
+    CONSTANTS(:,134) = CONSTANTS(:,94);
     CONSTANTS(:,135) = CONSTANTS(:,108)./CONSTANTS(:,103);
-    CONSTANTS(:,136) = CONSTANTS(:,110)./CONSTANTS(:,105);
+    CONSTANTS(:,136) = CONSTANTS(:,109)./CONSTANTS(:,104);
     CONSTANTS(:,137) = CONSTANTS(:,111)./CONSTANTS(:,106);
-    CONSTANTS(:,138) =  CONSTANTS(:,123).*0.470000;
-    CONSTANTS(:,139) =  CONSTANTS(:,123).*86.0000;
-    CONSTANTS(:,140) =  CONSTANTS(:,123).*2.00000;
-    CONSTANTS(:,141) =  CONSTANTS(:,123).*3.00000;
-    CONSTANTS(:,142) =  CONSTANTS(:,126).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,143) =  CONSTANTS(:,126).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,144) =  CONSTANTS(:,126).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,145) =  CONSTANTS(:,122).*80.0000;
-    CONSTANTS(:,146) =  CONSTANTS(:,126).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,147) =  CONSTANTS(:,126).*log(CONSTANTS(:,9)./CONSTANTS(:,14));
-    CONSTANTS(:,148) =  CONSTANTS(:,122).*90.0000;
-    CONSTANTS(:,149) =  CONSTANTS(:,126).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
-    CONSTANTS(:,150) =  CONSTANTS(:,62).*CONSTANTS(:,64);
+    CONSTANTS(:,138) = CONSTANTS(:,112)./CONSTANTS(:,107);
+    CONSTANTS(:,139) =  CONSTANTS(:,124).*0.470000;
+    CONSTANTS(:,140) =  CONSTANTS(:,124).*86.0000;
+    CONSTANTS(:,141) =  CONSTANTS(:,124).*2.00000;
+    CONSTANTS(:,142) =  CONSTANTS(:,124).*3.00000;
+    CONSTANTS(:,143) =  CONSTANTS(:,127).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,144) =  CONSTANTS(:,127).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,145) =  CONSTANTS(:,127).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,146) =  CONSTANTS(:,123).*80.0000;
+    CONSTANTS(:,147) =  CONSTANTS(:,127).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,148) =  CONSTANTS(:,127).*log(CONSTANTS(:,9)./CONSTANTS(:,14));
+    CONSTANTS(:,149) =  CONSTANTS(:,123).*90.0000;
+    CONSTANTS(:,150) =  CONSTANTS(:,127).*log(CONSTANTS(:,10)./CONSTANTS(:,15));
+    CONSTANTS(:,151) =  CONSTANTS(:,63).*CONSTANTS(:,65);
     if (isempty(STATES)), warning('Initial values for states not set');, end
 end
 
@@ -527,96 +526,96 @@ function [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS)
         utilOnes = ones(statesRowCount, 1);
     end
     ALGEBRAIC(:,1) = 1.00000./(1.00000+exp((STATES(:,1)+17.0000)./ - 4.30000));
-    RATES(:,4) = (ALGEBRAIC(:,1) - STATES(:,4))./CONSTANTS(:,138);
+    RATES(:,4) = (ALGEBRAIC(:,1) - STATES(:,4))./CONSTANTS(:,139);
     ALGEBRAIC(:,2) = 1.00000./(1.00000+exp((STATES(:,1)+43.0000)./8.90000));
-    RATES(:,5) = (ALGEBRAIC(:,2) - STATES(:,5))./CONSTANTS(:,139);
+    RATES(:,5) = (ALGEBRAIC(:,2) - STATES(:,5))./CONSTANTS(:,140);
     ALGEBRAIC(:,3) = 1.00000 - 1.00000./(1.00000+exp(((STATES(:,2) - 8.99900e-05) - 0.000214000)./ - 1.31000e-05));
-    RATES(:,6) = (ALGEBRAIC(:,3) - STATES(:,6))./CONSTANTS(:,140);
+    RATES(:,6) = (ALGEBRAIC(:,3) - STATES(:,6))./CONSTANTS(:,141);
     ALGEBRAIC(:,4) = 1.00000./(1.00000+exp((STATES(:,1)+27.5000)./ - 10.9000));
-    RATES(:,7) = (ALGEBRAIC(:,4) - STATES(:,7))./CONSTANTS(:,141);
+    RATES(:,7) = (ALGEBRAIC(:,4) - STATES(:,7))./CONSTANTS(:,142);
     ALGEBRAIC(:,8) = 1.00000./(1.00000+exp((STATES(:,1)+27.0000)./ - 5.00000));
-    RATES(:,10) = (ALGEBRAIC(:,8) - STATES(:,10))./CONSTANTS(:,145);
+    RATES(:,10) = (ALGEBRAIC(:,8) - STATES(:,10))./CONSTANTS(:,146);
     ALGEBRAIC(:,13) = 0.100000+0.900000./(1.00000+exp((STATES(:,1)+65.0000)./6.20000));
-    RATES(:,15) = (ALGEBRAIC(:,13) - STATES(:,15))./CONSTANTS(:,148);
-    ALGEBRAIC(:,16) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,68))./CONSTANTS(:,69)));
-    RATES(:,18) = ((ALGEBRAIC(:,16) - STATES(:,18))./CONSTANTS(:,70)).*0.00100000;
-    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,71))./CONSTANTS(:,72)));
-    RATES(:,19) = ((ALGEBRAIC(:,17) - STATES(:,19))./CONSTANTS(:,73)).*0.00100000;
+    RATES(:,15) = (ALGEBRAIC(:,13) - STATES(:,15))./CONSTANTS(:,149);
+    ALGEBRAIC(:,16) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,69))./CONSTANTS(:,70)));
+    RATES(:,18) = ((ALGEBRAIC(:,16) - STATES(:,18))./CONSTANTS(:,71)).*0.00100000;
+    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,72))./CONSTANTS(:,73)));
+    RATES(:,19) = ((ALGEBRAIC(:,17) - STATES(:,19))./CONSTANTS(:,74)).*0.00100000;
     ALGEBRAIC(:,5) = 1.00000./(1.00000+exp((STATES(:,1)+15.8000)./7.00000));
-    ALGEBRAIC(:,18) =  CONSTANTS(:,123).*7.58000.*exp( STATES(:,1).*0.00817000);
+    ALGEBRAIC(:,18) =  CONSTANTS(:,124).*7.58000.*exp( STATES(:,1).*0.00817000);
     RATES(:,8) = (ALGEBRAIC(:,5) - STATES(:,8))./ALGEBRAIC(:,18);
-    ALGEBRAIC(:,7) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,36)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,36))+power(CONSTANTS(:,37), CONSTANTS(:,36)));
+    ALGEBRAIC(:,7) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,37)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,37))+power(CONSTANTS(:,38), CONSTANTS(:,37)));
     ALGEBRAIC(:,20) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
     RATES(:,9) = (ALGEBRAIC(:,7) - STATES(:,9))./ALGEBRAIC(:,20);
     ALGEBRAIC(:,9) = 0.200000+0.800000./(1.00000+exp((STATES(:,1)+58.0000)./10.0000));
-    ALGEBRAIC(:,21) =  CONSTANTS(:,122).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
+    ALGEBRAIC(:,21) =  CONSTANTS(:,123).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
     RATES(:,11) = (ALGEBRAIC(:,9) - STATES(:,11))./ALGEBRAIC(:,21);
     ALGEBRAIC(:,10) = 1.00000./(1.00000+exp((STATES(:,1)+47.0000)./ - 4.80000));
-    ALGEBRAIC(:,22) =  CONSTANTS(:,121).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
+    ALGEBRAIC(:,22) =  CONSTANTS(:,122).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
     RATES(:,12) = (ALGEBRAIC(:,10) - STATES(:,12))./ALGEBRAIC(:,22);
     ALGEBRAIC(:,11) = 1.00000./(1.00000+exp((STATES(:,1)+78.0000)./3.00000));
-    ALGEBRAIC(:,23) =  CONSTANTS(:,121).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
+    ALGEBRAIC(:,23) =  CONSTANTS(:,122).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
     RATES(:,13) = (ALGEBRAIC(:,11) - STATES(:,13))./ALGEBRAIC(:,23);
     ALGEBRAIC(:,12) = 1.00000./(1.00000+exp((STATES(:,1)+26.5000)./ - 7.90000));
-    ALGEBRAIC(:,24) =  CONSTANTS(:,122).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
+    ALGEBRAIC(:,24) =  CONSTANTS(:,123).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
     RATES(:,14) = (ALGEBRAIC(:,12) - STATES(:,14))./ALGEBRAIC(:,24);
     ALGEBRAIC(:,14) = 1.00000./(1.00000+exp((STATES(:,1)+25.0000)./ - 20.0000));
     ALGEBRAIC(:,25) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
     RATES(:,16) = (ALGEBRAIC(:,14) - STATES(:,16))./ALGEBRAIC(:,25);
-    ALGEBRAIC(:,19) =  0.500000.*CONSTANTS(:,126).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,19) =  0.500000.*CONSTANTS(:,127).*log(CONSTANTS(:,8)./STATES(:,2));
     ALGEBRAIC(:,27) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,19));
-    ALGEBRAIC(:,31) =  0.500000.*CONSTANTS(:,126).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,31) =  0.500000.*CONSTANTS(:,127).*log(CONSTANTS(:,8)./STATES(:,2));
     ALGEBRAIC(:,33) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,31));
     ALGEBRAIC(:,29) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
     RATES(:,2) = (  - 1.00000.*ALGEBRAIC(:,27)+  - 1.00000.*ALGEBRAIC(:,33))./( 2.00000.*0.00100000.*CONSTANTS(:,3).*CONSTANTS(:,13))+  - 1.00000.*ALGEBRAIC(:,29);
-    ALGEBRAIC(:,50) = ( CONSTANTS(:,99).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,98), 2.00000)+power(STATES(:,17), 2.00000));
-    ALGEBRAIC(:,26) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,35).*CONSTANTS(:,24)))./(1.00000 - exp( - CONSTANTS(:,35))) }, 0.00000);
-    ALGEBRAIC(:,32) =  ALGEBRAIC(:,26).*CONSTANTS(:,32);
-    ALGEBRAIC(:,53) =  CONSTANTS(:,114).*(1.00000+ALGEBRAIC(:,32));
-    ALGEBRAIC(:,56) = power(( ALGEBRAIC(:,53).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (ALGEBRAIC(:,53)+CONSTANTS(:,134)).*(STATES(:,17)+CONSTANTS(:,137))), 3.00000);
-    ALGEBRAIC(:,60) =  ( CONSTANTS(:,112).*ALGEBRAIC(:,56)+CONSTANTS(:,113)).*(STATES(:,20) - STATES(:,17));
-    RATES(:,20) = (( CONSTANTS(:,101).*(ALGEBRAIC(:,50) - ALGEBRAIC(:,60)).*CONSTANTS(:,150))./CONSTANTS(:,132)).*0.00100000;
-    ALGEBRAIC(:,57) = ( ( CONSTANTS(:,110).*CONSTANTS(:,135).*CONSTANTS(:,134)+ CONSTANTS(:,108).*CONSTANTS(:,136).*ALGEBRAIC(:,53)).*STATES(:,17))./( CONSTANTS(:,136).*CONSTANTS(:,135).*(CONSTANTS(:,134)+ALGEBRAIC(:,53)));
-    ALGEBRAIC(:,61) = ( CONSTANTS(:,108).*ALGEBRAIC(:,53)+ CONSTANTS(:,110).*CONSTANTS(:,127))./(CONSTANTS(:,127)+ALGEBRAIC(:,53));
+    ALGEBRAIC(:,50) = ( CONSTANTS(:,100).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,99), 2.00000)+power(STATES(:,17), 2.00000));
+    ALGEBRAIC(:,26) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,36).*CONSTANTS(:,24))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,36))) }, 0.00000);
+    ALGEBRAIC(:,32) =  ALGEBRAIC(:,26).*CONSTANTS(:,33);
+    ALGEBRAIC(:,53) =  CONSTANTS(:,115).*(1.00000+ALGEBRAIC(:,32));
+    ALGEBRAIC(:,56) = power(( ALGEBRAIC(:,53).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (ALGEBRAIC(:,53)+CONSTANTS(:,135)).*(STATES(:,17)+CONSTANTS(:,138))), 3.00000);
+    ALGEBRAIC(:,60) =  ( CONSTANTS(:,113).*ALGEBRAIC(:,56)+CONSTANTS(:,114)).*(STATES(:,20) - STATES(:,17));
+    RATES(:,20) = (( CONSTANTS(:,102).*(ALGEBRAIC(:,50) - ALGEBRAIC(:,60)).*CONSTANTS(:,151))./CONSTANTS(:,133)).*0.00100000;
+    ALGEBRAIC(:,57) = ( ( CONSTANTS(:,111).*CONSTANTS(:,136).*CONSTANTS(:,135)+ CONSTANTS(:,109).*CONSTANTS(:,137).*ALGEBRAIC(:,53)).*STATES(:,17))./( CONSTANTS(:,137).*CONSTANTS(:,136).*(CONSTANTS(:,135)+ALGEBRAIC(:,53)));
+    ALGEBRAIC(:,61) = ( CONSTANTS(:,109).*ALGEBRAIC(:,53)+ CONSTANTS(:,111).*CONSTANTS(:,128))./(CONSTANTS(:,128)+ALGEBRAIC(:,53));
     RATES(:,22) = ( ALGEBRAIC(:,57).*(1.00000 - STATES(:,22)) -  ALGEBRAIC(:,61).*STATES(:,22)).*0.00100000;
-    ALGEBRAIC(:,34) =  (( CONSTANTS(:,50).*CONSTANTS(:,48))./( CONSTANTS(:,49).*CONSTANTS(:,51))).*log(CONSTANTS(:,55)./STATES(:,17));
-    ALGEBRAIC(:,36) =  CONSTANTS(:,74).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,34));
-    ALGEBRAIC(:,38) = (  - CONSTANTS(:,46).*ALGEBRAIC(:,36))./( CONSTANTS(:,51).*CONSTANTS(:,49).*CONSTANTS(:,150));
-    ALGEBRAIC(:,40) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,75), CONSTANTS(:,76)));
-    ALGEBRAIC(:,43) =  CONSTANTS(:,77).*ALGEBRAIC(:,40).*(STATES(:,3) - ALGEBRAIC(:,34));
-    ALGEBRAIC(:,46) = (  - CONSTANTS(:,46).*CONSTANTS(:,78).*ALGEBRAIC(:,43))./( CONSTANTS(:,51).*CONSTANTS(:,49).*CONSTANTS(:,150));
-    ALGEBRAIC(:,64) = ( CONSTANTS(:,115).*CONSTANTS(:,116).*1.00000)./(1.00000+power(CONSTANTS(:,117)./STATES(:,17), CONSTANTS(:,118)));
-    RATES(:,17) = ( CONSTANTS(:,100).*(((ALGEBRAIC(:,60) - ALGEBRAIC(:,50))+ALGEBRAIC(:,46)+ALGEBRAIC(:,38)) - ALGEBRAIC(:,64))).*0.00100000;
-    ALGEBRAIC(:,54) =  CONSTANTS(:,41).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,147));
-    ALGEBRAIC(:,51) =  CONSTANTS(:,40).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,146));
-    ALGEBRAIC(:,58) =  CONSTANTS(:,42).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,149));
+    ALGEBRAIC(:,34) =  (( CONSTANTS(:,51).*CONSTANTS(:,49))./( CONSTANTS(:,50).*CONSTANTS(:,52))).*log(CONSTANTS(:,56)./STATES(:,17));
+    ALGEBRAIC(:,36) =  CONSTANTS(:,75).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,34));
+    ALGEBRAIC(:,38) = (  - CONSTANTS(:,47).*ALGEBRAIC(:,36))./( CONSTANTS(:,52).*CONSTANTS(:,50).*CONSTANTS(:,151));
+    ALGEBRAIC(:,40) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,76), CONSTANTS(:,77)));
+    ALGEBRAIC(:,43) =  CONSTANTS(:,78).*ALGEBRAIC(:,40).*(STATES(:,3) - ALGEBRAIC(:,34));
+    ALGEBRAIC(:,46) = (  - CONSTANTS(:,47).*CONSTANTS(:,79).*ALGEBRAIC(:,43))./( CONSTANTS(:,52).*CONSTANTS(:,50).*CONSTANTS(:,151));
+    ALGEBRAIC(:,64) = ( CONSTANTS(:,116).*CONSTANTS(:,117).*1.00000)./(1.00000+power(CONSTANTS(:,118)./STATES(:,17), CONSTANTS(:,119)));
+    RATES(:,17) = ( CONSTANTS(:,101).*(((ALGEBRAIC(:,60) - ALGEBRAIC(:,50))+ALGEBRAIC(:,46)+ALGEBRAIC(:,38)) - ALGEBRAIC(:,64))).*0.00100000;
+    ALGEBRAIC(:,54) =  CONSTANTS(:,42).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,148));
+    ALGEBRAIC(:,51) =  CONSTANTS(:,41).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,147));
+    ALGEBRAIC(:,58) =  CONSTANTS(:,43).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,150));
     ALGEBRAIC(:,35) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
-    ALGEBRAIC(:,37) =  (CONSTANTS(:,20)+CONSTANTS(:,124)).*ALGEBRAIC(:,35).*(STATES(:,1) - CONSTANTS(:,142));
-    ALGEBRAIC(:,39) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,34).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,34))) }, 0.00000);
-    ALGEBRAIC(:,41) =  ALGEBRAIC(:,39).*CONSTANTS(:,31);
-    ALGEBRAIC(:,44) =  CONSTANTS(:,38).*STATES(:,9).*ALGEBRAIC(:,41).*(STATES(:,1) - CONSTANTS(:,143));
+    ALGEBRAIC(:,37) =  (CONSTANTS(:,20)+CONSTANTS(:,125)).*ALGEBRAIC(:,35).*(STATES(:,1) - CONSTANTS(:,143));
+    ALGEBRAIC(:,39) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,35).*CONSTANTS(:,25))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,35))) }, 0.00000);
+    ALGEBRAIC(:,41) =  ALGEBRAIC(:,39).*CONSTANTS(:,32);
+    ALGEBRAIC(:,44) =  CONSTANTS(:,39).*STATES(:,9).*ALGEBRAIC(:,41).*(STATES(:,1) - CONSTANTS(:,144));
     ALGEBRAIC(:,62) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
-    ALGEBRAIC(:,65) =  CONSTANTS(:,44).*STATES(:,16).*ALGEBRAIC(:,62).*CONSTANTS(:,128).*(STATES(:,1) - CONSTANTS(:,43));
-    ALGEBRAIC(:,47) =  CONSTANTS(:,39).*(STATES(:,1) - CONSTANTS(:,144));
+    ALGEBRAIC(:,65) =  CONSTANTS(:,45).*STATES(:,16).*ALGEBRAIC(:,62).*CONSTANTS(:,129).*(STATES(:,1) - CONSTANTS(:,44));
+    ALGEBRAIC(:,47) =  CONSTANTS(:,40).*(STATES(:,1) - CONSTANTS(:,145));
     ALGEBRAIC(:,6) =  CONSTANTS(:,16).*(STATES(:,3) - STATES(:,1));
     RATES(:,1) =  ((  - 1.00000.*1.00000)./CONSTANTS(:,12)).*(ALGEBRAIC(:,54)+ALGEBRAIC(:,44)+ALGEBRAIC(:,27)+ALGEBRAIC(:,33)+ALGEBRAIC(:,51)+ALGEBRAIC(:,58)+ALGEBRAIC(:,37)+ALGEBRAIC(:,65)+ALGEBRAIC(:,47)+  - 1.00000.*ALGEBRAIC(:,6));
-    ALGEBRAIC(:,63) = ( 1.00000e+15.*ALGEBRAIC(:,46).*CONSTANTS(:,150))./CONSTANTS(:,91);
-    ALGEBRAIC(:,66) = (((  - CONSTANTS(:,86).*CONSTANTS(:,89)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,133))+ CONSTANTS(:,86).*STATES(:,17)) - ( CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89))./(CONSTANTS(:,89)+STATES(:,17)))+power((power(( CONSTANTS(:,86).*CONSTANTS(:,89)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,133))+ CONSTANTS(:,86).*STATES(:,17)) - ( CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89))./(CONSTANTS(:,89)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,86));
-    ALGEBRAIC(:,67) =  CONSTANTS(:,92).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,66))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,66)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,66))))).*0.00100000;
-    ALGEBRAIC(:,68) = 1.00000./( (1.00000+exp( (CONSTANTS(:,95) - STATES(:,3)).*CONSTANTS(:,96))).*(1.00000+power(ALGEBRAIC(:,66)./( 1.39000.*exp(  - CONSTANTS(:,90).*STATES(:,3))),  - CONSTANTS(:,94))));
+    ALGEBRAIC(:,63) = ( 1.00000e+15.*ALGEBRAIC(:,46).*CONSTANTS(:,151))./CONSTANTS(:,92);
+    ALGEBRAIC(:,66) = (((  - CONSTANTS(:,87).*CONSTANTS(:,90)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,87).*STATES(:,17)) - ( CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90))./(CONSTANTS(:,90)+STATES(:,17)))+power((power(( CONSTANTS(:,87).*CONSTANTS(:,90)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,87).*STATES(:,17)) - ( CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90))./(CONSTANTS(:,90)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,87));
+    ALGEBRAIC(:,67) =  CONSTANTS(:,93).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,66))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,66)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,66))))).*0.00100000;
+    ALGEBRAIC(:,68) = 1.00000./( (1.00000+exp( (CONSTANTS(:,96) - STATES(:,3)).*CONSTANTS(:,97))).*(1.00000+power(ALGEBRAIC(:,66)./( 1.39000.*exp(  - CONSTANTS(:,91).*STATES(:,3))),  - CONSTANTS(:,95))));
     RATES(:,21) = ((ALGEBRAIC(:,68) - STATES(:,21))./ALGEBRAIC(:,67)).*0.00100000;
-    ALGEBRAIC(:,49) =  CONSTANTS(:,79).*(STATES(:,3) - CONSTANTS(:,131));
-    ALGEBRAIC(:,52) = piecewise({VOI.*0.00100000>CONSTANTS(:,81)&VOI.*0.00100000<CONSTANTS(:,81)+CONSTANTS(:,82), CONSTANTS(:,80) }, 0.00000);
-    ALGEBRAIC(:,15) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,33).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,33))) }, 0.00000);
-    ALGEBRAIC(:,30) =  ALGEBRAIC(:,15).*CONSTANTS(:,29);
-    ALGEBRAIC(:,55) = power(STATES(:,17), CONSTANTS(:,83))./(power(CONSTANTS(:,84), CONSTANTS(:,83))+power(STATES(:,17), CONSTANTS(:,83)));
-    ALGEBRAIC(:,59) =  CONSTANTS(:,85).*(1.00000 - ALGEBRAIC(:,30)).*ALGEBRAIC(:,55).*(STATES(:,3) - CONSTANTS(:,65));
-    ALGEBRAIC(:,28) =  ALGEBRAIC(:,15).*CONSTANTS(:,28);
+    ALGEBRAIC(:,49) =  CONSTANTS(:,80).*(STATES(:,3) - CONSTANTS(:,132));
+    ALGEBRAIC(:,52) = piecewise({VOI.*0.00100000>CONSTANTS(:,82)&VOI.*0.00100000<CONSTANTS(:,82)+CONSTANTS(:,83), CONSTANTS(:,81) }, 0.00000);
+    ALGEBRAIC(:,15) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,34).*CONSTANTS(:,25))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,34))) }, 0.00000);
+    ALGEBRAIC(:,30) =  ALGEBRAIC(:,15).*CONSTANTS(:,30);
+    ALGEBRAIC(:,55) = power(STATES(:,17), CONSTANTS(:,84))./(power(CONSTANTS(:,85), CONSTANTS(:,84))+power(STATES(:,17), CONSTANTS(:,84)));
+    ALGEBRAIC(:,59) =  CONSTANTS(:,86).*(1.00000 - ALGEBRAIC(:,30)).*ALGEBRAIC(:,55).*(STATES(:,3) - CONSTANTS(:,66));
+    ALGEBRAIC(:,28) =  ALGEBRAIC(:,15).*CONSTANTS(:,29);
     ALGEBRAIC(:,69) = ( STATES(:,21).*ALGEBRAIC(:,28).*1.00000)./(1.00000+power((ALGEBRAIC(:,68) - STATES(:,21))./ALGEBRAIC(:,67), 2.00000));
-    ALGEBRAIC(:,70) =  CONSTANTS(:,97).*(STATES(:,21) - ALGEBRAIC(:,69)).*(STATES(:,3) - CONSTANTS(:,129));
-    ALGEBRAIC(:,71) =  CONSTANTS(:,119).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,70) =  CONSTANTS(:,98).*(STATES(:,21) - ALGEBRAIC(:,69)).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,71) =  CONSTANTS(:,120).*(STATES(:,3) - CONSTANTS(:,131));
     ALGEBRAIC(:,72) = ALGEBRAIC(:,43)+ALGEBRAIC(:,70)+ALGEBRAIC(:,36)+ALGEBRAIC(:,49)+ALGEBRAIC(:,71)+ALGEBRAIC(:,59)+ALGEBRAIC(:,52);
-    RATES(:,3) = ( - ALGEBRAIC(:,72)./CONSTANTS(:,120)).*0.00100000;
+    RATES(:,3) = ( - ALGEBRAIC(:,72)./CONSTANTS(:,121)).*0.00100000;
    RATES = RATES';
 end
 
@@ -637,70 +636,70 @@ function ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI)
     ALGEBRAIC(:,4) = 1.00000./(1.00000+exp((STATES(:,1)+27.5000)./ - 10.9000));
     ALGEBRAIC(:,8) = 1.00000./(1.00000+exp((STATES(:,1)+27.0000)./ - 5.00000));
     ALGEBRAIC(:,13) = 0.100000+0.900000./(1.00000+exp((STATES(:,1)+65.0000)./6.20000));
-    ALGEBRAIC(:,16) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,68))./CONSTANTS(:,69)));
-    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,71))./CONSTANTS(:,72)));
+    ALGEBRAIC(:,16) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,69))./CONSTANTS(:,70)));
+    ALGEBRAIC(:,17) = 1.00000./(1.00000+exp((STATES(:,3) - CONSTANTS(:,72))./CONSTANTS(:,73)));
     ALGEBRAIC(:,5) = 1.00000./(1.00000+exp((STATES(:,1)+15.8000)./7.00000));
-    ALGEBRAIC(:,18) =  CONSTANTS(:,123).*7.58000.*exp( STATES(:,1).*0.00817000);
-    ALGEBRAIC(:,7) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,36)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,36))+power(CONSTANTS(:,37), CONSTANTS(:,36)));
+    ALGEBRAIC(:,18) =  CONSTANTS(:,124).*7.58000.*exp( STATES(:,1).*0.00817000);
+    ALGEBRAIC(:,7) = ( 0.810000.*power(STATES(:,2).*1000.00, CONSTANTS(:,37)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,37))+power(CONSTANTS(:,38), CONSTANTS(:,37)));
     ALGEBRAIC(:,20) = 1.00000./( 0.0470000.*(STATES(:,2).*1000.00)+1.00000./76.0000);
     ALGEBRAIC(:,9) = 0.200000+0.800000./(1.00000+exp((STATES(:,1)+58.0000)./10.0000));
-    ALGEBRAIC(:,21) =  CONSTANTS(:,122).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
+    ALGEBRAIC(:,21) =  CONSTANTS(:,123).*( - 707.000+ 1481.00.*exp((STATES(:,1)+36.0000)./95.0000));
     ALGEBRAIC(:,10) = 1.00000./(1.00000+exp((STATES(:,1)+47.0000)./ - 4.80000));
-    ALGEBRAIC(:,22) =  CONSTANTS(:,121).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
+    ALGEBRAIC(:,22) =  CONSTANTS(:,122).*( STATES(:,1).* - 0.0170000.*1.00000+0.440000);
     ALGEBRAIC(:,11) = 1.00000./(1.00000+exp((STATES(:,1)+78.0000)./3.00000));
-    ALGEBRAIC(:,23) =  CONSTANTS(:,121).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
+    ALGEBRAIC(:,23) =  CONSTANTS(:,122).*( STATES(:,1).* - 0.250000.*1.00000+5.50000);
     ALGEBRAIC(:,12) = 1.00000./(1.00000+exp((STATES(:,1)+26.5000)./ - 7.90000));
-    ALGEBRAIC(:,24) =  CONSTANTS(:,122).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
+    ALGEBRAIC(:,24) =  CONSTANTS(:,123).*(31.8000+ 175.000.*exp(  - 0.500000.*power((STATES(:,1)+44.4000)./22.3000, 2.00000)));
     ALGEBRAIC(:,14) = 1.00000./(1.00000+exp((STATES(:,1)+25.0000)./ - 20.0000));
     ALGEBRAIC(:,25) =  (1.00000./(1.00000+exp((STATES(:,1)+66.0000)./ - 26.0000))).*150.000;
-    ALGEBRAIC(:,19) =  0.500000.*CONSTANTS(:,126).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,19) =  0.500000.*CONSTANTS(:,127).*log(CONSTANTS(:,8)./STATES(:,2));
     ALGEBRAIC(:,27) =  CONSTANTS(:,17).*STATES(:,5).*STATES(:,4).*STATES(:,6).*(STATES(:,1) - ALGEBRAIC(:,19));
-    ALGEBRAIC(:,31) =  0.500000.*CONSTANTS(:,126).*log(CONSTANTS(:,8)./STATES(:,2));
+    ALGEBRAIC(:,31) =  0.500000.*CONSTANTS(:,127).*log(CONSTANTS(:,8)./STATES(:,2));
     ALGEBRAIC(:,33) =  CONSTANTS(:,19).*STATES(:,8).*STATES(:,7).*(STATES(:,1) - ALGEBRAIC(:,31));
     ALGEBRAIC(:,29) =  CONSTANTS(:,18).*power( STATES(:,2).*1.00000, 1.34000);
-    ALGEBRAIC(:,50) = ( CONSTANTS(:,99).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,98), 2.00000)+power(STATES(:,17), 2.00000));
-    ALGEBRAIC(:,26) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,35).*CONSTANTS(:,24)))./(1.00000 - exp( - CONSTANTS(:,35))) }, 0.00000);
-    ALGEBRAIC(:,32) =  ALGEBRAIC(:,26).*CONSTANTS(:,32);
-    ALGEBRAIC(:,53) =  CONSTANTS(:,114).*(1.00000+ALGEBRAIC(:,32));
-    ALGEBRAIC(:,56) = power(( ALGEBRAIC(:,53).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (ALGEBRAIC(:,53)+CONSTANTS(:,134)).*(STATES(:,17)+CONSTANTS(:,137))), 3.00000);
-    ALGEBRAIC(:,60) =  ( CONSTANTS(:,112).*ALGEBRAIC(:,56)+CONSTANTS(:,113)).*(STATES(:,20) - STATES(:,17));
-    ALGEBRAIC(:,57) = ( ( CONSTANTS(:,110).*CONSTANTS(:,135).*CONSTANTS(:,134)+ CONSTANTS(:,108).*CONSTANTS(:,136).*ALGEBRAIC(:,53)).*STATES(:,17))./( CONSTANTS(:,136).*CONSTANTS(:,135).*(CONSTANTS(:,134)+ALGEBRAIC(:,53)));
-    ALGEBRAIC(:,61) = ( CONSTANTS(:,108).*ALGEBRAIC(:,53)+ CONSTANTS(:,110).*CONSTANTS(:,127))./(CONSTANTS(:,127)+ALGEBRAIC(:,53));
-    ALGEBRAIC(:,34) =  (( CONSTANTS(:,50).*CONSTANTS(:,48))./( CONSTANTS(:,49).*CONSTANTS(:,51))).*log(CONSTANTS(:,55)./STATES(:,17));
-    ALGEBRAIC(:,36) =  CONSTANTS(:,74).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,34));
-    ALGEBRAIC(:,38) = (  - CONSTANTS(:,46).*ALGEBRAIC(:,36))./( CONSTANTS(:,51).*CONSTANTS(:,49).*CONSTANTS(:,150));
-    ALGEBRAIC(:,40) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,75), CONSTANTS(:,76)));
-    ALGEBRAIC(:,43) =  CONSTANTS(:,77).*ALGEBRAIC(:,40).*(STATES(:,3) - ALGEBRAIC(:,34));
-    ALGEBRAIC(:,46) = (  - CONSTANTS(:,46).*CONSTANTS(:,78).*ALGEBRAIC(:,43))./( CONSTANTS(:,51).*CONSTANTS(:,49).*CONSTANTS(:,150));
-    ALGEBRAIC(:,64) = ( CONSTANTS(:,115).*CONSTANTS(:,116).*1.00000)./(1.00000+power(CONSTANTS(:,117)./STATES(:,17), CONSTANTS(:,118)));
-    ALGEBRAIC(:,54) =  CONSTANTS(:,41).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,147));
-    ALGEBRAIC(:,51) =  CONSTANTS(:,40).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,146));
-    ALGEBRAIC(:,58) =  CONSTANTS(:,42).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,149));
+    ALGEBRAIC(:,50) = ( CONSTANTS(:,100).*power(STATES(:,17), 2.00000))./(power(CONSTANTS(:,99), 2.00000)+power(STATES(:,17), 2.00000));
+    ALGEBRAIC(:,26) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,36).*CONSTANTS(:,24))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,36))) }, 0.00000);
+    ALGEBRAIC(:,32) =  ALGEBRAIC(:,26).*CONSTANTS(:,33);
+    ALGEBRAIC(:,53) =  CONSTANTS(:,115).*(1.00000+ALGEBRAIC(:,32));
+    ALGEBRAIC(:,56) = power(( ALGEBRAIC(:,53).*STATES(:,17).*(1.00000 - STATES(:,22)))./( (ALGEBRAIC(:,53)+CONSTANTS(:,135)).*(STATES(:,17)+CONSTANTS(:,138))), 3.00000);
+    ALGEBRAIC(:,60) =  ( CONSTANTS(:,113).*ALGEBRAIC(:,56)+CONSTANTS(:,114)).*(STATES(:,20) - STATES(:,17));
+    ALGEBRAIC(:,57) = ( ( CONSTANTS(:,111).*CONSTANTS(:,136).*CONSTANTS(:,135)+ CONSTANTS(:,109).*CONSTANTS(:,137).*ALGEBRAIC(:,53)).*STATES(:,17))./( CONSTANTS(:,137).*CONSTANTS(:,136).*(CONSTANTS(:,135)+ALGEBRAIC(:,53)));
+    ALGEBRAIC(:,61) = ( CONSTANTS(:,109).*ALGEBRAIC(:,53)+ CONSTANTS(:,111).*CONSTANTS(:,128))./(CONSTANTS(:,128)+ALGEBRAIC(:,53));
+    ALGEBRAIC(:,34) =  (( CONSTANTS(:,51).*CONSTANTS(:,49))./( CONSTANTS(:,50).*CONSTANTS(:,52))).*log(CONSTANTS(:,56)./STATES(:,17));
+    ALGEBRAIC(:,36) =  CONSTANTS(:,75).*STATES(:,18).*STATES(:,19).*(STATES(:,3) - ALGEBRAIC(:,34));
+    ALGEBRAIC(:,38) = (  - CONSTANTS(:,47).*ALGEBRAIC(:,36))./( CONSTANTS(:,52).*CONSTANTS(:,50).*CONSTANTS(:,151));
+    ALGEBRAIC(:,40) = 1.00000./(1.00000+power(STATES(:,20)./CONSTANTS(:,76), CONSTANTS(:,77)));
+    ALGEBRAIC(:,43) =  CONSTANTS(:,78).*ALGEBRAIC(:,40).*(STATES(:,3) - ALGEBRAIC(:,34));
+    ALGEBRAIC(:,46) = (  - CONSTANTS(:,47).*CONSTANTS(:,79).*ALGEBRAIC(:,43))./( CONSTANTS(:,52).*CONSTANTS(:,50).*CONSTANTS(:,151));
+    ALGEBRAIC(:,64) = ( CONSTANTS(:,116).*CONSTANTS(:,117).*1.00000)./(1.00000+power(CONSTANTS(:,118)./STATES(:,17), CONSTANTS(:,119)));
+    ALGEBRAIC(:,54) =  CONSTANTS(:,42).*STATES(:,13).*STATES(:,12).*(STATES(:,1) - CONSTANTS(:,148));
+    ALGEBRAIC(:,51) =  CONSTANTS(:,41).*STATES(:,10).*STATES(:,11).*(STATES(:,1) - CONSTANTS(:,147));
+    ALGEBRAIC(:,58) =  CONSTANTS(:,43).*STATES(:,14).*STATES(:,15).*(STATES(:,1) - CONSTANTS(:,150));
     ALGEBRAIC(:,35) = 1.00000./(1.00000+exp(STATES(:,1)./ - 17.0000 -  2.00000.*log(STATES(:,2)./0.00100000)));
-    ALGEBRAIC(:,37) =  (CONSTANTS(:,20)+CONSTANTS(:,124)).*ALGEBRAIC(:,35).*(STATES(:,1) - CONSTANTS(:,142));
-    ALGEBRAIC(:,39) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,34).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,34))) }, 0.00000);
-    ALGEBRAIC(:,41) =  ALGEBRAIC(:,39).*CONSTANTS(:,31);
-    ALGEBRAIC(:,44) =  CONSTANTS(:,38).*STATES(:,9).*ALGEBRAIC(:,41).*(STATES(:,1) - CONSTANTS(:,143));
+    ALGEBRAIC(:,37) =  (CONSTANTS(:,20)+CONSTANTS(:,125)).*ALGEBRAIC(:,35).*(STATES(:,1) - CONSTANTS(:,143));
+    ALGEBRAIC(:,39) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,35).*CONSTANTS(:,25))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,35))) }, 0.00000);
+    ALGEBRAIC(:,41) =  ALGEBRAIC(:,39).*CONSTANTS(:,32);
+    ALGEBRAIC(:,44) =  CONSTANTS(:,39).*STATES(:,9).*ALGEBRAIC(:,41).*(STATES(:,1) - CONSTANTS(:,144));
     ALGEBRAIC(:,62) = 1.00000./(1.00000+power(STATES(:,2)./0.000200000,  - 4.00000));
-    ALGEBRAIC(:,65) =  CONSTANTS(:,44).*STATES(:,16).*ALGEBRAIC(:,62).*CONSTANTS(:,128).*(STATES(:,1) - CONSTANTS(:,43));
-    ALGEBRAIC(:,47) =  CONSTANTS(:,39).*(STATES(:,1) - CONSTANTS(:,144));
+    ALGEBRAIC(:,65) =  CONSTANTS(:,45).*STATES(:,16).*ALGEBRAIC(:,62).*CONSTANTS(:,129).*(STATES(:,1) - CONSTANTS(:,44));
+    ALGEBRAIC(:,47) =  CONSTANTS(:,40).*(STATES(:,1) - CONSTANTS(:,145));
     ALGEBRAIC(:,6) =  CONSTANTS(:,16).*(STATES(:,3) - STATES(:,1));
-    ALGEBRAIC(:,63) = ( 1.00000e+15.*ALGEBRAIC(:,46).*CONSTANTS(:,150))./CONSTANTS(:,91);
-    ALGEBRAIC(:,66) = (((  - CONSTANTS(:,86).*CONSTANTS(:,89)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,133))+ CONSTANTS(:,86).*STATES(:,17)) - ( CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89))./(CONSTANTS(:,89)+STATES(:,17)))+power((power(( CONSTANTS(:,86).*CONSTANTS(:,89)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,133))+ CONSTANTS(:,86).*STATES(:,17)) - ( CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89))./(CONSTANTS(:,89)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,86).*CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,86));
-    ALGEBRAIC(:,67) =  CONSTANTS(:,92).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,66))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,66)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,66))))).*0.00100000;
-    ALGEBRAIC(:,68) = 1.00000./( (1.00000+exp( (CONSTANTS(:,95) - STATES(:,3)).*CONSTANTS(:,96))).*(1.00000+power(ALGEBRAIC(:,66)./( 1.39000.*exp(  - CONSTANTS(:,90).*STATES(:,3))),  - CONSTANTS(:,94))));
-    ALGEBRAIC(:,49) =  CONSTANTS(:,79).*(STATES(:,3) - CONSTANTS(:,131));
-    ALGEBRAIC(:,52) = piecewise({VOI.*0.00100000>CONSTANTS(:,81)&VOI.*0.00100000<CONSTANTS(:,81)+CONSTANTS(:,82), CONSTANTS(:,80) }, 0.00000);
-    ALGEBRAIC(:,15) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp(  - CONSTANTS(:,33).*CONSTANTS(:,25)))./(1.00000 - exp( - CONSTANTS(:,33))) }, 0.00000);
-    ALGEBRAIC(:,30) =  ALGEBRAIC(:,15).*CONSTANTS(:,29);
-    ALGEBRAIC(:,55) = power(STATES(:,17), CONSTANTS(:,83))./(power(CONSTANTS(:,84), CONSTANTS(:,83))+power(STATES(:,17), CONSTANTS(:,83)));
-    ALGEBRAIC(:,59) =  CONSTANTS(:,85).*(1.00000 - ALGEBRAIC(:,30)).*ALGEBRAIC(:,55).*(STATES(:,3) - CONSTANTS(:,65));
-    ALGEBRAIC(:,28) =  ALGEBRAIC(:,15).*CONSTANTS(:,28);
+    ALGEBRAIC(:,63) = ( 1.00000e+15.*ALGEBRAIC(:,46).*CONSTANTS(:,151))./CONSTANTS(:,92);
+    ALGEBRAIC(:,66) = (((  - CONSTANTS(:,87).*CONSTANTS(:,90)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,87).*STATES(:,17)) - ( CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90))./(CONSTANTS(:,90)+STATES(:,17)))+power((power(( CONSTANTS(:,87).*CONSTANTS(:,90)+ALGEBRAIC(:,63)./( 2.00000.* pi.*CONSTANTS(:,134))+ CONSTANTS(:,87).*STATES(:,17)) - ( CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90))./(CONSTANTS(:,90)+STATES(:,17)), 2.00000)+ 4.00000.*CONSTANTS(:,87).*CONSTANTS(:,88).*CONSTANTS(:,89).*CONSTANTS(:,90)), 1.0 ./ 2))./( 2.00000.*CONSTANTS(:,87));
+    ALGEBRAIC(:,67) =  CONSTANTS(:,93).*( 81.6300.*exp(  - 0.570000.*ALGEBRAIC(:,66))+ 76.1700.*exp(  - 0.0537400.*ALGEBRAIC(:,66)).*exp(STATES(:,3)./( 70.3000.*exp( 0.153000.*ALGEBRAIC(:,66))))).*0.00100000;
+    ALGEBRAIC(:,68) = 1.00000./( (1.00000+exp( (CONSTANTS(:,96) - STATES(:,3)).*CONSTANTS(:,97))).*(1.00000+power(ALGEBRAIC(:,66)./( 1.39000.*exp(  - CONSTANTS(:,91).*STATES(:,3))),  - CONSTANTS(:,95))));
+    ALGEBRAIC(:,49) =  CONSTANTS(:,80).*(STATES(:,3) - CONSTANTS(:,132));
+    ALGEBRAIC(:,52) = piecewise({VOI.*0.00100000>CONSTANTS(:,82)&VOI.*0.00100000<CONSTANTS(:,82)+CONSTANTS(:,83), CONSTANTS(:,81) }, 0.00000);
+    ALGEBRAIC(:,15) = piecewise({VOI.*0.00100000>CONSTANTS(:,26)&VOI.*0.00100000<CONSTANTS(:,27), (1.00000 - exp((  - CONSTANTS(:,34).*CONSTANTS(:,25))./CONSTANTS(:,28)))./(1.00000 - exp( - CONSTANTS(:,34))) }, 0.00000);
+    ALGEBRAIC(:,30) =  ALGEBRAIC(:,15).*CONSTANTS(:,30);
+    ALGEBRAIC(:,55) = power(STATES(:,17), CONSTANTS(:,84))./(power(CONSTANTS(:,85), CONSTANTS(:,84))+power(STATES(:,17), CONSTANTS(:,84)));
+    ALGEBRAIC(:,59) =  CONSTANTS(:,86).*(1.00000 - ALGEBRAIC(:,30)).*ALGEBRAIC(:,55).*(STATES(:,3) - CONSTANTS(:,66));
+    ALGEBRAIC(:,28) =  ALGEBRAIC(:,15).*CONSTANTS(:,29);
     ALGEBRAIC(:,69) = ( STATES(:,21).*ALGEBRAIC(:,28).*1.00000)./(1.00000+power((ALGEBRAIC(:,68) - STATES(:,21))./ALGEBRAIC(:,67), 2.00000));
-    ALGEBRAIC(:,70) =  CONSTANTS(:,97).*(STATES(:,21) - ALGEBRAIC(:,69)).*(STATES(:,3) - CONSTANTS(:,129));
-    ALGEBRAIC(:,71) =  CONSTANTS(:,119).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,70) =  CONSTANTS(:,98).*(STATES(:,21) - ALGEBRAIC(:,69)).*(STATES(:,3) - CONSTANTS(:,130));
+    ALGEBRAIC(:,71) =  CONSTANTS(:,120).*(STATES(:,3) - CONSTANTS(:,131));
     ALGEBRAIC(:,72) = ALGEBRAIC(:,43)+ALGEBRAIC(:,70)+ALGEBRAIC(:,36)+ALGEBRAIC(:,49)+ALGEBRAIC(:,71)+ALGEBRAIC(:,59)+ALGEBRAIC(:,52);
-    ALGEBRAIC(:,42) =  ALGEBRAIC(:,39).*CONSTANTS(:,30);
+    ALGEBRAIC(:,42) =  ALGEBRAIC(:,39).*CONSTANTS(:,31);
     ALGEBRAIC(:,45) =  CONSTANTS(:,21).*(1.00000+ALGEBRAIC(:,42));
     ALGEBRAIC(:,48) = ( CONSTANTS(:,23).*power(STATES(:,2).*1000.00, CONSTANTS(:,22)))./(power(STATES(:,2).*1000.00, CONSTANTS(:,22))+power(ALGEBRAIC(:,45), CONSTANTS(:,22)));
 end
diff --git a/parameter_optimisation/objFun_ICC.m b/parameter_optimisation/objFun_ICC.m
index f3384a2..6301fa5 100644
--- a/parameter_optimisation/objFun_ICC.m
+++ b/parameter_optimisation/objFun_ICC.m
@@ -14,8 +14,8 @@ if effect_vals(end) == 0
 end
 
 % evaulation points
-x_i = [0.0 1.0	5.0	10.0]./10;
-x_e = 0;
+f_i = [0.0 1.0	5.0	10.0];
+f_e = 0;
 
 f = zeros(4, 1);
 peak_p = zeros(4, 1);
@@ -24,8 +24,8 @@ plateau_p = zeros(4, 1);
 weighting = [effect_vals(end), 1, 1]; % fixed parameters
 effect_vals = [effect_vals(1:end-1), 0, 0, 0]; % fixed parameters
 
-for i = 1:length(x_i)
-    [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, x_e, x_i(i));
+for i = 1:length(f_i)
+    [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, f_e, f_i(i));
     T = a(:, 7);
     Vm_ICC = s(:,3);
     Vm_SMC = s(:,1);
@@ -37,9 +37,11 @@ plateau_p_rescale = plateau_p/plateau_p(1);
 % data extracted from Kim et al. 2003 Fig 2E
 Kim_fig2E = [0, 100;0.000946090000000000,98.3939137800000;0.00120648700000000,98.2055768800000;0.00149234000000000,97.8542085100000;0.00184592000000000,97.4758117900000;0.00226313500000000,97.0502770100000;0.00352448900000000,96.2662937300000;0.00463847700000000,95.4757148800000;0.00573747200000000,94.8270348000000;0.00732049500000000,94.0297796300000;0.0108581580000000,92.3782674900000;0.0134307840000000,91.5836344000000;0.0166129420000000,90.5565576000000;0.0205490500000000,89.4754241300000;0.0254177400000000,87.9077806100000;0.0314399700000000,86.4482504300000;0.0388890480000000,84.9076352400000;0.0481030380000000,83.3399917100000;0.0595001000000000,81.4209798000000;0.0710349400000000,79.6857605900000;0.0833164800000000,78.0924401400000;0.114191555000000,74.9774243400000;0.136836836000000,72.5016287000000;0.160495152000000,70.5150459500000;0.184937668000000,68.7311757300000;0.213102644000000,66.8256780000000;0.245556989000000,64.8796377600000;0.282953949000000,62.7173708200000;0.331239772000000,60.9844190900000;0.371289264000000,59.1766587200000;0.432918496000000,56.6900517400000;0.498849569000000,54.6223839900000;0.574821577000000,52.4330887100000;0.662363699000000,50.3654209600000;0.760960443000000,48.5905601800000;0.848331134000000,46.7660679800000;0.960983511000000,44.7914726100000;1.10407054600000,42.7644281200000;1.25352238700000,40.9190172900000;1.44442685800000,38.9324345400000;1.69416009600000,36.9539603000000;1.98707079900000,34.6349290100000;2.37228939200000,32.1212937000000;2.78244481700000,29.8184794100000;3.38124249200000,27.8508165000000;4.01882523700000,25.8077757600000;4.90546749100000,23.7965660000000;5.97421148000000,21.6753261400000;7.11629309200000,19.7891646200000;8.41415762600000,18.1894147000000;9.96546812600000,16.7765208800000];
 
+frequencyToCysNO = @(x) (x*0.0094); % fig2E is dose response for cysNo. This function gives frequency as a function of cys NO. Currently this assumes a 1:1 relationship where 10 Hz === 0.094 uM. 
+
 % interpolate extracted traces
 fitKim2E = griddedInterpolant(Kim_fig2E(:, 1), Kim_fig2E(:, 2), 'spline');
-exp_plateau = fitKim2E(x_i*0.094)'./100; % express as percentage change from 0 stimulation
+exp_plateau = fitKim2E(frequencyToCysNO(f_i))'./100; % express as percentage change from 0 stimulation
 
 o = sum(abs(exp_plateau-plateau_p_rescale)); % sum of absolute deviation objective function
 end
\ No newline at end of file
diff --git a/parameter_optimisation/objFun_SMC.m b/parameter_optimisation/objFun_SMC.m
index 86a7b8c..766dc9e 100644
--- a/parameter_optimisation/objFun_SMC.m
+++ b/parameter_optimisation/objFun_SMC.m
@@ -14,18 +14,22 @@ if effect_vals(end) == 0
 end
 
 % evaulation points
-x_i = [0.0	1.0	5.0	10.0]./10;
-x_e = 0;
+f_i = [0.0	1.0	5.0	10.0];
+f_e = 0;
 
 f = zeros(4, 1);
 peak_p = zeros(4, 1);
 plateau_p = zeros(4, 1);
 
-weighting = [3.149932963402147, effect_vals(end), 1];  % fixed parameters
-effect_vals = [0.320920220620083,0.776439073613402, effect_vals(1:end-1), 0]; % fixed parameters
+% weighting = [3.34182038994190, effect_vals(end), 1];  % fixed parameters
+% effect_vals = [0.329454438664630,0.773384113014197, effect_vals(1:end-1), 0]; % fixed parameters
 
-for i = 1:length(x_i)
-    [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, x_e, x_i(i));
+% uncomment for low kiAno1 cluster
+weighting = [3.14933156638040, effect_vals(end), 1];  % fixed parameters
+effect_vals = [0.0914532418255071,0.844691701303740, effect_vals(1:end-1), 0]; % fixed parameters
+
+for i = 1:length(f_i)
+    [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, f_e, f_i(i));
     T = a(:, 7);
     Vm_ICC = s(:,3);
     Vm_SMC = s(:,1);
diff --git a/parameter_optimisation/optim_ICC.m b/parameter_optimisation/optim_ICC.m
index 7cf0a74..5820adb 100644
--- a/parameter_optimisation/optim_ICC.m
+++ b/parameter_optimisation/optim_ICC.m
@@ -4,6 +4,7 @@
 %%% parameters for k_iAno1, k_iNSCC, and p_iICC. 
 
 addpath(genpath('../'));
+rng(0, 'twister')
 
 % constraint definition, see "help fmincon"
 lb = [0; 0; -5];
@@ -18,7 +19,7 @@ p = scramble(a,'MatousekAffineOwen');
 candidate = net(p,1000);
 candidate((candidate(:, 1)*10/9+candidate(:, 2)) > 253/180, :) = [];
 x0 = candidate(1:n, :); % sequence k_iAno1, kiNSCC, p_iICC
-x0(:, 3) = (x0(:, 3)-0.5)*10;
+x0(:, 3) = (x0(:, 3)-0.5)*10; % rescale p_iICC to be in [-5, 5]
 
 % initialise output matrices
 sol = nan(size(x0));
@@ -33,22 +34,5 @@ parfor i = 1:size(x0, 1)
     [sol(i, :),fval(i),exitflag(i),output{i}] = fmincon(@objFun_ICC,x0(i, :), A, b, [], [], lb, ub, [], options); 
 end
 
-% display the percentage change in solution values per intialisation 
-% (note randomisation)
-for randomSeed = 1:100
-for i = 1:48
-    cumulativeMed(i, :, randomSeed) = median(sol(randperm(48, i), :), 1);
-end
-end
-cumulativeMed = sum(cumulativeMed, 3);
-figure; 
-plot((diff(cumulativeMed)./cumulativeMed(1:end-1, :)).*100)
-yline(1)
-yline(-1)
-xlabel('Number of initialisations')
-ylabel({'Marginal change in solution value' , 'per additional intitialisation (%)'})
-ylim([-50, 50])
-legend({'k_iAno1', 'k_iNSCC', 'p_iICC'})
-
 save(sprintf('../data/optim_ICC_%s', datestr(datetime, 'yymmddHHMMSS')));
 
diff --git a/parameter_optimisation/optim_SMC.m b/parameter_optimisation/optim_SMC.m
index 4ebf529..0aec3a0 100644
--- a/parameter_optimisation/optim_SMC.m
+++ b/parameter_optimisation/optim_SMC.m
@@ -4,6 +4,7 @@
 %%% parameters for k_iCa50, k_iNSCC, and p_iSMC. 
 
 addpath(genpath('../'));
+rng(0, 'twister')
 
 % constraint definition, see "help fmincon"
 lb = [0; 0; -5];
@@ -14,7 +15,7 @@ n = 48; % number of inital guesses to sample
 a = sobolset(3);
 p = scramble(a,'MatousekAffineOwen');
 x0 = net(p,n); % sequence k_iCa50, kiSK, p_iSMC
-x0(:, 3) = (x0(:, 3)-0.5)*10;
+x0(:, 3) = (x0(:, 3)-0.5)*10; % rescale p_iSMC to be in [-5, 5]
 
 % initialise output matrices
 sol = nan(size(x0));
diff --git a/parameter_optimisation/plot_coverage.m b/parameter_optimisation/plot_coverage.m
new file mode 100644
index 0000000..415e495
--- /dev/null
+++ b/parameter_optimisation/plot_coverage.m
@@ -0,0 +1,32 @@
+% display the percentage change in solution values per intialisation 
+% (note randomisation)
+for randomSeed = 1:100
+for i = 1:48
+    cumulativeMed(i, :, randomSeed) = median(sol(randperm(48, i), :), 1);
+end
+end
+cumulativeMed = sum(cumulativeMed, 3);
+figure; 
+plot((diff(cumulativeMed)./cumulativeMed(1:end-1, :)).*100)
+yline(1)
+yline(-1)
+xlabel('Number of initialisations')
+ylabel({'Marginal change in solution value' , 'per additional intitialisation (%)'})
+ylim([-50, 50])
+legend({'k_iAno1', 'k_iNSCC', 'p_iICC'})
+
+%%
+for i = 1:100
+    seq = randperm(48, 48);
+    margChange(:, :, i) = cumsum(sol(seq(2:end), :))./cumsum(sol(seq(1:end-1), :)) -1;
+end
+seq = 1:48;
+margChange= vecnorm(sol(seq(2:end), :)-sol(seq(1:end-1), :), 2, 2)cumsum(sol(seq(2:end), :))./cumsum(sol(seq(1:end-1), :)) -1;
+
+figure; plot(mean(margChange, 3));
+yline(0.01)
+yline(-0.01)
+xlim([0 48])
+ylim([-0.1, 0.1])
+xlabel('Number of iterations')
+ylabel('Marginal change in cumulative parameter value')
\ No newline at end of file
diff --git a/sensitivity_analysis/SA2_analysis_plot.py b/sensitivity_analysis/SA2_analysis_plot.py
index a1f6509..af63c46 100644
--- a/sensitivity_analysis/SA2_analysis_plot.py
+++ b/sensitivity_analysis/SA2_analysis_plot.py
@@ -45,4 +45,4 @@ axes[1, 1].bar(np.array(np.linspace(0, 3, 4)), Si_freq['ST'], tick_label=problem
 axes[1, 1].set_ylim(0, 1.2)
 axes[1, 1].set_yticklabels([])
 
-fig.savefig('SA_bar_charts.svg')
\ No newline at end of file
+fig.savefig('../generated_figures/SA_bar_charts.svg')
\ No newline at end of file
diff --git a/sensitivity_analysis/parallel_SA_simulate.m b/sensitivity_analysis/parallel_SA_simulate.m
index d45aa82..74042af 100644
--- a/sensitivity_analysis/parallel_SA_simulate.m
+++ b/sensitivity_analysis/parallel_SA_simulate.m
@@ -1,14 +1,14 @@
 %%% parallel_SA_simulate.m
 %%% Reads a matrix of parameter values and simulates the model with 
-%%% x_i = x_e = 1 for all values. The script SA1_sampling.py uses SALib in
+%%% f_i = f_e = 1 for all values. The script SA1_sampling.py uses SALib in
 %%% Python to generate Saltelli sample of +/-10% of the selected parameter
 %%% values. Run SA2_analysis_plot.py after this script to perform 
 %%% Variance-Based Sensitivity Analysis by the Sobol method and 
 %%% generate plots of the result. 
 
 weighting = [1 1 1];
-x_i = 1;
-x_e = 0;
+f_i = 10;
+f_e = 0;
 
 % read sampled parameters from file (file generated by SA1_sampling.py)
 effect_vals = readmatrix('param_values.txt');
@@ -26,7 +26,7 @@ plateau_p_ICC = zeros(n, 1);
 % simulate with sampled parameter values in parallel
 parpool(48);
 parfor i = 1:n
-    [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weighting, x_e, x_i);
+    [t, s, a] = ICC_SMC_Neuro(effect_vals(i, :), weighting, f_e, f_i);
     T = a(:, 7);
     Vm_ICC = s(:,3);
     Vm_SMC = s(:,1);
