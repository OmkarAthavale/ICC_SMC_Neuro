function o = objFun_ICC(effect_vals)
%%% objFun_ICC.m
%%% Omkar N. Athavale, May 2023
%%% Calculate objective function for Step 1 of optimisation procedure (ICC inhibitory component)
%%% INPUTS
%%% effect_vals: 1 x 3 array of k_iAno1, k_iNSCC, p_iICC
%%%
%%% OUTPUTS
%%% o: objective function value

% p_iICC cannot be 0
if effect_vals(end) == 0
    effect_vals(end) = 1e-4;
end

% evaulation points
x_i = [0.0 1.0	5.0	10.0]./10;
x_e = 0;

f = zeros(4, 1);
peak_p = zeros(4, 1);
plateau_p = zeros(4, 1);

weighting = [effect_vals(end), 1, 1]; % fixed parameters
effect_vals = [effect_vals(1:end-1), 0, 0, 0]; % fixed parameters

for i = 1:length(x_i)
    [t, s, a] = ICC_SMC_Neuro(effect_vals, weighting, x_e, x_i(i));
    T = a(:, 7);
    Vm_ICC = s(:,3);
    Vm_SMC = s(:,1);
    [f(i), peak_p(i), plateau_p(i)] = calculate_metrics(t, Vm_ICC, [60000 180000]); % uses Vm_ICC
end

plateau_p_rescale = plateau_p/plateau_p(1);

% data extracted from Kim et al. 2003 Fig 2E
Kim_fig2E = [0, 100;0.000946090000000000,98.3939137800000;0.00120648700000000,98.2055768800000;0.00149234000000000,97.8542085100000;0.00184592000000000,97.4758117900000;0.00226313500000000,97.0502770100000;0.00352448900000000,96.2662937300000;0.00463847700000000,95.4757148800000;0.00573747200000000,94.8270348000000;0.00732049500000000,94.0297796300000;0.0108581580000000,92.3782674900000;0.0134307840000000,91.5836344000000;0.0166129420000000,90.5565576000000;0.0205490500000000,89.4754241300000;0.0254177400000000,87.9077806100000;0.0314399700000000,86.4482504300000;0.0388890480000000,84.9076352400000;0.0481030380000000,83.3399917100000;0.0595001000000000,81.4209798000000;0.0710349400000000,79.6857605900000;0.0833164800000000,78.0924401400000;0.114191555000000,74.9774243400000;0.136836836000000,72.5016287000000;0.160495152000000,70.5150459500000;0.184937668000000,68.7311757300000;0.213102644000000,66.8256780000000;0.245556989000000,64.8796377600000;0.282953949000000,62.7173708200000;0.331239772000000,60.9844190900000;0.371289264000000,59.1766587200000;0.432918496000000,56.6900517400000;0.498849569000000,54.6223839900000;0.574821577000000,52.4330887100000;0.662363699000000,50.3654209600000;0.760960443000000,48.5905601800000;0.848331134000000,46.7660679800000;0.960983511000000,44.7914726100000;1.10407054600000,42.7644281200000;1.25352238700000,40.9190172900000;1.44442685800000,38.9324345400000;1.69416009600000,36.9539603000000;1.98707079900000,34.6349290100000;2.37228939200000,32.1212937000000;2.78244481700000,29.8184794100000;3.38124249200000,27.8508165000000;4.01882523700000,25.8077757600000;4.90546749100000,23.7965660000000;5.97421148000000,21.6753261400000;7.11629309200000,19.7891646200000;8.41415762600000,18.1894147000000;9.96546812600000,16.7765208800000];
% cysNOtoFrequency = @(x) (x*0.094); % fig2E is dose response for cysNo. This function gives frequency as a function of cys NO. Currently this assumes a 1:1 relationship.
cysNOtoFrequency = @(x) (x*0.094); % fig2E is dose response for cysNo. This function gives frequency as a function of cys NO. Currently this assumes a 1:1 relationship.

% interpolate extracted traces
fitKim2E = griddedInterpolant(Kim_fig2E(:, 1), Kim_fig2E(:, 2), 'spline');
exp_plateau = fitKim2E(cysNOtoFrequency(x_i))'./100; % express as percentage change from 0 stimulation

o = sum(abs(exp_plateau-plateau_p_rescale)); % sum of absolute deviation objective function
end